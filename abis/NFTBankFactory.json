{
	"contractName": "NFTBankFactory",
	"abi": [
	  {
		"inputs": [
		  {
			"internalType": "address",
			"name": "_launchpadFeeWallet",
			"type": "address"
		  },
		  {
			"internalType": "address",
			"name": "_nftBankImpl",
			"type": "address"
		  },
		  {
			"internalType": "address",
			"name": "_superAdmin",
			"type": "address"
		  },
		  {
			"internalType": "uint256",
			"name": "_launchpadFeePercentage",
			"type": "uint256"
		  },
		  {
			"internalType": "uint256",
			"name": "_mintCap",
			"type": "uint256"
		  }
		],
		"stateMutability": "nonpayable",
		"type": "constructor"
	  },
	  {
		"inputs": [],
		"name": "DoesNotSupportINFTBank",
		"type": "error"
	  },
	  {
		"inputs": [],
		"name": "NotADifferentImpl",
		"type": "error"
	  },
	  {
		"anonymous": false,
		"inputs": [
		  {
			"indexed": true,
			"internalType": "address",
			"name": "nftBankProxyAddress",
			"type": "address"
		  },
		  {
			"indexed": true,
			"internalType": "string",
			"name": "name",
			"type": "string"
		  },
		  {
			"indexed": false,
			"internalType": "uint256",
			"name": "launchpadFee",
			"type": "uint256"
		  },
		  {
			"indexed": false,
			"internalType": "uint256",
			"name": "nftImportExpirationTime",
			"type": "uint256"
		  }
		],
		"name": "NFTBankCreated",
		"type": "event"
	  },
	  {
		"anonymous": false,
		"inputs": [
		  {
			"indexed": false,
			"internalType": "uint256",
			"name": "newLaunchpadFeePercentage",
			"type": "uint256"
		  },
		  {
			"indexed": false,
			"internalType": "uint256",
			"name": "oldLaunchpadFeePercentage",
			"type": "uint256"
		  }
		],
		"name": "NewLaunchpadFeeWasSet",
		"type": "event"
	  },
	  {
		"anonymous": false,
		"inputs": [
		  {
			"indexed": false,
			"internalType": "uint256",
			"name": "newMintCap",
			"type": "uint256"
		  },
		  {
			"indexed": false,
			"internalType": "uint256",
			"name": "oldMintCap",
			"type": "uint256"
		  }
		],
		"name": "NewMintCapWasSet",
		"type": "event"
	  },
	  {
		"anonymous": false,
		"inputs": [
		  {
			"indexed": false,
			"internalType": "address",
			"name": "newImpl",
			"type": "address"
		  },
		  {
			"indexed": false,
			"internalType": "address",
			"name": "oldImpl",
			"type": "address"
		  }
		],
		"name": "NewNFTBankImplWasSet",
		"type": "event"
	  },
	  {
		"anonymous": false,
		"inputs": [
		  {
			"indexed": false,
			"internalType": "address",
			"name": "newSuperAdmin",
			"type": "address"
		  },
		  {
			"indexed": false,
			"internalType": "address",
			"name": "oldSuperAdmin",
			"type": "address"
		  }
		],
		"name": "NewSuperAdminWasSet",
		"type": "event"
	  },
	  {
		"anonymous": false,
		"inputs": [
		  {
			"indexed": true,
			"internalType": "bytes32",
			"name": "role",
			"type": "bytes32"
		  },
		  {
			"indexed": true,
			"internalType": "bytes32",
			"name": "previousAdminRole",
			"type": "bytes32"
		  },
		  {
			"indexed": true,
			"internalType": "bytes32",
			"name": "newAdminRole",
			"type": "bytes32"
		  }
		],
		"name": "RoleAdminChanged",
		"type": "event"
	  },
	  {
		"anonymous": false,
		"inputs": [
		  {
			"indexed": true,
			"internalType": "bytes32",
			"name": "role",
			"type": "bytes32"
		  },
		  {
			"indexed": true,
			"internalType": "address",
			"name": "account",
			"type": "address"
		  },
		  {
			"indexed": true,
			"internalType": "address",
			"name": "sender",
			"type": "address"
		  }
		],
		"name": "RoleGranted",
		"type": "event"
	  },
	  {
		"anonymous": false,
		"inputs": [
		  {
			"indexed": true,
			"internalType": "bytes32",
			"name": "role",
			"type": "bytes32"
		  },
		  {
			"indexed": true,
			"internalType": "address",
			"name": "account",
			"type": "address"
		  },
		  {
			"indexed": true,
			"internalType": "address",
			"name": "sender",
			"type": "address"
		  }
		],
		"name": "RoleRevoked",
		"type": "event"
	  },
	  {
		"inputs": [],
		"name": "ADMIN_ROLE",
		"outputs": [
		  {
			"internalType": "bytes32",
			"name": "",
			"type": "bytes32"
		  }
		],
		"stateMutability": "view",
		"type": "function"
	  },
	  {
		"inputs": [],
		"name": "BANK_CREATOR_ROLE",
		"outputs": [
		  {
			"internalType": "bytes32",
			"name": "",
			"type": "bytes32"
		  }
		],
		"stateMutability": "view",
		"type": "function"
	  },
	  {
		"inputs": [],
		"name": "DEFAULT_ADMIN_ROLE",
		"outputs": [
		  {
			"internalType": "bytes32",
			"name": "",
			"type": "bytes32"
		  }
		],
		"stateMutability": "view",
		"type": "function"
	  },
	  {
		"inputs": [
		  {
			"internalType": "string",
			"name": "name",
			"type": "string"
		  },
		  {
			"internalType": "uint256",
			"name": "nftImportExpirationTime",
			"type": "uint256"
		  }
		],
		"name": "createBankProxy",
		"outputs": [
		  {
			"internalType": "address",
			"name": "",
			"type": "address"
		  }
		],
		"stateMutability": "nonpayable",
		"type": "function"
	  },
	  {
		"inputs": [
		  {
			"internalType": "bytes32",
			"name": "role",
			"type": "bytes32"
		  }
		],
		"name": "getRoleAdmin",
		"outputs": [
		  {
			"internalType": "bytes32",
			"name": "",
			"type": "bytes32"
		  }
		],
		"stateMutability": "view",
		"type": "function"
	  },
	  {
		"inputs": [
		  {
			"internalType": "bytes32",
			"name": "role",
			"type": "bytes32"
		  },
		  {
			"internalType": "address",
			"name": "account",
			"type": "address"
		  }
		],
		"name": "grantRole",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	  },
	  {
		"inputs": [
		  {
			"internalType": "bytes32",
			"name": "role",
			"type": "bytes32"
		  },
		  {
			"internalType": "address",
			"name": "account",
			"type": "address"
		  }
		],
		"name": "hasRole",
		"outputs": [
		  {
			"internalType": "bool",
			"name": "",
			"type": "bool"
		  }
		],
		"stateMutability": "view",
		"type": "function"
	  },
	  {
		"inputs": [],
		"name": "launchpadFeePercentage",
		"outputs": [
		  {
			"internalType": "uint256",
			"name": "",
			"type": "uint256"
		  }
		],
		"stateMutability": "view",
		"type": "function"
	  },
	  {
		"inputs": [],
		"name": "launchpadFeeWallet",
		"outputs": [
		  {
			"internalType": "address",
			"name": "",
			"type": "address"
		  }
		],
		"stateMutability": "view",
		"type": "function"
	  },
	  {
		"inputs": [],
		"name": "mintCap",
		"outputs": [
		  {
			"internalType": "uint256",
			"name": "",
			"type": "uint256"
		  }
		],
		"stateMutability": "view",
		"type": "function"
	  },
	  {
		"inputs": [],
		"name": "nftBankImpl",
		"outputs": [
		  {
			"internalType": "address",
			"name": "",
			"type": "address"
		  }
		],
		"stateMutability": "view",
		"type": "function"
	  },
	  {
		"inputs": [
		  {
			"internalType": "bytes32",
			"name": "role",
			"type": "bytes32"
		  },
		  {
			"internalType": "address",
			"name": "account",
			"type": "address"
		  }
		],
		"name": "renounceRole",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	  },
	  {
		"inputs": [
		  {
			"internalType": "bytes32",
			"name": "role",
			"type": "bytes32"
		  },
		  {
			"internalType": "address",
			"name": "account",
			"type": "address"
		  }
		],
		"name": "revokeRole",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	  },
	  {
		"inputs": [
		  {
			"internalType": "uint256",
			"name": "_launchpadFeePercentage",
			"type": "uint256"
		  }
		],
		"name": "setLaunchpadFeePercentage",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	  },
	  {
		"inputs": [
		  {
			"internalType": "uint256",
			"name": "_mintCap",
			"type": "uint256"
		  }
		],
		"name": "setMintCap",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	  },
	  {
		"inputs": [
		  {
			"internalType": "address",
			"name": "ImpAdr",
			"type": "address"
		  }
		],
		"name": "setNewBankImplAddress",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	  },
	  {
		"inputs": [
		  {
			"internalType": "address",
			"name": "_superAdmin",
			"type": "address"
		  }
		],
		"name": "setNewSuperAdmin",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	  },
	  {
		"inputs": [],
		"name": "superAdmin",
		"outputs": [
		  {
			"internalType": "address",
			"name": "",
			"type": "address"
		  }
		],
		"stateMutability": "view",
		"type": "function"
	  },
	  {
		"inputs": [
		  {
			"internalType": "bytes4",
			"name": "interfaceId",
			"type": "bytes4"
		  }
		],
		"name": "supportsInterface",
		"outputs": [
		  {
			"internalType": "bool",
			"name": "",
			"type": "bool"
		  }
		],
		"stateMutability": "view",
		"type": "function"
	  }
	],
	"bytecode": "0x60806040527fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756001557f9f44b334a89ed2764ab332a7faa64bec31e526154eb4d5a7659c666048fd49146002553480156200005957600080fd5b5060405162002c0638038062002c068339810160408190526200007c916200023d565b600480546001600160a01b038087166001600160a01b0319928316179092556003805492861692909116919091179055600154620000c290620000bc3390565b62000125565b600254620000d1903362000125565b600154620000e0908062000135565b620000f66002546001546200013560201b60201c565b600580546001600160a01b0319166001600160a01b03969096169590951790945560065550506007556200029a565b62000131828262000180565b5050565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000131576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001dc3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b80516001600160a01b03811681146200023857600080fd5b919050565b600080600080600060a086880312156200025657600080fd5b620002618662000220565b9450620002716020870162000220565b9350620002816040870162000220565b6060870151608090970151959894975095949392505050565b61295c80620002aa6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806375b238fc116100ad578063b6c3ef2711610071578063b6c3ef2714610254578063ce791ce314610267578063d547741f1461027a578063ec5eb5da1461028d578063f8be73dd1461029657600080fd5b806375b238fc1461021457806376c71ca11461021d57806391d148541461022657806395f148f714610239578063a217fddf1461024c57600080fd5b806329575f6a116100f457806329575f6a146101a75780632e4db810146101d25780632f2ff15d146101db57806336568abe146101ee5780634070a0c91461020157600080fd5b806301ffc9a71461012657806303745a0e1461014e57806313877cea14610163578063248a9ca314610176575b600080fd5b610139610134366004610abe565b6102a9565b60405190151581526020015b60405180910390f35b61016161015c366004610b04565b6102e0565b005b610161610171366004610b1f565b61041c565b610199610184366004610b1f565b60009081526020819052604090206001015490565b604051908152602001610145565b6003546101ba906001600160a01b031681565b6040516001600160a01b039091168152602001610145565b61019960065481565b6101616101e9366004610b38565b610466565b6101616101fc366004610b38565b610490565b61016161020f366004610b1f565b61050f565b61019960015481565b61019960075481565b610139610234366004610b38565b610559565b6004546101ba906001600160a01b031681565b610199600081565b610161610262366004610b04565b610582565b6101ba610275366004610b7a565b6105e6565b610161610288366004610b38565b61078f565b61019960025481565b6005546101ba906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b14806102da57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6001546102ec816107b4565b6004546001600160a01b038381169116141561031b5760405163ba501c4d60e01b815260040160405180910390fd5b6040516301ffc9a760e01b81526392209dbf60e01b60048201526001600160a01b038316906301ffc9a79060240160206040518083038186803b15801561036157600080fd5b505afa158015610375573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103999190610c2f565b156103ff57600480546001600160a01b038481166001600160a01b03198316811790935560408051938452911660208301819052917fef71174d9cb18ecb75827201470103b3ca2e98bffc6a123c181a4294aacd665b91015b60405180910390a1505050565b604051631dc9bba760e31b815260040160405180910390fd5b5050565b600154610428816107b4565b600680549083905560408051848152602081018390527fa5bdea0442f92d4f8cfcb2ef097cbef895dee459e114d0a2d1dfc94e7b9637ce91016103f2565b600082815260208190526040902060010154610481816107b4565b61048b83836107c1565b505050565b6001600160a01b03811633146105055760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6104188282610845565b60015461051b816107b4565b600780549083905560408051848152602081018390527fde0f3e82f0d197e64e2b50a8428517693190e0c2b6beaa3511c60e0ff031dda391016103f2565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60015461058e816107b4565b600380546001600160a01b038481166001600160a01b03198316811790935560408051938452911660208301819052917f4bf62747831e52566c95db9dc765944d67440aa79e4be5784042e4bff7e955f691016103f2565b60006002546105f4816107b4565b600060405161060290610ab1565b604051809103906000f08015801561061e573d6000803e3d6000fd5b5060048054604051631b2ce7f360e11b81526001600160a01b03918216928101929092529192508291821690633659cfe690602401600060405180830381600087803b15801561066d57600080fd5b505af1158015610681573d6000803e3d6000fd5b505060408051606080820183526005546001600160a01b0390811683526003548116602080850191909152338486015284519283018552600754835282018b9052600654828501529251630eb65d8f60e21b8152919450925090851690633ad9763c906106f6908b9085908790600401610cad565b600060405180830381600087803b15801561071057600080fd5b505af1158015610724573d6000803e3d6000fd5b50505050876040516107369190610d25565b604080519182900382206006548352602083018a9052916001600160a01b038616917f37cd716b957e7c7bcfb2f5ae26d6d900abef16103b3d6e068c3d9b73c5c277ae910160405180910390a350909695505050505050565b6000828152602081905260409020600101546107aa816107b4565b61048b8383610845565b6107be81336108aa565b50565b6107cb8282610559565b610418576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556108013390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61084f8282610559565b15610418576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6108b48282610559565b610418576108cc816001600160a01b0316601461090e565b6108d783602061090e565b6040516020016108e8929190610d41565b60408051601f198184030181529082905262461bcd60e51b82526104fc91600401610db6565b6060600061091d836002610ddf565b610928906002610dfe565b67ffffffffffffffff81111561094057610940610b64565b6040519080825280601f01601f19166020018201604052801561096a576020820181803683370190505b509050600360fc1b8160008151811061098557610985610e16565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106109b4576109b4610e16565b60200101906001600160f81b031916908160001a90535060006109d8846002610ddf565b6109e3906001610dfe565b90505b6001811115610a5b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610a1757610a17610e16565b1a60f81b828281518110610a2d57610a2d610e16565b60200101906001600160f81b031916908160001a90535060049490941c93610a5481610e2c565b90506109e6565b508315610aaa5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104fc565b9392505050565b611ae380610e4483390190565b600060208284031215610ad057600080fd5b81356001600160e01b031981168114610aaa57600080fd5b80356001600160a01b0381168114610aff57600080fd5b919050565b600060208284031215610b1657600080fd5b610aaa82610ae8565b600060208284031215610b3157600080fd5b5035919050565b60008060408385031215610b4b57600080fd5b82359150610b5b60208401610ae8565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610b8d57600080fd5b823567ffffffffffffffff80821115610ba557600080fd5b818501915085601f830112610bb957600080fd5b813581811115610bcb57610bcb610b64565b604051601f8201601f19908116603f01168101908382118183101715610bf357610bf3610b64565b81604052828152886020848701011115610c0c57600080fd5b826020860160208301376000602093820184015298969091013596505050505050565b600060208284031215610c4157600080fd5b81518015158114610aaa57600080fd5b60005b83811015610c6c578181015183820152602001610c54565b83811115610c7b576000848401525b50505050565b60008151808452610c99816020860160208601610c51565b601f01601f19169290920160200192915050565b60e081526000610cc060e0830186610c81565b905060208083018560005b6003811015610ce857815183529183019190830190600101610ccb565b505050608083018460005b6003811015610d195781516001600160a01b031683529183019190830190600101610cf3565b50505050949350505050565b60008251610d37818460208701610c51565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610d79816017850160208801610c51565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610daa816028840160208801610c51565b01602801949350505050565b602081526000610aaa6020830184610c81565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610df957610df9610dc9565b500290565b60008219821115610e1157610e11610dc9565b500190565b634e487b7160e01b600052603260045260246000fd5b600081610e3b57610e3b610dc9565b50600019019056fe608060405234801561001057600080fd5b5061003b7f7613a25ecc738585a232ad50a301178f12b3ba8887d13e138b523c4269c4768933610040565b6100f0565b61004a828261004e565b5050565b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff1661004a57600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff191660011790556100ac3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6119e380620001006000396000f3fe6080604052600436106102975760003560e01c8063707109b41161015a578063a2fb1175116100c1578063ccbb62991161007a578063ccbb6299146107ff578063d182cf4d14610816578063d547741f1461082c578063f23a6e611461084c578063f621cc4814610878578063f8be73dd146109415761029e565b8063a2fb117514610731578063a870a5b214610751578063b0fe641414610768578063bc197c811461077f578063c6c9bd47146107ab578063caff99ce146107cb5761029e565b806395d89b411161011357806395d89b41146106ac57806395f148f7146106c15780639711d7e5146106e257806398eee484146106f95780639b7d707d14610710578063a217fddf146103dd5761029e565b8063707109b4146105f357806373ee45081461061557806375b238fc1461062b57806376c71ca11461065f57806377a714ae1461067657806391d148541461068c5761029e565b806332c60eef116101fe5780634460bdd6116101b75780634460bdd61461052d5780635813fd3d1461054f5780636588103b146105665780636817c76c1461059f5780636c0360eb146105b65780636fac889b146105cb5761029e565b806332c60eef1461048857806336568abe1461049f5780633659cfe6146104bf5780633ad9763c146104df5780633d779f32146104ff5780634264f40d146105165761029e565b80631649c6ce116102505780631649c6ce146103c65780631ae13c23146103dd578063248a9ca3146103f2578063295a5212146104225780632e4db8101461044f5780632f2ff15d146104665761029e565b806301ffc9a7146102d957806306fdde031461030e5780630c26abc31461033057806312f097461461035557806313ad88ca1461036c578063150b7a02146103825761029e565b3661029e57005b61013b546001600160a01b0316806102b557600080fd5b3660008037600080366000845af43d6000803e8080156102d4573d6000f35b3d6000fd5b3480156102e557600080fd5b506102f96102f43660046112eb565b610962565b60405190151581526020015b60405180910390f35b34801561031a57600080fd5b5061032361098d565b6040516103059190611341565b34801561033c57600080fd5b5061034761013a5481565b604051908152602001610305565b34801561036157600080fd5b506103476101385481565b34801561037857600080fd5b5061034761271081565b34801561038e57600080fd5b506103ad61039d366004611473565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610305565b3480156103d257600080fd5b5061034761012d5481565b3480156103e957600080fd5b50610347600081565b3480156103fe57600080fd5b5061034761040d3660046114db565b600090815260fb602052604090206001015490565b34801561042e57600080fd5b506101435461044290610100900460ff1681565b604051610305919061150a565b34801561045b57600080fd5b506103476101305481565b34801561047257600080fd5b50610486610481366004611524565b610a1c565b005b34801561049457600080fd5b506103476101335481565b3480156104ab57600080fd5b506104866104ba366004611524565b610a46565b3480156104cb57600080fd5b506104866104da366004611550565b610ac9565b3480156104eb57600080fd5b506104866104fa3660046115c2565b610b1a565b34801561050b57600080fd5b5061034761013f5481565b34801561052257600080fd5b506103476101395481565b34801561053957600080fd5b5061034760008051602061198e83398151915281565b34801561055b57600080fd5b506103476101325481565b34801561057257600080fd5b5061013d54610587906001600160a01b031681565b6040516001600160a01b039091168152602001610305565b3480156105ab57600080fd5b506103476101315481565b3480156105c257600080fd5b50610323610c9d565b3480156105d757600080fd5b50610143546105e69060ff1681565b6040516103059190611672565b3480156105ff57600080fd5b5061013e546102f990600160a01b900460ff1681565b34801561062157600080fd5b5061034761048381565b34801561063757600080fd5b506103477fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b34801561066b57600080fd5b5061034761012e5481565b34801561068257600080fd5b506103476102d181565b34801561069857600080fd5b506102f96106a7366004611524565b610cab565b3480156106b857600080fd5b50610323610cd6565b3480156106cd57600080fd5b5061013b54610587906001600160a01b031681565b3480156106ee57600080fd5b506103476101365481565b34801561070557600080fd5b506103476101375481565b34801561071c57600080fd5b5061013e54610587906001600160a01b031681565b34801561073d57600080fd5b5061058761074c3660046114db565b610ce4565b34801561075d57600080fd5b506103476101355481565b34801561077457600080fd5b506103476101345481565b34801561078b57600080fd5b506103ad61079a366004611706565b63bc197c8160e01b95945050505050565b3480156107b757600080fd5b506103476107c63660046114db565b610d0f565b3480156107d757600080fd5b506103477fe926d122b799dcbe5c2eccdf60ae0aefbb1a4bc75a7848bb07befecf8c775f5c81565b34801561080b57600080fd5b5061034761012f5481565b34801561082257600080fd5b5061034761271181565b34801561083857600080fd5b50610486610847366004611524565b610d31565b34801561085857600080fd5b506103ad6108673660046117b0565b63f23a6e6160e01b95945050505050565b34801561088457600080fd5b506108f3610893366004611550565b610145602052600090815260409020600281015460038201546004830154600584015460068501546007860154600890960154949593949293919290919063ffffffff81169060ff64010000000082048116916501000000000090041689565b60408051998a5260208a0198909852968801959095526060870193909352608086019190915260a085015263ffffffff1660c0840152151560e0830152151561010082015261012001610305565b34801561094d57600080fd5b5061013c54610587906001600160a01b031681565b60006001600160e01b031982166392209dbf60e01b1480610987575061098782610d56565b92915050565b610140805461099b90611815565b80601f01602080910402602001604051908101604052809291908181526020018280546109c790611815565b8015610a145780601f106109e957610100808354040283529160200191610a14565b820191906000526020600020905b8154815290600101906020018083116109f757829003601f168201915b505050505081565b600082815260fb6020526040902060010154610a3781610d7b565b610a418383610d88565b505050565b6001600160a01b0381163314610abb5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610ac58282610e0e565b5050565b60008051602061198e833981519152610ae181610d7b565b61013b546001600160a01b0383811691161415610b115760405163ba501c4d60e01b815260040160405180910390fd5b610ac582610e75565b6000610b266001610ec7565b90508015610b3e576000805461ff0019166101001790555b60008051602061198e833981519152610b5681610d7b565b610b5e610f54565b610b66610f54565b610b6e610f54565b8451610b8290610140906020880190611252565b50825161013c80546001600160a01b0319166001600160a01b03909216919091179055835161012e55602084015161012f556040840151610130554261012d55610be260008051602061198e8339815191528460015b6020020151610fc1565b610c0e7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775846002610bd8565b610c2660008051602061198e83398151915280610fcb565b610c507fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177580610fcb565b508015610c97576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b610142805461099b90611815565b600091825260fb602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610141805461099b90611815565b6101468181548110610cf557600080fd5b6000918252602090912001546001600160a01b0316905081565b6101478181548110610d2057600080fd5b600091825260209091200154905081565b600082815260fb6020526040902060010154610d4c81610d7b565b610a418383610e0e565b60006001600160e01b03198216637965db0b60e01b1480610987575061098782611016565b610d85813361104b565b50565b610d928282610cab565b610ac557600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610dca3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610e188282610cab565b15610ac557600082815260fb602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61013b80546001600160a01b038381166001600160a01b03198316811790935560405191169182917fd2d601ff50517068c7174bc2a7e6e8ea802702e59da429ebb0d6b381b2785c5d90600090a35050565b60008054610100900460ff1615610f0e578160ff166001148015610eea5750303b155b610f065760405162461bcd60e51b8152600401610ab290611866565b506000919050565b60005460ff808416911610610f355760405162461bcd60e51b8152600401610ab290611866565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16610fbf5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610ab2565b565b610ac58282610d88565b600082815260fb6020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60006001600160e01b03198216630271189760e51b148061098757506301ffc9a760e01b6001600160e01b0319831614610987565b6110558282610cab565b610ac55761106d816001600160a01b031660146110af565b6110788360206110af565b6040516020016110899291906118b4565b60408051601f198184030181529082905262461bcd60e51b8252610ab291600401611341565b606060006110be83600261193f565b6110c990600261195e565b67ffffffffffffffff8111156110e1576110e161138b565b6040519080825280601f01601f19166020018201604052801561110b576020820181803683370190505b509050600360fc1b8160008151811061112657611126611850565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061115557611155611850565b60200101906001600160f81b031916908160001a905350600061117984600261193f565b61118490600161195e565b90505b60018111156111fc576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106111b8576111b8611850565b1a60f81b8282815181106111ce576111ce611850565b60200101906001600160f81b031916908160001a90535060049490941c936111f581611976565b9050611187565b50831561124b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610ab2565b9392505050565b82805461125e90611815565b90600052602060002090601f01602090048101928261128057600085556112c6565b82601f1061129957805160ff19168380011785556112c6565b828001600101855582156112c6579182015b828111156112c65782518255916020019190600101906112ab565b506112d29291506112d6565b5090565b5b808211156112d257600081556001016112d7565b6000602082840312156112fd57600080fd5b81356001600160e01b03198116811461124b57600080fd5b60005b83811015611330578181015183820152602001611318565b83811115610c975750506000910152565b6020815260008251806020840152611360816040850160208701611315565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114610f4f57600080fd5b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156113c4576113c461138b565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156113f3576113f361138b565b604052919050565b600067ffffffffffffffff8311156114155761141561138b565b611428601f8401601f19166020016113ca565b905082815283838301111561143c57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261146457600080fd5b61124b838335602085016113fb565b6000806000806080858703121561148957600080fd5b61149285611374565b93506114a060208601611374565b925060408501359150606085013567ffffffffffffffff8111156114c357600080fd5b6114cf87828801611453565b91505092959194509250565b6000602082840312156114ed57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b602081016004831061151e5761151e6114f4565b91905290565b6000806040838503121561153757600080fd5b8235915061154760208401611374565b90509250929050565b60006020828403121561156257600080fd5b61124b82611374565b600082601f83011261157c57600080fd5b6115846113a1565b80606084018581111561159657600080fd5b845b818110156115b7576115a981611374565b845260209384019301611598565b509095945050505050565b600080600060e084860312156115d757600080fd5b833567ffffffffffffffff8111156115ee57600080fd5b8401601f810186136115ff57600080fd5b602061160f8783358385016113fb565b945086603f87011261162057600080fd5b6116286113a1565b915081608087018881111561163c57600080fd5b8288015b818110156116575780358552938301938301611640565b50819550611665898261156b565b9450505050509250925092565b602081016002831061151e5761151e6114f4565b600082601f83011261169757600080fd5b8135602067ffffffffffffffff8211156116b3576116b361138b565b8160051b6116c28282016113ca565b92835284810182019282810190878511156116dc57600080fd5b83870192505b848310156116fb578235825291830191908301906116e2565b979650505050505050565b600080600080600060a0868803121561171e57600080fd5b61172786611374565b945061173560208701611374565b9350604086013567ffffffffffffffff8082111561175257600080fd5b61175e89838a01611686565b9450606088013591508082111561177457600080fd5b61178089838a01611686565b9350608088013591508082111561179657600080fd5b506117a388828901611453565b9150509295509295909350565b600080600080600060a086880312156117c857600080fd5b6117d186611374565b94506117df60208701611374565b93506040860135925060608601359150608086013567ffffffffffffffff81111561180957600080fd5b6117a388828901611453565b600181811c9082168061182957607f821691505b6020821081141561184a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516118ec816017850160208801611315565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161191d816028840160208801611315565b01602801949350505050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561195957611959611929565b500290565b6000821982111561197157611971611929565b500190565b60008161198557611985611929565b50600019019056fe7613a25ecc738585a232ad50a301178f12b3ba8887d13e138b523c4269c47689a2646970667358221220cdc768b8097d59911042fe10f7c68660f584181bcecce5b055e2a8e20a5a4b2264736f6c63430008090033a26469706673582212206512a31bb540c2eb08d49f8a84cf8dd58c92f0703a0e23aca1ab46cd8a48bafc64736f6c63430008090033",
	"deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c806375b238fc116100ad578063b6c3ef2711610071578063b6c3ef2714610254578063ce791ce314610267578063d547741f1461027a578063ec5eb5da1461028d578063f8be73dd1461029657600080fd5b806375b238fc1461021457806376c71ca11461021d57806391d148541461022657806395f148f714610239578063a217fddf1461024c57600080fd5b806329575f6a116100f457806329575f6a146101a75780632e4db810146101d25780632f2ff15d146101db57806336568abe146101ee5780634070a0c91461020157600080fd5b806301ffc9a71461012657806303745a0e1461014e57806313877cea14610163578063248a9ca314610176575b600080fd5b610139610134366004610abe565b6102a9565b60405190151581526020015b60405180910390f35b61016161015c366004610b04565b6102e0565b005b610161610171366004610b1f565b61041c565b610199610184366004610b1f565b60009081526020819052604090206001015490565b604051908152602001610145565b6003546101ba906001600160a01b031681565b6040516001600160a01b039091168152602001610145565b61019960065481565b6101616101e9366004610b38565b610466565b6101616101fc366004610b38565b610490565b61016161020f366004610b1f565b61050f565b61019960015481565b61019960075481565b610139610234366004610b38565b610559565b6004546101ba906001600160a01b031681565b610199600081565b610161610262366004610b04565b610582565b6101ba610275366004610b7a565b6105e6565b610161610288366004610b38565b61078f565b61019960025481565b6005546101ba906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b14806102da57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6001546102ec816107b4565b6004546001600160a01b038381169116141561031b5760405163ba501c4d60e01b815260040160405180910390fd5b6040516301ffc9a760e01b81526392209dbf60e01b60048201526001600160a01b038316906301ffc9a79060240160206040518083038186803b15801561036157600080fd5b505afa158015610375573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103999190610c2f565b156103ff57600480546001600160a01b038481166001600160a01b03198316811790935560408051938452911660208301819052917fef71174d9cb18ecb75827201470103b3ca2e98bffc6a123c181a4294aacd665b91015b60405180910390a1505050565b604051631dc9bba760e31b815260040160405180910390fd5b5050565b600154610428816107b4565b600680549083905560408051848152602081018390527fa5bdea0442f92d4f8cfcb2ef097cbef895dee459e114d0a2d1dfc94e7b9637ce91016103f2565b600082815260208190526040902060010154610481816107b4565b61048b83836107c1565b505050565b6001600160a01b03811633146105055760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6104188282610845565b60015461051b816107b4565b600780549083905560408051848152602081018390527fde0f3e82f0d197e64e2b50a8428517693190e0c2b6beaa3511c60e0ff031dda391016103f2565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60015461058e816107b4565b600380546001600160a01b038481166001600160a01b03198316811790935560408051938452911660208301819052917f4bf62747831e52566c95db9dc765944d67440aa79e4be5784042e4bff7e955f691016103f2565b60006002546105f4816107b4565b600060405161060290610ab1565b604051809103906000f08015801561061e573d6000803e3d6000fd5b5060048054604051631b2ce7f360e11b81526001600160a01b03918216928101929092529192508291821690633659cfe690602401600060405180830381600087803b15801561066d57600080fd5b505af1158015610681573d6000803e3d6000fd5b505060408051606080820183526005546001600160a01b0390811683526003548116602080850191909152338486015284519283018552600754835282018b9052600654828501529251630eb65d8f60e21b8152919450925090851690633ad9763c906106f6908b9085908790600401610cad565b600060405180830381600087803b15801561071057600080fd5b505af1158015610724573d6000803e3d6000fd5b50505050876040516107369190610d25565b604080519182900382206006548352602083018a9052916001600160a01b038616917f37cd716b957e7c7bcfb2f5ae26d6d900abef16103b3d6e068c3d9b73c5c277ae910160405180910390a350909695505050505050565b6000828152602081905260409020600101546107aa816107b4565b61048b8383610845565b6107be81336108aa565b50565b6107cb8282610559565b610418576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556108013390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61084f8282610559565b15610418576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6108b48282610559565b610418576108cc816001600160a01b0316601461090e565b6108d783602061090e565b6040516020016108e8929190610d41565b60408051601f198184030181529082905262461bcd60e51b82526104fc91600401610db6565b6060600061091d836002610ddf565b610928906002610dfe565b67ffffffffffffffff81111561094057610940610b64565b6040519080825280601f01601f19166020018201604052801561096a576020820181803683370190505b509050600360fc1b8160008151811061098557610985610e16565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106109b4576109b4610e16565b60200101906001600160f81b031916908160001a90535060006109d8846002610ddf565b6109e3906001610dfe565b90505b6001811115610a5b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610a1757610a17610e16565b1a60f81b828281518110610a2d57610a2d610e16565b60200101906001600160f81b031916908160001a90535060049490941c93610a5481610e2c565b90506109e6565b508315610aaa5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104fc565b9392505050565b611ae380610e4483390190565b600060208284031215610ad057600080fd5b81356001600160e01b031981168114610aaa57600080fd5b80356001600160a01b0381168114610aff57600080fd5b919050565b600060208284031215610b1657600080fd5b610aaa82610ae8565b600060208284031215610b3157600080fd5b5035919050565b60008060408385031215610b4b57600080fd5b82359150610b5b60208401610ae8565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215610b8d57600080fd5b823567ffffffffffffffff80821115610ba557600080fd5b818501915085601f830112610bb957600080fd5b813581811115610bcb57610bcb610b64565b604051601f8201601f19908116603f01168101908382118183101715610bf357610bf3610b64565b81604052828152886020848701011115610c0c57600080fd5b826020860160208301376000602093820184015298969091013596505050505050565b600060208284031215610c4157600080fd5b81518015158114610aaa57600080fd5b60005b83811015610c6c578181015183820152602001610c54565b83811115610c7b576000848401525b50505050565b60008151808452610c99816020860160208601610c51565b601f01601f19169290920160200192915050565b60e081526000610cc060e0830186610c81565b905060208083018560005b6003811015610ce857815183529183019190830190600101610ccb565b505050608083018460005b6003811015610d195781516001600160a01b031683529183019190830190600101610cf3565b50505050949350505050565b60008251610d37818460208701610c51565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610d79816017850160208801610c51565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610daa816028840160208801610c51565b01602801949350505050565b602081526000610aaa6020830184610c81565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610df957610df9610dc9565b500290565b60008219821115610e1157610e11610dc9565b500190565b634e487b7160e01b600052603260045260246000fd5b600081610e3b57610e3b610dc9565b50600019019056fe608060405234801561001057600080fd5b5061003b7f7613a25ecc738585a232ad50a301178f12b3ba8887d13e138b523c4269c4768933610040565b6100f0565b61004a828261004e565b5050565b600082815260fb602090815260408083206001600160a01b038516845290915290205460ff1661004a57600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff191660011790556100ac3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6119e380620001006000396000f3fe6080604052600436106102975760003560e01c8063707109b41161015a578063a2fb1175116100c1578063ccbb62991161007a578063ccbb6299146107ff578063d182cf4d14610816578063d547741f1461082c578063f23a6e611461084c578063f621cc4814610878578063f8be73dd146109415761029e565b8063a2fb117514610731578063a870a5b214610751578063b0fe641414610768578063bc197c811461077f578063c6c9bd47146107ab578063caff99ce146107cb5761029e565b806395d89b411161011357806395d89b41146106ac57806395f148f7146106c15780639711d7e5146106e257806398eee484146106f95780639b7d707d14610710578063a217fddf146103dd5761029e565b8063707109b4146105f357806373ee45081461061557806375b238fc1461062b57806376c71ca11461065f57806377a714ae1461067657806391d148541461068c5761029e565b806332c60eef116101fe5780634460bdd6116101b75780634460bdd61461052d5780635813fd3d1461054f5780636588103b146105665780636817c76c1461059f5780636c0360eb146105b65780636fac889b146105cb5761029e565b806332c60eef1461048857806336568abe1461049f5780633659cfe6146104bf5780633ad9763c146104df5780633d779f32146104ff5780634264f40d146105165761029e565b80631649c6ce116102505780631649c6ce146103c65780631ae13c23146103dd578063248a9ca3146103f2578063295a5212146104225780632e4db8101461044f5780632f2ff15d146104665761029e565b806301ffc9a7146102d957806306fdde031461030e5780630c26abc31461033057806312f097461461035557806313ad88ca1461036c578063150b7a02146103825761029e565b3661029e57005b61013b546001600160a01b0316806102b557600080fd5b3660008037600080366000845af43d6000803e8080156102d4573d6000f35b3d6000fd5b3480156102e557600080fd5b506102f96102f43660046112eb565b610962565b60405190151581526020015b60405180910390f35b34801561031a57600080fd5b5061032361098d565b6040516103059190611341565b34801561033c57600080fd5b5061034761013a5481565b604051908152602001610305565b34801561036157600080fd5b506103476101385481565b34801561037857600080fd5b5061034761271081565b34801561038e57600080fd5b506103ad61039d366004611473565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610305565b3480156103d257600080fd5b5061034761012d5481565b3480156103e957600080fd5b50610347600081565b3480156103fe57600080fd5b5061034761040d3660046114db565b600090815260fb602052604090206001015490565b34801561042e57600080fd5b506101435461044290610100900460ff1681565b604051610305919061150a565b34801561045b57600080fd5b506103476101305481565b34801561047257600080fd5b50610486610481366004611524565b610a1c565b005b34801561049457600080fd5b506103476101335481565b3480156104ab57600080fd5b506104866104ba366004611524565b610a46565b3480156104cb57600080fd5b506104866104da366004611550565b610ac9565b3480156104eb57600080fd5b506104866104fa3660046115c2565b610b1a565b34801561050b57600080fd5b5061034761013f5481565b34801561052257600080fd5b506103476101395481565b34801561053957600080fd5b5061034760008051602061198e83398151915281565b34801561055b57600080fd5b506103476101325481565b34801561057257600080fd5b5061013d54610587906001600160a01b031681565b6040516001600160a01b039091168152602001610305565b3480156105ab57600080fd5b506103476101315481565b3480156105c257600080fd5b50610323610c9d565b3480156105d757600080fd5b50610143546105e69060ff1681565b6040516103059190611672565b3480156105ff57600080fd5b5061013e546102f990600160a01b900460ff1681565b34801561062157600080fd5b5061034761048381565b34801561063757600080fd5b506103477fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b34801561066b57600080fd5b5061034761012e5481565b34801561068257600080fd5b506103476102d181565b34801561069857600080fd5b506102f96106a7366004611524565b610cab565b3480156106b857600080fd5b50610323610cd6565b3480156106cd57600080fd5b5061013b54610587906001600160a01b031681565b3480156106ee57600080fd5b506103476101365481565b34801561070557600080fd5b506103476101375481565b34801561071c57600080fd5b5061013e54610587906001600160a01b031681565b34801561073d57600080fd5b5061058761074c3660046114db565b610ce4565b34801561075d57600080fd5b506103476101355481565b34801561077457600080fd5b506103476101345481565b34801561078b57600080fd5b506103ad61079a366004611706565b63bc197c8160e01b95945050505050565b3480156107b757600080fd5b506103476107c63660046114db565b610d0f565b3480156107d757600080fd5b506103477fe926d122b799dcbe5c2eccdf60ae0aefbb1a4bc75a7848bb07befecf8c775f5c81565b34801561080b57600080fd5b5061034761012f5481565b34801561082257600080fd5b5061034761271181565b34801561083857600080fd5b50610486610847366004611524565b610d31565b34801561085857600080fd5b506103ad6108673660046117b0565b63f23a6e6160e01b95945050505050565b34801561088457600080fd5b506108f3610893366004611550565b610145602052600090815260409020600281015460038201546004830154600584015460068501546007860154600890960154949593949293919290919063ffffffff81169060ff64010000000082048116916501000000000090041689565b60408051998a5260208a0198909852968801959095526060870193909352608086019190915260a085015263ffffffff1660c0840152151560e0830152151561010082015261012001610305565b34801561094d57600080fd5b5061013c54610587906001600160a01b031681565b60006001600160e01b031982166392209dbf60e01b1480610987575061098782610d56565b92915050565b610140805461099b90611815565b80601f01602080910402602001604051908101604052809291908181526020018280546109c790611815565b8015610a145780601f106109e957610100808354040283529160200191610a14565b820191906000526020600020905b8154815290600101906020018083116109f757829003601f168201915b505050505081565b600082815260fb6020526040902060010154610a3781610d7b565b610a418383610d88565b505050565b6001600160a01b0381163314610abb5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610ac58282610e0e565b5050565b60008051602061198e833981519152610ae181610d7b565b61013b546001600160a01b0383811691161415610b115760405163ba501c4d60e01b815260040160405180910390fd5b610ac582610e75565b6000610b266001610ec7565b90508015610b3e576000805461ff0019166101001790555b60008051602061198e833981519152610b5681610d7b565b610b5e610f54565b610b66610f54565b610b6e610f54565b8451610b8290610140906020880190611252565b50825161013c80546001600160a01b0319166001600160a01b03909216919091179055835161012e55602084015161012f556040840151610130554261012d55610be260008051602061198e8339815191528460015b6020020151610fc1565b610c0e7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775846002610bd8565b610c2660008051602061198e83398151915280610fcb565b610c507fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177580610fcb565b508015610c97576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b610142805461099b90611815565b600091825260fb602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610141805461099b90611815565b6101468181548110610cf557600080fd5b6000918252602090912001546001600160a01b0316905081565b6101478181548110610d2057600080fd5b600091825260209091200154905081565b600082815260fb6020526040902060010154610d4c81610d7b565b610a418383610e0e565b60006001600160e01b03198216637965db0b60e01b1480610987575061098782611016565b610d85813361104b565b50565b610d928282610cab565b610ac557600082815260fb602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610dca3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610e188282610cab565b15610ac557600082815260fb602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61013b80546001600160a01b038381166001600160a01b03198316811790935560405191169182917fd2d601ff50517068c7174bc2a7e6e8ea802702e59da429ebb0d6b381b2785c5d90600090a35050565b60008054610100900460ff1615610f0e578160ff166001148015610eea5750303b155b610f065760405162461bcd60e51b8152600401610ab290611866565b506000919050565b60005460ff808416911610610f355760405162461bcd60e51b8152600401610ab290611866565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16610fbf5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610ab2565b565b610ac58282610d88565b600082815260fb6020526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b60006001600160e01b03198216630271189760e51b148061098757506301ffc9a760e01b6001600160e01b0319831614610987565b6110558282610cab565b610ac55761106d816001600160a01b031660146110af565b6110788360206110af565b6040516020016110899291906118b4565b60408051601f198184030181529082905262461bcd60e51b8252610ab291600401611341565b606060006110be83600261193f565b6110c990600261195e565b67ffffffffffffffff8111156110e1576110e161138b565b6040519080825280601f01601f19166020018201604052801561110b576020820181803683370190505b509050600360fc1b8160008151811061112657611126611850565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061115557611155611850565b60200101906001600160f81b031916908160001a905350600061117984600261193f565b61118490600161195e565b90505b60018111156111fc576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106111b8576111b8611850565b1a60f81b8282815181106111ce576111ce611850565b60200101906001600160f81b031916908160001a90535060049490941c936111f581611976565b9050611187565b50831561124b5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610ab2565b9392505050565b82805461125e90611815565b90600052602060002090601f01602090048101928261128057600085556112c6565b82601f1061129957805160ff19168380011785556112c6565b828001600101855582156112c6579182015b828111156112c65782518255916020019190600101906112ab565b506112d29291506112d6565b5090565b5b808211156112d257600081556001016112d7565b6000602082840312156112fd57600080fd5b81356001600160e01b03198116811461124b57600080fd5b60005b83811015611330578181015183820152602001611318565b83811115610c975750506000910152565b6020815260008251806020840152611360816040850160208701611315565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114610f4f57600080fd5b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156113c4576113c461138b565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156113f3576113f361138b565b604052919050565b600067ffffffffffffffff8311156114155761141561138b565b611428601f8401601f19166020016113ca565b905082815283838301111561143c57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261146457600080fd5b61124b838335602085016113fb565b6000806000806080858703121561148957600080fd5b61149285611374565b93506114a060208601611374565b925060408501359150606085013567ffffffffffffffff8111156114c357600080fd5b6114cf87828801611453565b91505092959194509250565b6000602082840312156114ed57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b602081016004831061151e5761151e6114f4565b91905290565b6000806040838503121561153757600080fd5b8235915061154760208401611374565b90509250929050565b60006020828403121561156257600080fd5b61124b82611374565b600082601f83011261157c57600080fd5b6115846113a1565b80606084018581111561159657600080fd5b845b818110156115b7576115a981611374565b845260209384019301611598565b509095945050505050565b600080600060e084860312156115d757600080fd5b833567ffffffffffffffff8111156115ee57600080fd5b8401601f810186136115ff57600080fd5b602061160f8783358385016113fb565b945086603f87011261162057600080fd5b6116286113a1565b915081608087018881111561163c57600080fd5b8288015b818110156116575780358552938301938301611640565b50819550611665898261156b565b9450505050509250925092565b602081016002831061151e5761151e6114f4565b600082601f83011261169757600080fd5b8135602067ffffffffffffffff8211156116b3576116b361138b565b8160051b6116c28282016113ca565b92835284810182019282810190878511156116dc57600080fd5b83870192505b848310156116fb578235825291830191908301906116e2565b979650505050505050565b600080600080600060a0868803121561171e57600080fd5b61172786611374565b945061173560208701611374565b9350604086013567ffffffffffffffff8082111561175257600080fd5b61175e89838a01611686565b9450606088013591508082111561177457600080fd5b61178089838a01611686565b9350608088013591508082111561179657600080fd5b506117a388828901611453565b9150509295509295909350565b600080600080600060a086880312156117c857600080fd5b6117d186611374565b94506117df60208701611374565b93506040860135925060608601359150608086013567ffffffffffffffff81111561180957600080fd5b6117a388828901611453565b600181811c9082168061182957607f821691505b6020821081141561184a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516118ec816017850160208801611315565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161191d816028840160208801611315565b01602801949350505050565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561195957611959611929565b500290565b6000821982111561197157611971611929565b500190565b60008161198557611985611929565b50600019019056fe7613a25ecc738585a232ad50a301178f12b3ba8887d13e138b523c4269c47689a2646970667358221220cdc768b8097d59911042fe10f7c68660f584181bcecce5b055e2a8e20a5a4b2264736f6c63430008090033a26469706673582212206512a31bb540c2eb08d49f8a84cf8dd58c92f0703a0e23aca1ab46cd8a48bafc64736f6c63430008090033",
	"linkReferences": {},
	"deployedLinkReferences": {},
	"devdoc": {
	  "kind": "dev",
	  "methods": {
		"getRoleAdmin(bytes32)": {
		  "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
		},
		"grantRole(bytes32,address)": {
		  "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
		},
		"hasRole(bytes32,address)": {
		  "details": "Returns `true` if `account` has been granted `role`."
		},
		"renounceRole(bytes32,address)": {
		  "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
		},
		"revokeRole(bytes32,address)": {
		  "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
		},
		"supportsInterface(bytes4)": {
		  "details": "See {IERC165-supportsInterface}."
		}
	  },
	  "version": 1
	},
	"evm": {
	  "bytecode": {
		"functionDebugData": {
		  "@_13894": {
			"entryPoint": null,
			"id": 13894,
			"parameterSlots": 5,
			"returnSlots": 0
		  },
		  "@_grantRole_4490": {
			"entryPoint": 384,
			"id": 4490,
			"parameterSlots": 2,
			"returnSlots": 0
		  },
		  "@_msgSender_7330": {
			"entryPoint": null,
			"id": 7330,
			"parameterSlots": 0,
			"returnSlots": 1
		  },
		  "@_setRoleAdmin_4458": {
			"entryPoint": 309,
			"id": 4458,
			"parameterSlots": 2,
			"returnSlots": 0
		  },
		  "@_setupRole_4430": {
			"entryPoint": 293,
			"id": 4430,
			"parameterSlots": 2,
			"returnSlots": 0
		  },
		  "@getRoleAdmin_4353": {
			"entryPoint": null,
			"id": 4353,
			"parameterSlots": 1,
			"returnSlots": 1
		  },
		  "@hasRole_4282": {
			"entryPoint": null,
			"id": 4282,
			"parameterSlots": 2,
			"returnSlots": 1
		  },
		  "abi_decode_address_fromMemory": {
			"entryPoint": 544,
			"id": null,
			"parameterSlots": 1,
			"returnSlots": 1
		  },
		  "abi_decode_tuple_t_addresst_addresst_addresst_uint256t_uint256_fromMemory": {
			"entryPoint": 573,
			"id": null,
			"parameterSlots": 2,
			"returnSlots": 5
		  }
		},
		"generatedSources": [
		  {
			"ast": {
			  "nodeType": "YulBlock",
			  "src": "0:700:79",
			  "statements": [
				{
				  "nodeType": "YulBlock",
				  "src": "6:3:79",
				  "statements": []
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "74:117:79",
					"statements": [
					  {
						"nodeType": "YulAssignment",
						"src": "84:22:79",
						"value": {
						  "arguments": [
							{
							  "name": "offset",
							  "nodeType": "YulIdentifier",
							  "src": "99:6:79"
							}
						  ],
						  "functionName": {
							"name": "mload",
							"nodeType": "YulIdentifier",
							"src": "93:5:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "93:13:79"
						},
						"variableNames": [
						  {
							"name": "value",
							"nodeType": "YulIdentifier",
							"src": "84:5:79"
						  }
						]
					  },
					  {
						"body": {
						  "nodeType": "YulBlock",
						  "src": "169:16:79",
						  "statements": [
							{
							  "expression": {
								"arguments": [
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "178:1:79",
									"type": "",
									"value": "0"
								  },
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "181:1:79",
									"type": "",
									"value": "0"
								  }
								],
								"functionName": {
								  "name": "revert",
								  "nodeType": "YulIdentifier",
								  "src": "171:6:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "171:12:79"
							  },
							  "nodeType": "YulExpressionStatement",
							  "src": "171:12:79"
							}
						  ]
						},
						"condition": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "value",
								  "nodeType": "YulIdentifier",
								  "src": "128:5:79"
								},
								{
								  "arguments": [
									{
									  "name": "value",
									  "nodeType": "YulIdentifier",
									  "src": "139:5:79"
									},
									{
									  "arguments": [
										{
										  "arguments": [
											{
											  "kind": "number",
											  "nodeType": "YulLiteral",
											  "src": "154:3:79",
											  "type": "",
											  "value": "160"
											},
											{
											  "kind": "number",
											  "nodeType": "YulLiteral",
											  "src": "159:1:79",
											  "type": "",
											  "value": "1"
											}
										  ],
										  "functionName": {
											"name": "shl",
											"nodeType": "YulIdentifier",
											"src": "150:3:79"
										  },
										  "nodeType": "YulFunctionCall",
										  "src": "150:11:79"
										},
										{
										  "kind": "number",
										  "nodeType": "YulLiteral",
										  "src": "163:1:79",
										  "type": "",
										  "value": "1"
										}
									  ],
									  "functionName": {
										"name": "sub",
										"nodeType": "YulIdentifier",
										"src": "146:3:79"
									  },
									  "nodeType": "YulFunctionCall",
									  "src": "146:19:79"
									}
								  ],
								  "functionName": {
									"name": "and",
									"nodeType": "YulIdentifier",
									"src": "135:3:79"
								  },
								  "nodeType": "YulFunctionCall",
								  "src": "135:31:79"
								}
							  ],
							  "functionName": {
								"name": "eq",
								"nodeType": "YulIdentifier",
								"src": "125:2:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "125:42:79"
							}
						  ],
						  "functionName": {
							"name": "iszero",
							"nodeType": "YulIdentifier",
							"src": "118:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "118:50:79"
						},
						"nodeType": "YulIf",
						"src": "115:70:79"
					  }
					]
				  },
				  "name": "abi_decode_address_fromMemory",
				  "nodeType": "YulFunctionDefinition",
				  "parameters": [
					{
					  "name": "offset",
					  "nodeType": "YulTypedName",
					  "src": "53:6:79",
					  "type": ""
					}
				  ],
				  "returnVariables": [
					{
					  "name": "value",
					  "nodeType": "YulTypedName",
					  "src": "64:5:79",
					  "type": ""
					}
				  ],
				  "src": "14:177:79"
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "345:353:79",
					"statements": [
					  {
						"body": {
						  "nodeType": "YulBlock",
						  "src": "392:16:79",
						  "statements": [
							{
							  "expression": {
								"arguments": [
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "401:1:79",
									"type": "",
									"value": "0"
								  },
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "404:1:79",
									"type": "",
									"value": "0"
								  }
								],
								"functionName": {
								  "name": "revert",
								  "nodeType": "YulIdentifier",
								  "src": "394:6:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "394:12:79"
							  },
							  "nodeType": "YulExpressionStatement",
							  "src": "394:12:79"
							}
						  ]
						},
						"condition": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "dataEnd",
								  "nodeType": "YulIdentifier",
								  "src": "366:7:79"
								},
								{
								  "name": "headStart",
								  "nodeType": "YulIdentifier",
								  "src": "375:9:79"
								}
							  ],
							  "functionName": {
								"name": "sub",
								"nodeType": "YulIdentifier",
								"src": "362:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "362:23:79"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "387:3:79",
							  "type": "",
							  "value": "160"
							}
						  ],
						  "functionName": {
							"name": "slt",
							"nodeType": "YulIdentifier",
							"src": "358:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "358:33:79"
						},
						"nodeType": "YulIf",
						"src": "355:53:79"
					  },
					  {
						"nodeType": "YulAssignment",
						"src": "417:50:79",
						"value": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "457:9:79"
							}
						  ],
						  "functionName": {
							"name": "abi_decode_address_fromMemory",
							"nodeType": "YulIdentifier",
							"src": "427:29:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "427:40:79"
						},
						"variableNames": [
						  {
							"name": "value0",
							"nodeType": "YulIdentifier",
							"src": "417:6:79"
						  }
						]
					  },
					  {
						"nodeType": "YulAssignment",
						"src": "476:59:79",
						"value": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "headStart",
								  "nodeType": "YulIdentifier",
								  "src": "520:9:79"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "531:2:79",
								  "type": "",
								  "value": "32"
								}
							  ],
							  "functionName": {
								"name": "add",
								"nodeType": "YulIdentifier",
								"src": "516:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "516:18:79"
							}
						  ],
						  "functionName": {
							"name": "abi_decode_address_fromMemory",
							"nodeType": "YulIdentifier",
							"src": "486:29:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "486:49:79"
						},
						"variableNames": [
						  {
							"name": "value1",
							"nodeType": "YulIdentifier",
							"src": "476:6:79"
						  }
						]
					  },
					  {
						"nodeType": "YulAssignment",
						"src": "544:59:79",
						"value": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "headStart",
								  "nodeType": "YulIdentifier",
								  "src": "588:9:79"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "599:2:79",
								  "type": "",
								  "value": "64"
								}
							  ],
							  "functionName": {
								"name": "add",
								"nodeType": "YulIdentifier",
								"src": "584:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "584:18:79"
							}
						  ],
						  "functionName": {
							"name": "abi_decode_address_fromMemory",
							"nodeType": "YulIdentifier",
							"src": "554:29:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "554:49:79"
						},
						"variableNames": [
						  {
							"name": "value2",
							"nodeType": "YulIdentifier",
							"src": "544:6:79"
						  }
						]
					  },
					  {
						"nodeType": "YulAssignment",
						"src": "612:35:79",
						"value": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "headStart",
								  "nodeType": "YulIdentifier",
								  "src": "632:9:79"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "643:2:79",
								  "type": "",
								  "value": "96"
								}
							  ],
							  "functionName": {
								"name": "add",
								"nodeType": "YulIdentifier",
								"src": "628:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "628:18:79"
							}
						  ],
						  "functionName": {
							"name": "mload",
							"nodeType": "YulIdentifier",
							"src": "622:5:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "622:25:79"
						},
						"variableNames": [
						  {
							"name": "value3",
							"nodeType": "YulIdentifier",
							"src": "612:6:79"
						  }
						]
					  },
					  {
						"nodeType": "YulAssignment",
						"src": "656:36:79",
						"value": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "headStart",
								  "nodeType": "YulIdentifier",
								  "src": "676:9:79"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "687:3:79",
								  "type": "",
								  "value": "128"
								}
							  ],
							  "functionName": {
								"name": "add",
								"nodeType": "YulIdentifier",
								"src": "672:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "672:19:79"
							}
						  ],
						  "functionName": {
							"name": "mload",
							"nodeType": "YulIdentifier",
							"src": "666:5:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "666:26:79"
						},
						"variableNames": [
						  {
							"name": "value4",
							"nodeType": "YulIdentifier",
							"src": "656:6:79"
						  }
						]
					  }
					]
				  },
				  "name": "abi_decode_tuple_t_addresst_addresst_addresst_uint256t_uint256_fromMemory",
				  "nodeType": "YulFunctionDefinition",
				  "parameters": [
					{
					  "name": "headStart",
					  "nodeType": "YulTypedName",
					  "src": "279:9:79",
					  "type": ""
					},
					{
					  "name": "dataEnd",
					  "nodeType": "YulTypedName",
					  "src": "290:7:79",
					  "type": ""
					}
				  ],
				  "returnVariables": [
					{
					  "name": "value0",
					  "nodeType": "YulTypedName",
					  "src": "302:6:79",
					  "type": ""
					},
					{
					  "name": "value1",
					  "nodeType": "YulTypedName",
					  "src": "310:6:79",
					  "type": ""
					},
					{
					  "name": "value2",
					  "nodeType": "YulTypedName",
					  "src": "318:6:79",
					  "type": ""
					},
					{
					  "name": "value3",
					  "nodeType": "YulTypedName",
					  "src": "326:6:79",
					  "type": ""
					},
					{
					  "name": "value4",
					  "nodeType": "YulTypedName",
					  "src": "334:6:79",
					  "type": ""
					}
				  ],
				  "src": "196:502:79"
				}
			  ]
			},
			"contents": "{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_addresst_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := abi_decode_address_fromMemory(add(headStart, 32))\n        value2 := abi_decode_address_fromMemory(add(headStart, 64))\n        value3 := mload(add(headStart, 96))\n        value4 := mload(add(headStart, 128))\n    }\n}",
			"id": 79,
			"language": "Yul",
			"name": "#utility.yul"
		  }
		],
		"linkReferences": {},
		"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 PUSH1 0x1 SSTORE PUSH32 0x9F44B334A89ED2764AB332A7FAA64BEC31E526154EB4D5A7659C666048FD4914 PUSH1 0x2 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2C06 CODESIZE SUB DUP1 PUSH3 0x2C06 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x7C SWAP2 PUSH3 0x23D JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0x3 DUP1 SLOAD SWAP3 DUP7 AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x1 SLOAD PUSH3 0xC2 SWAP1 PUSH3 0xBC CALLER SWAP1 JUMP JUMPDEST PUSH3 0x125 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH3 0xD1 SWAP1 CALLER PUSH3 0x125 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH3 0xE0 SWAP1 DUP1 PUSH3 0x135 JUMP JUMPDEST PUSH3 0xF6 PUSH1 0x2 SLOAD PUSH1 0x1 SLOAD PUSH3 0x135 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 SWAP1 SWAP7 AND SWAP6 SWAP1 SWAP6 OR SWAP1 SWAP5 SSTORE PUSH1 0x6 SSTORE POP POP PUSH1 0x7 SSTORE PUSH3 0x29A JUMP JUMPDEST PUSH3 0x131 DUP3 DUP3 PUSH3 0x180 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD SWAP1 DUP5 SWAP1 SSTORE SWAP1 MLOAD SWAP1 SWAP2 DUP4 SWAP2 DUP4 SWAP2 DUP7 SWAP2 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF SWAP2 SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH3 0x131 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH3 0x1DC CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x238 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH3 0x256 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x261 DUP7 PUSH3 0x220 JUMP JUMPDEST SWAP5 POP PUSH3 0x271 PUSH1 0x20 DUP8 ADD PUSH3 0x220 JUMP JUMPDEST SWAP4 POP PUSH3 0x281 PUSH1 0x40 DUP8 ADD PUSH3 0x220 JUMP JUMPDEST PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x80 SWAP1 SWAP8 ADD MLOAD SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x295C DUP1 PUSH3 0x2AA PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x121 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x75B238FC GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xB6C3EF27 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xB6C3EF27 EQ PUSH2 0x254 JUMPI DUP1 PUSH4 0xCE791CE3 EQ PUSH2 0x267 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x27A JUMPI DUP1 PUSH4 0xEC5EB5DA EQ PUSH2 0x28D JUMPI DUP1 PUSH4 0xF8BE73DD EQ PUSH2 0x296 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x75B238FC EQ PUSH2 0x214 JUMPI DUP1 PUSH4 0x76C71CA1 EQ PUSH2 0x21D JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x226 JUMPI DUP1 PUSH4 0x95F148F7 EQ PUSH2 0x239 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x24C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x29575F6A GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x29575F6A EQ PUSH2 0x1A7 JUMPI DUP1 PUSH4 0x2E4DB810 EQ PUSH2 0x1D2 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x1EE JUMPI DUP1 PUSH4 0x4070A0C9 EQ PUSH2 0x201 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x3745A0E EQ PUSH2 0x14E JUMPI DUP1 PUSH4 0x13877CEA EQ PUSH2 0x163 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x176 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x139 PUSH2 0x134 CALLDATASIZE PUSH1 0x4 PUSH2 0xABE JUMP JUMPDEST PUSH2 0x2A9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x161 PUSH2 0x15C CALLDATASIZE PUSH1 0x4 PUSH2 0xB04 JUMP JUMPDEST PUSH2 0x2E0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x161 PUSH2 0x171 CALLDATASIZE PUSH1 0x4 PUSH2 0xB1F JUMP JUMPDEST PUSH2 0x41C JUMP JUMPDEST PUSH2 0x199 PUSH2 0x184 CALLDATASIZE PUSH1 0x4 PUSH2 0xB1F JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x145 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0x1BA SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x145 JUMP JUMPDEST PUSH2 0x199 PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x161 PUSH2 0x1E9 CALLDATASIZE PUSH1 0x4 PUSH2 0xB38 JUMP JUMPDEST PUSH2 0x466 JUMP JUMPDEST PUSH2 0x161 PUSH2 0x1FC CALLDATASIZE PUSH1 0x4 PUSH2 0xB38 JUMP JUMPDEST PUSH2 0x490 JUMP JUMPDEST PUSH2 0x161 PUSH2 0x20F CALLDATASIZE PUSH1 0x4 PUSH2 0xB1F JUMP JUMPDEST PUSH2 0x50F JUMP JUMPDEST PUSH2 0x199 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x199 PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x139 PUSH2 0x234 CALLDATASIZE PUSH1 0x4 PUSH2 0xB38 JUMP JUMPDEST PUSH2 0x559 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x1BA SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x199 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x161 PUSH2 0x262 CALLDATASIZE PUSH1 0x4 PUSH2 0xB04 JUMP JUMPDEST PUSH2 0x582 JUMP JUMPDEST PUSH2 0x1BA PUSH2 0x275 CALLDATASIZE PUSH1 0x4 PUSH2 0xB7A JUMP JUMPDEST PUSH2 0x5E6 JUMP JUMPDEST PUSH2 0x161 PUSH2 0x288 CALLDATASIZE PUSH1 0x4 PUSH2 0xB38 JUMP JUMPDEST PUSH2 0x78F JUMP JUMPDEST PUSH2 0x199 PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x1BA SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x2DA JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x2EC DUP2 PUSH2 0x7B4 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x31B JUMPI PUSH1 0x40 MLOAD PUSH4 0xBA501C4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH4 0x92209DBF PUSH1 0xE0 SHL PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x1FFC9A7 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x361 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x375 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x399 SWAP2 SWAP1 PUSH2 0xC2F JUMP JUMPDEST ISZERO PUSH2 0x3FF JUMPI PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE SWAP2 AND PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE SWAP2 PUSH32 0xEF71174D9CB18ECB75827201470103B3CA2E98BFFC6A123C181A4294AACD665B SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1DC9BBA7 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x428 DUP2 PUSH2 0x7B4 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD SWAP1 DUP4 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0xA5BDEA0442F92D4F8CFCB2EF097CBEF895DEE459E114D0A2D1DFC94E7B9637CE SWAP2 ADD PUSH2 0x3F2 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x481 DUP2 PUSH2 0x7B4 JUMP JUMPDEST PUSH2 0x48B DUP4 DUP4 PUSH2 0x7C1 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x505 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x418 DUP3 DUP3 PUSH2 0x845 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x51B DUP2 PUSH2 0x7B4 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD SWAP1 DUP4 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0xDE0F3E82F0D197E64E2B50A8428517693190E0C2B6BEAA3511C60E0FF031DDA3 SWAP2 ADD PUSH2 0x3F2 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x58E DUP2 PUSH2 0x7B4 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE SWAP2 AND PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE SWAP2 PUSH32 0x4BF62747831E52566C95DB9DC765944D67440AA79E4BE5784042E4BFF7E955F6 SWAP2 ADD PUSH2 0x3F2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD PUSH2 0x5F4 DUP2 PUSH2 0x7B4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH2 0x602 SWAP1 PUSH2 0xAB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x61E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x1B2CE7F3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP DUP3 SWAP2 DUP3 AND SWAP1 PUSH4 0x3659CFE6 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x66D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x681 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x3 SLOAD DUP2 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE CALLER DUP5 DUP7 ADD MSTORE DUP5 MLOAD SWAP3 DUP4 ADD DUP6 MSTORE PUSH1 0x7 SLOAD DUP4 MSTORE DUP3 ADD DUP12 SWAP1 MSTORE PUSH1 0x6 SLOAD DUP3 DUP6 ADD MSTORE SWAP3 MLOAD PUSH4 0xEB65D8F PUSH1 0xE2 SHL DUP2 MSTORE SWAP2 SWAP5 POP SWAP3 POP SWAP1 DUP6 AND SWAP1 PUSH4 0x3AD9763C SWAP1 PUSH2 0x6F6 SWAP1 DUP12 SWAP1 DUP6 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0xCAD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x710 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x724 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP8 PUSH1 0x40 MLOAD PUSH2 0x736 SWAP2 SWAP1 PUSH2 0xD25 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB DUP3 KECCAK256 PUSH1 0x6 SLOAD DUP4 MSTORE PUSH1 0x20 DUP4 ADD DUP11 SWAP1 MSTORE SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH32 0x37CD716B957E7C7BCFB2F5AE26D6D900ABEF16103B3D6E068C3D9B73C5C277AE SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x7AA DUP2 PUSH2 0x7B4 JUMP JUMPDEST PUSH2 0x48B DUP4 DUP4 PUSH2 0x845 JUMP JUMPDEST PUSH2 0x7BE DUP2 CALLER PUSH2 0x8AA JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x7CB DUP3 DUP3 PUSH2 0x559 JUMP JUMPDEST PUSH2 0x418 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x801 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x84F DUP3 DUP3 PUSH2 0x559 JUMP JUMPDEST ISZERO PUSH2 0x418 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x8B4 DUP3 DUP3 PUSH2 0x559 JUMP JUMPDEST PUSH2 0x418 JUMPI PUSH2 0x8CC DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x14 PUSH2 0x90E JUMP JUMPDEST PUSH2 0x8D7 DUP4 PUSH1 0x20 PUSH2 0x90E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8E8 SWAP3 SWAP2 SWAP1 PUSH2 0xD41 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x4FC SWAP2 PUSH1 0x4 ADD PUSH2 0xDB6 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x91D DUP4 PUSH1 0x2 PUSH2 0xDDF JUMP JUMPDEST PUSH2 0x928 SWAP1 PUSH1 0x2 PUSH2 0xDFE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x940 JUMPI PUSH2 0x940 PUSH2 0xB64 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x96A JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x985 JUMPI PUSH2 0x985 PUSH2 0xE16 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x9B4 JUMPI PUSH2 0x9B4 PUSH2 0xE16 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x9D8 DUP5 PUSH1 0x2 PUSH2 0xDDF JUMP JUMPDEST PUSH2 0x9E3 SWAP1 PUSH1 0x1 PUSH2 0xDFE JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xA5B JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0xA17 JUMPI PUSH2 0xA17 PUSH2 0xE16 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xA2D JUMPI PUSH2 0xA2D PUSH2 0xE16 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0xA54 DUP2 PUSH2 0xE2C JUMP JUMPDEST SWAP1 POP PUSH2 0x9E6 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0xAAA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4FC JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1AE3 DUP1 PUSH2 0xE44 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xAAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xAFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAAA DUP3 PUSH2 0xAE8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0xB5B PUSH1 0x20 DUP5 ADD PUSH2 0xAE8 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xBA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xBB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xBCB JUMPI PUSH2 0xBCB PUSH2 0xB64 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xBF3 JUMPI PUSH2 0xBF3 PUSH2 0xB64 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0xC0C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 SWAP4 DUP3 ADD DUP5 ADD MSTORE SWAP9 SWAP7 SWAP1 SWAP2 ADD CALLDATALOAD SWAP7 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xAAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xC6C JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC54 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xC7B JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xC99 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xC51 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xE0 DUP2 MSTORE PUSH1 0x0 PUSH2 0xCC0 PUSH1 0xE0 DUP4 ADD DUP7 PUSH2 0xC81 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP1 DUP4 ADD DUP6 PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xCE8 JUMPI DUP2 MLOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xCCB JUMP JUMPDEST POP POP POP PUSH1 0x80 DUP4 ADD DUP5 PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xD19 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xCF3 JUMP JUMPDEST POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xD37 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xC51 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0xD79 DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0xC51 JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0xDAA DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0xC51 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xAAA PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xC81 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xDF9 JUMPI PUSH2 0xDF9 PUSH2 0xDC9 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xE11 JUMPI PUSH2 0xE11 PUSH2 0xDC9 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xE3B JUMPI PUSH2 0xE3B PUSH2 0xDC9 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B PUSH32 0x7613A25ECC738585A232AD50A301178F12B3BA8887D13E138B523C4269C47689 CALLER PUSH2 0x40 JUMP JUMPDEST PUSH2 0xF0 JUMP JUMPDEST PUSH2 0x4A DUP3 DUP3 PUSH2 0x4E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x4A JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xAC CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x19E3 DUP1 PUSH3 0x100 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x297 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x707109B4 GT PUSH2 0x15A JUMPI DUP1 PUSH4 0xA2FB1175 GT PUSH2 0xC1 JUMPI DUP1 PUSH4 0xCCBB6299 GT PUSH2 0x7A JUMPI DUP1 PUSH4 0xCCBB6299 EQ PUSH2 0x7FF JUMPI DUP1 PUSH4 0xD182CF4D EQ PUSH2 0x816 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x82C JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x84C JUMPI DUP1 PUSH4 0xF621CC48 EQ PUSH2 0x878 JUMPI DUP1 PUSH4 0xF8BE73DD EQ PUSH2 0x941 JUMPI PUSH2 0x29E JUMP JUMPDEST DUP1 PUSH4 0xA2FB1175 EQ PUSH2 0x731 JUMPI DUP1 PUSH4 0xA870A5B2 EQ PUSH2 0x751 JUMPI DUP1 PUSH4 0xB0FE6414 EQ PUSH2 0x768 JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x77F JUMPI DUP1 PUSH4 0xC6C9BD47 EQ PUSH2 0x7AB JUMPI DUP1 PUSH4 0xCAFF99CE EQ PUSH2 0x7CB JUMPI PUSH2 0x29E JUMP JUMPDEST DUP1 PUSH4 0x95D89B41 GT PUSH2 0x113 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x6AC JUMPI DUP1 PUSH4 0x95F148F7 EQ PUSH2 0x6C1 JUMPI DUP1 PUSH4 0x9711D7E5 EQ PUSH2 0x6E2 JUMPI DUP1 PUSH4 0x98EEE484 EQ PUSH2 0x6F9 JUMPI DUP1 PUSH4 0x9B7D707D EQ PUSH2 0x710 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x3DD JUMPI PUSH2 0x29E JUMP JUMPDEST DUP1 PUSH4 0x707109B4 EQ PUSH2 0x5F3 JUMPI DUP1 PUSH4 0x73EE4508 EQ PUSH2 0x615 JUMPI DUP1 PUSH4 0x75B238FC EQ PUSH2 0x62B JUMPI DUP1 PUSH4 0x76C71CA1 EQ PUSH2 0x65F JUMPI DUP1 PUSH4 0x77A714AE EQ PUSH2 0x676 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x68C JUMPI PUSH2 0x29E JUMP JUMPDEST DUP1 PUSH4 0x32C60EEF GT PUSH2 0x1FE JUMPI DUP1 PUSH4 0x4460BDD6 GT PUSH2 0x1B7 JUMPI DUP1 PUSH4 0x4460BDD6 EQ PUSH2 0x52D JUMPI DUP1 PUSH4 0x5813FD3D EQ PUSH2 0x54F JUMPI DUP1 PUSH4 0x6588103B EQ PUSH2 0x566 JUMPI DUP1 PUSH4 0x6817C76C EQ PUSH2 0x59F JUMPI DUP1 PUSH4 0x6C0360EB EQ PUSH2 0x5B6 JUMPI DUP1 PUSH4 0x6FAC889B EQ PUSH2 0x5CB JUMPI PUSH2 0x29E JUMP JUMPDEST DUP1 PUSH4 0x32C60EEF EQ PUSH2 0x488 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x49F JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x4BF JUMPI DUP1 PUSH4 0x3AD9763C EQ PUSH2 0x4DF JUMPI DUP1 PUSH4 0x3D779F32 EQ PUSH2 0x4FF JUMPI DUP1 PUSH4 0x4264F40D EQ PUSH2 0x516 JUMPI PUSH2 0x29E JUMP JUMPDEST DUP1 PUSH4 0x1649C6CE GT PUSH2 0x250 JUMPI DUP1 PUSH4 0x1649C6CE EQ PUSH2 0x3C6 JUMPI DUP1 PUSH4 0x1AE13C23 EQ PUSH2 0x3DD JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x3F2 JUMPI DUP1 PUSH4 0x295A5212 EQ PUSH2 0x422 JUMPI DUP1 PUSH4 0x2E4DB810 EQ PUSH2 0x44F JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x466 JUMPI PUSH2 0x29E JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x2D9 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x30E JUMPI DUP1 PUSH4 0xC26ABC3 EQ PUSH2 0x330 JUMPI DUP1 PUSH4 0x12F09746 EQ PUSH2 0x355 JUMPI DUP1 PUSH4 0x13AD88CA EQ PUSH2 0x36C JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x382 JUMPI PUSH2 0x29E JUMP JUMPDEST CALLDATASIZE PUSH2 0x29E JUMPI STOP JUMPDEST PUSH2 0x13B SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x2B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 DUP1 ISZERO PUSH2 0x2D4 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F9 PUSH2 0x2F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x12EB JUMP JUMPDEST PUSH2 0x962 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x323 PUSH2 0x98D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x305 SWAP2 SWAP1 PUSH2 0x1341 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x33C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x13A SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x305 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x361 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x138 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x378 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x2710 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AD PUSH2 0x39D CALLDATASIZE PUSH1 0x4 PUSH2 0x1473 JUMP JUMPDEST PUSH4 0xA85BD01 PUSH1 0xE1 SHL SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x305 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x12D SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x40D CALLDATASIZE PUSH1 0x4 PUSH2 0x14DB JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x143 SLOAD PUSH2 0x442 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x305 SWAP2 SWAP1 PUSH2 0x150A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x130 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x472 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x486 PUSH2 0x481 CALLDATASIZE PUSH1 0x4 PUSH2 0x1524 JUMP JUMPDEST PUSH2 0xA1C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x494 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x133 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x486 PUSH2 0x4BA CALLDATASIZE PUSH1 0x4 PUSH2 0x1524 JUMP JUMPDEST PUSH2 0xA46 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x486 PUSH2 0x4DA CALLDATASIZE PUSH1 0x4 PUSH2 0x1550 JUMP JUMPDEST PUSH2 0xAC9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x486 PUSH2 0x4FA CALLDATASIZE PUSH1 0x4 PUSH2 0x15C2 JUMP JUMPDEST PUSH2 0xB1A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x13F SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x522 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x139 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x539 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x198E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x55B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x132 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x572 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13D SLOAD PUSH2 0x587 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x305 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x131 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x323 PUSH2 0xC9D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x143 SLOAD PUSH2 0x5E6 SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x305 SWAP2 SWAP1 PUSH2 0x1672 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13E SLOAD PUSH2 0x2F9 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x621 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x483 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x637 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x12E SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x682 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x2D1 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x698 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F9 PUSH2 0x6A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1524 JUMP JUMPDEST PUSH2 0xCAB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x323 PUSH2 0xCD6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13B SLOAD PUSH2 0x587 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x136 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x705 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x137 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x71C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13E SLOAD PUSH2 0x587 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x73D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x587 PUSH2 0x74C CALLDATASIZE PUSH1 0x4 PUSH2 0x14DB JUMP JUMPDEST PUSH2 0xCE4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x75D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x135 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x774 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x134 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x78B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AD PUSH2 0x79A CALLDATASIZE PUSH1 0x4 PUSH2 0x1706 JUMP JUMPDEST PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x7C6 CALLDATASIZE PUSH1 0x4 PUSH2 0x14DB JUMP JUMPDEST PUSH2 0xD0F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH32 0xE926D122B799DCBE5C2ECCDF60AE0AEFBB1A4BC75A7848BB07BEFECF8C775F5C DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x80B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x12F SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x822 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x2711 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x838 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x486 PUSH2 0x847 CALLDATASIZE PUSH1 0x4 PUSH2 0x1524 JUMP JUMPDEST PUSH2 0xD31 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x858 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AD PUSH2 0x867 CALLDATASIZE PUSH1 0x4 PUSH2 0x17B0 JUMP JUMPDEST PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x884 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8F3 PUSH2 0x893 CALLDATASIZE PUSH1 0x4 PUSH2 0x1550 JUMP JUMPDEST PUSH2 0x145 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x5 DUP5 ADD SLOAD PUSH1 0x6 DUP6 ADD SLOAD PUSH1 0x7 DUP7 ADD SLOAD PUSH1 0x8 SWAP1 SWAP7 ADD SLOAD SWAP5 SWAP6 SWAP4 SWAP5 SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF DUP2 AND SWAP1 PUSH1 0xFF PUSH5 0x100000000 DUP3 DIV DUP2 AND SWAP2 PUSH6 0x10000000000 SWAP1 DIV AND DUP10 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP10 DUP11 MSTORE PUSH1 0x20 DUP11 ADD SWAP9 SWAP1 SWAP9 MSTORE SWAP7 DUP9 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x60 DUP8 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x80 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 DUP6 ADD MSTORE PUSH4 0xFFFFFFFF AND PUSH1 0xC0 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0xE0 DUP4 ADD MSTORE ISZERO ISZERO PUSH2 0x100 DUP3 ADD MSTORE PUSH2 0x120 ADD PUSH2 0x305 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x94D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13C SLOAD PUSH2 0x587 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x92209DBF PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x987 JUMPI POP PUSH2 0x987 DUP3 PUSH2 0xD56 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x140 DUP1 SLOAD PUSH2 0x99B SWAP1 PUSH2 0x1815 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x9C7 SWAP1 PUSH2 0x1815 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA14 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x9E9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA14 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x9F7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xA37 DUP2 PUSH2 0xD7B JUMP JUMPDEST PUSH2 0xA41 DUP4 DUP4 PUSH2 0xD88 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0xABB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xAC5 DUP3 DUP3 PUSH2 0xE0E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x198E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xAE1 DUP2 PUSH2 0xD7B JUMP JUMPDEST PUSH2 0x13B SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0xB11 JUMPI PUSH1 0x40 MLOAD PUSH4 0xBA501C4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xAC5 DUP3 PUSH2 0xE75 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB26 PUSH1 0x1 PUSH2 0xEC7 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xB3E JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x198E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xB56 DUP2 PUSH2 0xD7B JUMP JUMPDEST PUSH2 0xB5E PUSH2 0xF54 JUMP JUMPDEST PUSH2 0xB66 PUSH2 0xF54 JUMP JUMPDEST PUSH2 0xB6E PUSH2 0xF54 JUMP JUMPDEST DUP5 MLOAD PUSH2 0xB82 SWAP1 PUSH2 0x140 SWAP1 PUSH1 0x20 DUP9 ADD SWAP1 PUSH2 0x1252 JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x13C DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP4 MLOAD PUSH2 0x12E SSTORE PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0x12F SSTORE PUSH1 0x40 DUP5 ADD MLOAD PUSH2 0x130 SSTORE TIMESTAMP PUSH2 0x12D SSTORE PUSH2 0xBE2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x198E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH1 0x1 JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0xFC1 JUMP JUMPDEST PUSH2 0xC0E PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP5 PUSH1 0x2 PUSH2 0xBD8 JUMP JUMPDEST PUSH2 0xC26 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x198E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 PUSH2 0xFCB JUMP JUMPDEST PUSH2 0xC50 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP1 PUSH2 0xFCB JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0xC97 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x142 DUP1 SLOAD PUSH2 0x99B SWAP1 PUSH2 0x1815 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x141 DUP1 SLOAD PUSH2 0x99B SWAP1 PUSH2 0x1815 JUMP JUMPDEST PUSH2 0x146 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xCF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH2 0x147 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xD20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xD4C DUP2 PUSH2 0xD7B JUMP JUMPDEST PUSH2 0xA41 DUP4 DUP4 PUSH2 0xE0E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x987 JUMPI POP PUSH2 0x987 DUP3 PUSH2 0x1016 JUMP JUMPDEST PUSH2 0xD85 DUP2 CALLER PUSH2 0x104B JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xD92 DUP3 DUP3 PUSH2 0xCAB JUMP JUMPDEST PUSH2 0xAC5 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xDCA CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0xE18 DUP3 DUP3 PUSH2 0xCAB JUMP JUMPDEST ISZERO PUSH2 0xAC5 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x13B DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 DUP3 SWAP2 PUSH32 0xD2D601FF50517068C7174BC2A7E6E8EA802702E59DA429EBB0D6B381B2785C5D SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xF0E JUMPI DUP2 PUSH1 0xFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0xEEA JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST PUSH2 0xF06 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAB2 SWAP1 PUSH2 0x1866 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF DUP1 DUP5 AND SWAP2 AND LT PUSH2 0xF35 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAB2 SWAP1 PUSH2 0x1866 JUMP JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xFBF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xAB2 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xAC5 DUP3 DUP3 PUSH2 0xD88 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD SWAP1 DUP5 SWAP1 SSTORE SWAP1 MLOAD SWAP1 SWAP2 DUP4 SWAP2 DUP4 SWAP2 DUP7 SWAP2 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF SWAP2 SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x2711897 PUSH1 0xE5 SHL EQ DUP1 PUSH2 0x987 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x987 JUMP JUMPDEST PUSH2 0x1055 DUP3 DUP3 PUSH2 0xCAB JUMP JUMPDEST PUSH2 0xAC5 JUMPI PUSH2 0x106D DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x14 PUSH2 0x10AF JUMP JUMPDEST PUSH2 0x1078 DUP4 PUSH1 0x20 PUSH2 0x10AF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1089 SWAP3 SWAP2 SWAP1 PUSH2 0x18B4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0xAB2 SWAP2 PUSH1 0x4 ADD PUSH2 0x1341 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x10BE DUP4 PUSH1 0x2 PUSH2 0x193F JUMP JUMPDEST PUSH2 0x10C9 SWAP1 PUSH1 0x2 PUSH2 0x195E JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10E1 JUMPI PUSH2 0x10E1 PUSH2 0x138B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x110B JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1126 JUMPI PUSH2 0x1126 PUSH2 0x1850 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1155 JUMPI PUSH2 0x1155 PUSH2 0x1850 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x1179 DUP5 PUSH1 0x2 PUSH2 0x193F JUMP JUMPDEST PUSH2 0x1184 SWAP1 PUSH1 0x1 PUSH2 0x195E JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x11FC JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x11B8 JUMPI PUSH2 0x11B8 PUSH2 0x1850 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x11CE JUMPI PUSH2 0x11CE PUSH2 0x1850 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x11F5 DUP2 PUSH2 0x1976 JUMP JUMPDEST SWAP1 POP PUSH2 0x1187 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x124B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xAB2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x125E SWAP1 PUSH2 0x1815 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x1280 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x12C6 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x1299 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x12C6 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x12C6 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x12C6 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x12AB JUMP JUMPDEST POP PUSH2 0x12D2 SWAP3 SWAP2 POP PUSH2 0x12D6 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x12D2 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x12D7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x124B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1330 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1318 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xC97 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1360 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1315 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xF4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x13C4 JUMPI PUSH2 0x13C4 PUSH2 0x138B JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x13F3 JUMPI PUSH2 0x13F3 PUSH2 0x138B JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x1415 JUMPI PUSH2 0x1415 PUSH2 0x138B JUMP JUMPDEST PUSH2 0x1428 PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x13CA JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE DUP4 DUP4 DUP4 ADD GT ISZERO PUSH2 0x143C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP3 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1464 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x124B DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x13FB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1489 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1492 DUP6 PUSH2 0x1374 JUMP JUMPDEST SWAP4 POP PUSH2 0x14A0 PUSH1 0x20 DUP7 ADD PUSH2 0x1374 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x14C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14CF DUP8 DUP3 DUP9 ADD PUSH2 0x1453 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x4 DUP4 LT PUSH2 0x151E JUMPI PUSH2 0x151E PUSH2 0x14F4 JUMP JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1537 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1547 PUSH1 0x20 DUP5 ADD PUSH2 0x1374 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1562 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x124B DUP3 PUSH2 0x1374 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x157C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1584 PUSH2 0x13A1 JUMP JUMPDEST DUP1 PUSH1 0x60 DUP5 ADD DUP6 DUP2 GT ISZERO PUSH2 0x1596 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x15B7 JUMPI PUSH2 0x15A9 DUP2 PUSH2 0x1374 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 ADD PUSH2 0x1598 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x15D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x15EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 ADD PUSH1 0x1F DUP2 ADD DUP7 SGT PUSH2 0x15FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 PUSH2 0x160F DUP8 DUP4 CALLDATALOAD DUP4 DUP6 ADD PUSH2 0x13FB JUMP JUMPDEST SWAP5 POP DUP7 PUSH1 0x3F DUP8 ADD SLT PUSH2 0x1620 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1628 PUSH2 0x13A1 JUMP JUMPDEST SWAP2 POP DUP2 PUSH1 0x80 DUP8 ADD DUP9 DUP2 GT ISZERO PUSH2 0x163C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP9 ADD JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1657 JUMPI DUP1 CALLDATALOAD DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 DUP4 ADD PUSH2 0x1640 JUMP JUMPDEST POP DUP2 SWAP6 POP PUSH2 0x1665 DUP10 DUP3 PUSH2 0x156B JUMP JUMPDEST SWAP5 POP POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x2 DUP4 LT PUSH2 0x151E JUMPI PUSH2 0x151E PUSH2 0x14F4 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1697 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x16B3 JUMPI PUSH2 0x16B3 PUSH2 0x138B JUMP JUMPDEST DUP2 PUSH1 0x5 SHL PUSH2 0x16C2 DUP3 DUP3 ADD PUSH2 0x13CA JUMP JUMPDEST SWAP3 DUP4 MSTORE DUP5 DUP2 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP1 DUP8 DUP6 GT ISZERO PUSH2 0x16DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP8 ADD SWAP3 POP JUMPDEST DUP5 DUP4 LT ISZERO PUSH2 0x16FB JUMPI DUP3 CALLDATALOAD DUP3 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH2 0x16E2 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x171E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1727 DUP7 PUSH2 0x1374 JUMP JUMPDEST SWAP5 POP PUSH2 0x1735 PUSH1 0x20 DUP8 ADD PUSH2 0x1374 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1752 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x175E DUP10 DUP4 DUP11 ADD PUSH2 0x1686 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1774 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1780 DUP10 DUP4 DUP11 ADD PUSH2 0x1686 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1796 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A3 DUP9 DUP3 DUP10 ADD PUSH2 0x1453 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x17C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17D1 DUP7 PUSH2 0x1374 JUMP JUMPDEST SWAP5 POP PUSH2 0x17DF PUSH1 0x20 DUP8 ADD PUSH2 0x1374 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1809 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17A3 DUP9 DUP3 DUP10 ADD PUSH2 0x1453 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1829 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x184A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x18EC DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1315 JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x191D DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1315 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1959 JUMPI PUSH2 0x1959 PUSH2 0x1929 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1971 JUMPI PUSH2 0x1971 PUSH2 0x1929 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x1985 JUMPI PUSH2 0x1985 PUSH2 0x1929 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP INVALID PUSH23 0x13A25ECC738585A232AD50A301178F12B3BA8887D13E13 DUP12 MSTORE EXTCODECOPY TIMESTAMP PUSH10 0xC47689A2646970667358 0x22 SLT KECCAK256 0xCD 0xC7 PUSH9 0xB8097D59911042FE10 0xF7 0xC6 DUP7 PUSH1 0xF5 DUP5 XOR SHL 0xCE 0xCC 0xE5 0xB0 SSTORE 0xE2 0xA8 0xE2 EXP GAS 0x4B 0x22 PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0x12A31BB540C2 0xEB ADDMOD 0xD4 SWAP16 DUP11 DUP5 0xCF DUP14 0xD5 DUP13 SWAP3 CREATE PUSH17 0x3A0E23ACA1AB46CD8A48BAFC64736F6C63 NUMBER STOP ADDMOD MULMOD STOP CALLER ",
		"sourceMap": "199:3666:54:-:0;;;856:23;828:51;;920:30;885:65;;1132:597;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1323:11;:26;;-1:-1:-1;;;;;1323:26:54;;;-1:-1:-1;;;;;;1323:26:54;;;;;;;1359:10;:24;;;;;;;;;;;;;;;1323:26;1405:10;1394:36;;1417:12;719:10:35;;640:96;1417:12:54;1394:10;:36::i;:::-;1451:17;;1440:43;;719:10:35;1394::54;:36::i;1440:43::-;1507:10;;1493:37;;1507:10;1493:13;:37::i;:::-;1540:44;1554:17;;1573:10;;1540:13;;;:44;;:::i;:::-;1595:18;:40;;-1:-1:-1;;;;;;1595:40:54;-1:-1:-1;;;;;1595:40:54;;;;;;;;;;;1646:22;:48;-1:-1:-1;;1704:7:54;:18;199:3666;;6640:110:24;6718:25;6729:4;6735:7;6718:10;:25::i;:::-;6640:110;;:::o;6875:247::-;6958:25;4491:12;;;;;;;;;;;:22;;;;7014:34;;;;7063:52;;4491:22;;7014:34;;4491:22;;:12;;7063:52;;6958:25;7063:52;6948:174;6875:247;;:::o;7244:233::-;2981:4;3004:12;;;;;;;;;;;-1:-1:-1;;;;;3004:29:24;;;;;;;;;;;;7322:149;;7365:6;:12;;;;;;;;;;;-1:-1:-1;;;;;7365:29:24;;;;;;;;;:36;;-1:-1:-1;;7365:36:24;7397:4;7365:36;;;7447:12;719:10:35;;640:96;7447:12:24;-1:-1:-1;;;;;7420:40:24;7438:7;-1:-1:-1;;;;;7420:40:24;7432:4;7420:40;;;;;;;;;;7244:233;;:::o;14:177:79:-;93:13;;-1:-1:-1;;;;;135:31:79;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:502::-;302:6;310;318;326;334;387:3;375:9;366:7;362:23;358:33;355:53;;;404:1;401;394:12;355:53;427:40;457:9;427:40;:::i;:::-;417:50;;486:49;531:2;520:9;516:18;486:49;:::i;:::-;476:59;;554:49;599:2;588:9;584:18;554:49;:::i;:::-;643:2;628:18;;622:25;687:3;672:19;;;666:26;196:502;;;;-1:-1:-1;544:59:79;622:25;666:26;196:502;-1:-1:-1;;;196:502:79:o;:::-;199:3666:54;;;;;;"
	  },
	  "deployedBytecode": {
		"functionDebugData": {
		  "@ADMIN_ROLE_13823": {
			"entryPoint": null,
			"id": 13823,
			"parameterSlots": 0,
			"returnSlots": 0
		  },
		  "@BANK_CREATOR_ROLE_13828": {
			"entryPoint": null,
			"id": 13828,
			"parameterSlots": 0,
			"returnSlots": 0
		  },
		  "@DEFAULT_ADMIN_ROLE_4230": {
			"entryPoint": null,
			"id": 4230,
			"parameterSlots": 0,
			"returnSlots": 0
		  },
		  "@_checkRole_4295": {
			"entryPoint": 1972,
			"id": 4295,
			"parameterSlots": 1,
			"returnSlots": 0
		  },
		  "@_checkRole_4338": {
			"entryPoint": 2218,
			"id": 4338,
			"parameterSlots": 2,
			"returnSlots": 0
		  },
		  "@_grantRole_4490": {
			"entryPoint": 1985,
			"id": 4490,
			"parameterSlots": 2,
			"returnSlots": 0
		  },
		  "@_msgSender_7330": {
			"entryPoint": null,
			"id": 7330,
			"parameterSlots": 0,
			"returnSlots": 1
		  },
		  "@_revokeRole_4521": {
			"entryPoint": 2117,
			"id": 4521,
			"parameterSlots": 2,
			"returnSlots": 0
		  },
		  "@createBankProxy_13968": {
			"entryPoint": 1510,
			"id": 13968,
			"parameterSlots": 2,
			"returnSlots": 1
		  },
		  "@getRoleAdmin_4353": {
			"entryPoint": null,
			"id": 4353,
			"parameterSlots": 1,
			"returnSlots": 1
		  },
		  "@grantRole_4373": {
			"entryPoint": 1126,
			"id": 4373,
			"parameterSlots": 2,
			"returnSlots": 0
		  },
		  "@hasRole_4282": {
			"entryPoint": 1369,
			"id": 4282,
			"parameterSlots": 2,
			"returnSlots": 1
		  },
		  "@launchpadFeePercentage_13836": {
			"entryPoint": null,
			"id": 13836,
			"parameterSlots": 0,
			"returnSlots": 0
		  },
		  "@launchpadFeeWallet_13834": {
			"entryPoint": null,
			"id": 13834,
			"parameterSlots": 0,
			"returnSlots": 0
		  },
		  "@mintCap_13838": {
			"entryPoint": null,
			"id": 13838,
			"parameterSlots": 0,
			"returnSlots": 0
		  },
		  "@nftBankImpl_13832": {
			"entryPoint": null,
			"id": 13832,
			"parameterSlots": 0,
			"returnSlots": 0
		  },
		  "@renounceRole_4416": {
			"entryPoint": 1168,
			"id": 4416,
			"parameterSlots": 2,
			"returnSlots": 0
		  },
		  "@revokeRole_4393": {
			"entryPoint": 1935,
			"id": 4393,
			"parameterSlots": 2,
			"returnSlots": 0
		  },
		  "@setLaunchpadFeePercentage_14077": {
			"entryPoint": 1052,
			"id": 14077,
			"parameterSlots": 1,
			"returnSlots": 0
		  },
		  "@setMintCap_14055": {
			"entryPoint": 1295,
			"id": 14055,
			"parameterSlots": 1,
			"returnSlots": 0
		  },
		  "@setNewBankImplAddress_14011": {
			"entryPoint": 736,
			"id": 14011,
			"parameterSlots": 1,
			"returnSlots": 0
		  },
		  "@setNewSuperAdmin_14033": {
			"entryPoint": 1410,
			"id": 14033,
			"parameterSlots": 1,
			"returnSlots": 0
		  },
		  "@superAdmin_13830": {
			"entryPoint": null,
			"id": 13830,
			"parameterSlots": 0,
			"returnSlots": 0
		  },
		  "@supportsInterface_4263": {
			"entryPoint": 681,
			"id": 4263,
			"parameterSlots": 1,
			"returnSlots": 1
		  },
		  "@supportsInterface_7640": {
			"entryPoint": null,
			"id": 7640,
			"parameterSlots": 1,
			"returnSlots": 1
		  },
		  "@toHexString_7616": {
			"entryPoint": 2318,
			"id": 7616,
			"parameterSlots": 2,
			"returnSlots": 1
		  },
		  "abi_decode_address": {
			"entryPoint": 2792,
			"id": null,
			"parameterSlots": 1,
			"returnSlots": 1
		  },
		  "abi_decode_tuple_t_address": {
			"entryPoint": 2820,
			"id": null,
			"parameterSlots": 2,
			"returnSlots": 1
		  },
		  "abi_decode_tuple_t_bool_fromMemory": {
			"entryPoint": 3119,
			"id": null,
			"parameterSlots": 2,
			"returnSlots": 1
		  },
		  "abi_decode_tuple_t_bytes32": {
			"entryPoint": null,
			"id": null,
			"parameterSlots": 2,
			"returnSlots": 1
		  },
		  "abi_decode_tuple_t_bytes32t_address": {
			"entryPoint": 2872,
			"id": null,
			"parameterSlots": 2,
			"returnSlots": 2
		  },
		  "abi_decode_tuple_t_bytes4": {
			"entryPoint": 2750,
			"id": null,
			"parameterSlots": 2,
			"returnSlots": 1
		  },
		  "abi_decode_tuple_t_string_memory_ptrt_uint256": {
			"entryPoint": 2938,
			"id": null,
			"parameterSlots": 2,
			"returnSlots": 2
		  },
		  "abi_decode_tuple_t_uint256": {
			"entryPoint": 2847,
			"id": null,
			"parameterSlots": 2,
			"returnSlots": 1
		  },
		  "abi_encode_string": {
			"entryPoint": 3201,
			"id": null,
			"parameterSlots": 2,
			"returnSlots": 1
		  },
		  "abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
			"entryPoint": 3365,
			"id": null,
			"parameterSlots": 2,
			"returnSlots": 1
		  },
		  "abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
			"entryPoint": 3393,
			"id": null,
			"parameterSlots": 3,
			"returnSlots": 1
		  },
		  "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
			"entryPoint": null,
			"id": null,
			"parameterSlots": 2,
			"returnSlots": 1
		  },
		  "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
			"entryPoint": null,
			"id": null,
			"parameterSlots": 3,
			"returnSlots": 1
		  },
		  "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
			"entryPoint": null,
			"id": null,
			"parameterSlots": 2,
			"returnSlots": 1
		  },
		  "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
			"entryPoint": null,
			"id": null,
			"parameterSlots": 2,
			"returnSlots": 1
		  },
		  "abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed": {
			"entryPoint": null,
			"id": null,
			"parameterSlots": 2,
			"returnSlots": 1
		  },
		  "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
			"entryPoint": 3510,
			"id": null,
			"parameterSlots": 2,
			"returnSlots": 1
		  },
		  "abi_encode_tuple_t_string_memory_ptr_t_array$_t_uint256_$3_memory_ptr_t_array$_t_address_$3_memory_ptr__to_t_string_memory_ptr_t_array$_t_uint256_$3_memory_ptr_t_array$_t_address_$3_memory_ptr__fromStack_reversed": {
			"entryPoint": 3245,
			"id": null,
			"parameterSlots": 4,
			"returnSlots": 1
		  },
		  "abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed": {
			"entryPoint": null,
			"id": null,
			"parameterSlots": 1,
			"returnSlots": 1
		  },
		  "abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed": {
			"entryPoint": null,
			"id": null,
			"parameterSlots": 1,
			"returnSlots": 1
		  },
		  "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
			"entryPoint": null,
			"id": null,
			"parameterSlots": 2,
			"returnSlots": 1
		  },
		  "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
			"entryPoint": null,
			"id": null,
			"parameterSlots": 3,
			"returnSlots": 1
		  },
		  "checked_add_t_uint256": {
			"entryPoint": 3582,
			"id": null,
			"parameterSlots": 2,
			"returnSlots": 1
		  },
		  "checked_mul_t_uint256": {
			"entryPoint": 3551,
			"id": null,
			"parameterSlots": 2,
			"returnSlots": 1
		  },
		  "copy_memory_to_memory": {
			"entryPoint": 3153,
			"id": null,
			"parameterSlots": 3,
			"returnSlots": 0
		  },
		  "decrement_t_uint256": {
			"entryPoint": 3628,
			"id": null,
			"parameterSlots": 1,
			"returnSlots": 1
		  },
		  "panic_error_0x11": {
			"entryPoint": 3529,
			"id": null,
			"parameterSlots": 0,
			"returnSlots": 0
		  },
		  "panic_error_0x32": {
			"entryPoint": 3606,
			"id": null,
			"parameterSlots": 0,
			"returnSlots": 0
		  },
		  "panic_error_0x41": {
			"entryPoint": 2916,
			"id": null,
			"parameterSlots": 0,
			"returnSlots": 0
		  }
		},
		"generatedSources": [
		  {
			"ast": {
			  "nodeType": "YulBlock",
			  "src": "0:8576:79",
			  "statements": [
				{
				  "nodeType": "YulBlock",
				  "src": "6:3:79",
				  "statements": []
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "83:217:79",
					"statements": [
					  {
						"body": {
						  "nodeType": "YulBlock",
						  "src": "129:16:79",
						  "statements": [
							{
							  "expression": {
								"arguments": [
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "138:1:79",
									"type": "",
									"value": "0"
								  },
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "141:1:79",
									"type": "",
									"value": "0"
								  }
								],
								"functionName": {
								  "name": "revert",
								  "nodeType": "YulIdentifier",
								  "src": "131:6:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "131:12:79"
							  },
							  "nodeType": "YulExpressionStatement",
							  "src": "131:12:79"
							}
						  ]
						},
						"condition": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "dataEnd",
								  "nodeType": "YulIdentifier",
								  "src": "104:7:79"
								},
								{
								  "name": "headStart",
								  "nodeType": "YulIdentifier",
								  "src": "113:9:79"
								}
							  ],
							  "functionName": {
								"name": "sub",
								"nodeType": "YulIdentifier",
								"src": "100:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "100:23:79"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "125:2:79",
							  "type": "",
							  "value": "32"
							}
						  ],
						  "functionName": {
							"name": "slt",
							"nodeType": "YulIdentifier",
							"src": "96:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "96:32:79"
						},
						"nodeType": "YulIf",
						"src": "93:52:79"
					  },
					  {
						"nodeType": "YulVariableDeclaration",
						"src": "154:36:79",
						"value": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "180:9:79"
							}
						  ],
						  "functionName": {
							"name": "calldataload",
							"nodeType": "YulIdentifier",
							"src": "167:12:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "167:23:79"
						},
						"variables": [
						  {
							"name": "value",
							"nodeType": "YulTypedName",
							"src": "158:5:79",
							"type": ""
						  }
						]
					  },
					  {
						"body": {
						  "nodeType": "YulBlock",
						  "src": "254:16:79",
						  "statements": [
							{
							  "expression": {
								"arguments": [
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "263:1:79",
									"type": "",
									"value": "0"
								  },
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "266:1:79",
									"type": "",
									"value": "0"
								  }
								],
								"functionName": {
								  "name": "revert",
								  "nodeType": "YulIdentifier",
								  "src": "256:6:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "256:12:79"
							  },
							  "nodeType": "YulExpressionStatement",
							  "src": "256:12:79"
							}
						  ]
						},
						"condition": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "value",
								  "nodeType": "YulIdentifier",
								  "src": "212:5:79"
								},
								{
								  "arguments": [
									{
									  "name": "value",
									  "nodeType": "YulIdentifier",
									  "src": "223:5:79"
									},
									{
									  "arguments": [
										{
										  "kind": "number",
										  "nodeType": "YulLiteral",
										  "src": "234:3:79",
										  "type": "",
										  "value": "224"
										},
										{
										  "kind": "number",
										  "nodeType": "YulLiteral",
										  "src": "239:10:79",
										  "type": "",
										  "value": "0xffffffff"
										}
									  ],
									  "functionName": {
										"name": "shl",
										"nodeType": "YulIdentifier",
										"src": "230:3:79"
									  },
									  "nodeType": "YulFunctionCall",
									  "src": "230:20:79"
									}
								  ],
								  "functionName": {
									"name": "and",
									"nodeType": "YulIdentifier",
									"src": "219:3:79"
								  },
								  "nodeType": "YulFunctionCall",
								  "src": "219:32:79"
								}
							  ],
							  "functionName": {
								"name": "eq",
								"nodeType": "YulIdentifier",
								"src": "209:2:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "209:43:79"
							}
						  ],
						  "functionName": {
							"name": "iszero",
							"nodeType": "YulIdentifier",
							"src": "202:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "202:51:79"
						},
						"nodeType": "YulIf",
						"src": "199:71:79"
					  },
					  {
						"nodeType": "YulAssignment",
						"src": "279:15:79",
						"value": {
						  "name": "value",
						  "nodeType": "YulIdentifier",
						  "src": "289:5:79"
						},
						"variableNames": [
						  {
							"name": "value0",
							"nodeType": "YulIdentifier",
							"src": "279:6:79"
						  }
						]
					  }
					]
				  },
				  "name": "abi_decode_tuple_t_bytes4",
				  "nodeType": "YulFunctionDefinition",
				  "parameters": [
					{
					  "name": "headStart",
					  "nodeType": "YulTypedName",
					  "src": "49:9:79",
					  "type": ""
					},
					{
					  "name": "dataEnd",
					  "nodeType": "YulTypedName",
					  "src": "60:7:79",
					  "type": ""
					}
				  ],
				  "returnVariables": [
					{
					  "name": "value0",
					  "nodeType": "YulTypedName",
					  "src": "72:6:79",
					  "type": ""
					}
				  ],
				  "src": "14:286:79"
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "400:92:79",
					"statements": [
					  {
						"nodeType": "YulAssignment",
						"src": "410:26:79",
						"value": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "422:9:79"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "433:2:79",
							  "type": "",
							  "value": "32"
							}
						  ],
						  "functionName": {
							"name": "add",
							"nodeType": "YulIdentifier",
							"src": "418:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "418:18:79"
						},
						"variableNames": [
						  {
							"name": "tail",
							"nodeType": "YulIdentifier",
							"src": "410:4:79"
						  }
						]
					  },
					  {
						"expression": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "452:9:79"
							},
							{
							  "arguments": [
								{
								  "arguments": [
									{
									  "name": "value0",
									  "nodeType": "YulIdentifier",
									  "src": "477:6:79"
									}
								  ],
								  "functionName": {
									"name": "iszero",
									"nodeType": "YulIdentifier",
									"src": "470:6:79"
								  },
								  "nodeType": "YulFunctionCall",
								  "src": "470:14:79"
								}
							  ],
							  "functionName": {
								"name": "iszero",
								"nodeType": "YulIdentifier",
								"src": "463:6:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "463:22:79"
							}
						  ],
						  "functionName": {
							"name": "mstore",
							"nodeType": "YulIdentifier",
							"src": "445:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "445:41:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "445:41:79"
					  }
					]
				  },
				  "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
				  "nodeType": "YulFunctionDefinition",
				  "parameters": [
					{
					  "name": "headStart",
					  "nodeType": "YulTypedName",
					  "src": "369:9:79",
					  "type": ""
					},
					{
					  "name": "value0",
					  "nodeType": "YulTypedName",
					  "src": "380:6:79",
					  "type": ""
					}
				  ],
				  "returnVariables": [
					{
					  "name": "tail",
					  "nodeType": "YulTypedName",
					  "src": "391:4:79",
					  "type": ""
					}
				  ],
				  "src": "305:187:79"
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "546:124:79",
					"statements": [
					  {
						"nodeType": "YulAssignment",
						"src": "556:29:79",
						"value": {
						  "arguments": [
							{
							  "name": "offset",
							  "nodeType": "YulIdentifier",
							  "src": "578:6:79"
							}
						  ],
						  "functionName": {
							"name": "calldataload",
							"nodeType": "YulIdentifier",
							"src": "565:12:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "565:20:79"
						},
						"variableNames": [
						  {
							"name": "value",
							"nodeType": "YulIdentifier",
							"src": "556:5:79"
						  }
						]
					  },
					  {
						"body": {
						  "nodeType": "YulBlock",
						  "src": "648:16:79",
						  "statements": [
							{
							  "expression": {
								"arguments": [
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "657:1:79",
									"type": "",
									"value": "0"
								  },
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "660:1:79",
									"type": "",
									"value": "0"
								  }
								],
								"functionName": {
								  "name": "revert",
								  "nodeType": "YulIdentifier",
								  "src": "650:6:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "650:12:79"
							  },
							  "nodeType": "YulExpressionStatement",
							  "src": "650:12:79"
							}
						  ]
						},
						"condition": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "value",
								  "nodeType": "YulIdentifier",
								  "src": "607:5:79"
								},
								{
								  "arguments": [
									{
									  "name": "value",
									  "nodeType": "YulIdentifier",
									  "src": "618:5:79"
									},
									{
									  "arguments": [
										{
										  "arguments": [
											{
											  "kind": "number",
											  "nodeType": "YulLiteral",
											  "src": "633:3:79",
											  "type": "",
											  "value": "160"
											},
											{
											  "kind": "number",
											  "nodeType": "YulLiteral",
											  "src": "638:1:79",
											  "type": "",
											  "value": "1"
											}
										  ],
										  "functionName": {
											"name": "shl",
											"nodeType": "YulIdentifier",
											"src": "629:3:79"
										  },
										  "nodeType": "YulFunctionCall",
										  "src": "629:11:79"
										},
										{
										  "kind": "number",
										  "nodeType": "YulLiteral",
										  "src": "642:1:79",
										  "type": "",
										  "value": "1"
										}
									  ],
									  "functionName": {
										"name": "sub",
										"nodeType": "YulIdentifier",
										"src": "625:3:79"
									  },
									  "nodeType": "YulFunctionCall",
									  "src": "625:19:79"
									}
								  ],
								  "functionName": {
									"name": "and",
									"nodeType": "YulIdentifier",
									"src": "614:3:79"
								  },
								  "nodeType": "YulFunctionCall",
								  "src": "614:31:79"
								}
							  ],
							  "functionName": {
								"name": "eq",
								"nodeType": "YulIdentifier",
								"src": "604:2:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "604:42:79"
							}
						  ],
						  "functionName": {
							"name": "iszero",
							"nodeType": "YulIdentifier",
							"src": "597:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "597:50:79"
						},
						"nodeType": "YulIf",
						"src": "594:70:79"
					  }
					]
				  },
				  "name": "abi_decode_address",
				  "nodeType": "YulFunctionDefinition",
				  "parameters": [
					{
					  "name": "offset",
					  "nodeType": "YulTypedName",
					  "src": "525:6:79",
					  "type": ""
					}
				  ],
				  "returnVariables": [
					{
					  "name": "value",
					  "nodeType": "YulTypedName",
					  "src": "536:5:79",
					  "type": ""
					}
				  ],
				  "src": "497:173:79"
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "745:116:79",
					"statements": [
					  {
						"body": {
						  "nodeType": "YulBlock",
						  "src": "791:16:79",
						  "statements": [
							{
							  "expression": {
								"arguments": [
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "800:1:79",
									"type": "",
									"value": "0"
								  },
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "803:1:79",
									"type": "",
									"value": "0"
								  }
								],
								"functionName": {
								  "name": "revert",
								  "nodeType": "YulIdentifier",
								  "src": "793:6:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "793:12:79"
							  },
							  "nodeType": "YulExpressionStatement",
							  "src": "793:12:79"
							}
						  ]
						},
						"condition": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "dataEnd",
								  "nodeType": "YulIdentifier",
								  "src": "766:7:79"
								},
								{
								  "name": "headStart",
								  "nodeType": "YulIdentifier",
								  "src": "775:9:79"
								}
							  ],
							  "functionName": {
								"name": "sub",
								"nodeType": "YulIdentifier",
								"src": "762:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "762:23:79"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "787:2:79",
							  "type": "",
							  "value": "32"
							}
						  ],
						  "functionName": {
							"name": "slt",
							"nodeType": "YulIdentifier",
							"src": "758:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "758:32:79"
						},
						"nodeType": "YulIf",
						"src": "755:52:79"
					  },
					  {
						"nodeType": "YulAssignment",
						"src": "816:39:79",
						"value": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "845:9:79"
							}
						  ],
						  "functionName": {
							"name": "abi_decode_address",
							"nodeType": "YulIdentifier",
							"src": "826:18:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "826:29:79"
						},
						"variableNames": [
						  {
							"name": "value0",
							"nodeType": "YulIdentifier",
							"src": "816:6:79"
						  }
						]
					  }
					]
				  },
				  "name": "abi_decode_tuple_t_address",
				  "nodeType": "YulFunctionDefinition",
				  "parameters": [
					{
					  "name": "headStart",
					  "nodeType": "YulTypedName",
					  "src": "711:9:79",
					  "type": ""
					},
					{
					  "name": "dataEnd",
					  "nodeType": "YulTypedName",
					  "src": "722:7:79",
					  "type": ""
					}
				  ],
				  "returnVariables": [
					{
					  "name": "value0",
					  "nodeType": "YulTypedName",
					  "src": "734:6:79",
					  "type": ""
					}
				  ],
				  "src": "675:186:79"
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "936:110:79",
					"statements": [
					  {
						"body": {
						  "nodeType": "YulBlock",
						  "src": "982:16:79",
						  "statements": [
							{
							  "expression": {
								"arguments": [
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "991:1:79",
									"type": "",
									"value": "0"
								  },
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "994:1:79",
									"type": "",
									"value": "0"
								  }
								],
								"functionName": {
								  "name": "revert",
								  "nodeType": "YulIdentifier",
								  "src": "984:6:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "984:12:79"
							  },
							  "nodeType": "YulExpressionStatement",
							  "src": "984:12:79"
							}
						  ]
						},
						"condition": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "dataEnd",
								  "nodeType": "YulIdentifier",
								  "src": "957:7:79"
								},
								{
								  "name": "headStart",
								  "nodeType": "YulIdentifier",
								  "src": "966:9:79"
								}
							  ],
							  "functionName": {
								"name": "sub",
								"nodeType": "YulIdentifier",
								"src": "953:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "953:23:79"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "978:2:79",
							  "type": "",
							  "value": "32"
							}
						  ],
						  "functionName": {
							"name": "slt",
							"nodeType": "YulIdentifier",
							"src": "949:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "949:32:79"
						},
						"nodeType": "YulIf",
						"src": "946:52:79"
					  },
					  {
						"nodeType": "YulAssignment",
						"src": "1007:33:79",
						"value": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "1030:9:79"
							}
						  ],
						  "functionName": {
							"name": "calldataload",
							"nodeType": "YulIdentifier",
							"src": "1017:12:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "1017:23:79"
						},
						"variableNames": [
						  {
							"name": "value0",
							"nodeType": "YulIdentifier",
							"src": "1007:6:79"
						  }
						]
					  }
					]
				  },
				  "name": "abi_decode_tuple_t_uint256",
				  "nodeType": "YulFunctionDefinition",
				  "parameters": [
					{
					  "name": "headStart",
					  "nodeType": "YulTypedName",
					  "src": "902:9:79",
					  "type": ""
					},
					{
					  "name": "dataEnd",
					  "nodeType": "YulTypedName",
					  "src": "913:7:79",
					  "type": ""
					}
				  ],
				  "returnVariables": [
					{
					  "name": "value0",
					  "nodeType": "YulTypedName",
					  "src": "925:6:79",
					  "type": ""
					}
				  ],
				  "src": "866:180:79"
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "1121:110:79",
					"statements": [
					  {
						"body": {
						  "nodeType": "YulBlock",
						  "src": "1167:16:79",
						  "statements": [
							{
							  "expression": {
								"arguments": [
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "1176:1:79",
									"type": "",
									"value": "0"
								  },
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "1179:1:79",
									"type": "",
									"value": "0"
								  }
								],
								"functionName": {
								  "name": "revert",
								  "nodeType": "YulIdentifier",
								  "src": "1169:6:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "1169:12:79"
							  },
							  "nodeType": "YulExpressionStatement",
							  "src": "1169:12:79"
							}
						  ]
						},
						"condition": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "dataEnd",
								  "nodeType": "YulIdentifier",
								  "src": "1142:7:79"
								},
								{
								  "name": "headStart",
								  "nodeType": "YulIdentifier",
								  "src": "1151:9:79"
								}
							  ],
							  "functionName": {
								"name": "sub",
								"nodeType": "YulIdentifier",
								"src": "1138:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "1138:23:79"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "1163:2:79",
							  "type": "",
							  "value": "32"
							}
						  ],
						  "functionName": {
							"name": "slt",
							"nodeType": "YulIdentifier",
							"src": "1134:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "1134:32:79"
						},
						"nodeType": "YulIf",
						"src": "1131:52:79"
					  },
					  {
						"nodeType": "YulAssignment",
						"src": "1192:33:79",
						"value": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "1215:9:79"
							}
						  ],
						  "functionName": {
							"name": "calldataload",
							"nodeType": "YulIdentifier",
							"src": "1202:12:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "1202:23:79"
						},
						"variableNames": [
						  {
							"name": "value0",
							"nodeType": "YulIdentifier",
							"src": "1192:6:79"
						  }
						]
					  }
					]
				  },
				  "name": "abi_decode_tuple_t_bytes32",
				  "nodeType": "YulFunctionDefinition",
				  "parameters": [
					{
					  "name": "headStart",
					  "nodeType": "YulTypedName",
					  "src": "1087:9:79",
					  "type": ""
					},
					{
					  "name": "dataEnd",
					  "nodeType": "YulTypedName",
					  "src": "1098:7:79",
					  "type": ""
					}
				  ],
				  "returnVariables": [
					{
					  "name": "value0",
					  "nodeType": "YulTypedName",
					  "src": "1110:6:79",
					  "type": ""
					}
				  ],
				  "src": "1051:180:79"
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "1337:76:79",
					"statements": [
					  {
						"nodeType": "YulAssignment",
						"src": "1347:26:79",
						"value": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "1359:9:79"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "1370:2:79",
							  "type": "",
							  "value": "32"
							}
						  ],
						  "functionName": {
							"name": "add",
							"nodeType": "YulIdentifier",
							"src": "1355:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "1355:18:79"
						},
						"variableNames": [
						  {
							"name": "tail",
							"nodeType": "YulIdentifier",
							"src": "1347:4:79"
						  }
						]
					  },
					  {
						"expression": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "1389:9:79"
							},
							{
							  "name": "value0",
							  "nodeType": "YulIdentifier",
							  "src": "1400:6:79"
							}
						  ],
						  "functionName": {
							"name": "mstore",
							"nodeType": "YulIdentifier",
							"src": "1382:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "1382:25:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "1382:25:79"
					  }
					]
				  },
				  "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
				  "nodeType": "YulFunctionDefinition",
				  "parameters": [
					{
					  "name": "headStart",
					  "nodeType": "YulTypedName",
					  "src": "1306:9:79",
					  "type": ""
					},
					{
					  "name": "value0",
					  "nodeType": "YulTypedName",
					  "src": "1317:6:79",
					  "type": ""
					}
				  ],
				  "returnVariables": [
					{
					  "name": "tail",
					  "nodeType": "YulTypedName",
					  "src": "1328:4:79",
					  "type": ""
					}
				  ],
				  "src": "1236:177:79"
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "1519:102:79",
					"statements": [
					  {
						"nodeType": "YulAssignment",
						"src": "1529:26:79",
						"value": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "1541:9:79"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "1552:2:79",
							  "type": "",
							  "value": "32"
							}
						  ],
						  "functionName": {
							"name": "add",
							"nodeType": "YulIdentifier",
							"src": "1537:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "1537:18:79"
						},
						"variableNames": [
						  {
							"name": "tail",
							"nodeType": "YulIdentifier",
							"src": "1529:4:79"
						  }
						]
					  },
					  {
						"expression": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "1571:9:79"
							},
							{
							  "arguments": [
								{
								  "name": "value0",
								  "nodeType": "YulIdentifier",
								  "src": "1586:6:79"
								},
								{
								  "arguments": [
									{
									  "arguments": [
										{
										  "kind": "number",
										  "nodeType": "YulLiteral",
										  "src": "1602:3:79",
										  "type": "",
										  "value": "160"
										},
										{
										  "kind": "number",
										  "nodeType": "YulLiteral",
										  "src": "1607:1:79",
										  "type": "",
										  "value": "1"
										}
									  ],
									  "functionName": {
										"name": "shl",
										"nodeType": "YulIdentifier",
										"src": "1598:3:79"
									  },
									  "nodeType": "YulFunctionCall",
									  "src": "1598:11:79"
									},
									{
									  "kind": "number",
									  "nodeType": "YulLiteral",
									  "src": "1611:1:79",
									  "type": "",
									  "value": "1"
									}
								  ],
								  "functionName": {
									"name": "sub",
									"nodeType": "YulIdentifier",
									"src": "1594:3:79"
								  },
								  "nodeType": "YulFunctionCall",
								  "src": "1594:19:79"
								}
							  ],
							  "functionName": {
								"name": "and",
								"nodeType": "YulIdentifier",
								"src": "1582:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "1582:32:79"
							}
						  ],
						  "functionName": {
							"name": "mstore",
							"nodeType": "YulIdentifier",
							"src": "1564:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "1564:51:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "1564:51:79"
					  }
					]
				  },
				  "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
				  "nodeType": "YulFunctionDefinition",
				  "parameters": [
					{
					  "name": "headStart",
					  "nodeType": "YulTypedName",
					  "src": "1488:9:79",
					  "type": ""
					},
					{
					  "name": "value0",
					  "nodeType": "YulTypedName",
					  "src": "1499:6:79",
					  "type": ""
					}
				  ],
				  "returnVariables": [
					{
					  "name": "tail",
					  "nodeType": "YulTypedName",
					  "src": "1510:4:79",
					  "type": ""
					}
				  ],
				  "src": "1418:203:79"
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "1727:76:79",
					"statements": [
					  {
						"nodeType": "YulAssignment",
						"src": "1737:26:79",
						"value": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "1749:9:79"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "1760:2:79",
							  "type": "",
							  "value": "32"
							}
						  ],
						  "functionName": {
							"name": "add",
							"nodeType": "YulIdentifier",
							"src": "1745:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "1745:18:79"
						},
						"variableNames": [
						  {
							"name": "tail",
							"nodeType": "YulIdentifier",
							"src": "1737:4:79"
						  }
						]
					  },
					  {
						"expression": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "1779:9:79"
							},
							{
							  "name": "value0",
							  "nodeType": "YulIdentifier",
							  "src": "1790:6:79"
							}
						  ],
						  "functionName": {
							"name": "mstore",
							"nodeType": "YulIdentifier",
							"src": "1772:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "1772:25:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "1772:25:79"
					  }
					]
				  },
				  "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
				  "nodeType": "YulFunctionDefinition",
				  "parameters": [
					{
					  "name": "headStart",
					  "nodeType": "YulTypedName",
					  "src": "1696:9:79",
					  "type": ""
					},
					{
					  "name": "value0",
					  "nodeType": "YulTypedName",
					  "src": "1707:6:79",
					  "type": ""
					}
				  ],
				  "returnVariables": [
					{
					  "name": "tail",
					  "nodeType": "YulTypedName",
					  "src": "1718:4:79",
					  "type": ""
					}
				  ],
				  "src": "1626:177:79"
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "1895:167:79",
					"statements": [
					  {
						"body": {
						  "nodeType": "YulBlock",
						  "src": "1941:16:79",
						  "statements": [
							{
							  "expression": {
								"arguments": [
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "1950:1:79",
									"type": "",
									"value": "0"
								  },
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "1953:1:79",
									"type": "",
									"value": "0"
								  }
								],
								"functionName": {
								  "name": "revert",
								  "nodeType": "YulIdentifier",
								  "src": "1943:6:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "1943:12:79"
							  },
							  "nodeType": "YulExpressionStatement",
							  "src": "1943:12:79"
							}
						  ]
						},
						"condition": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "dataEnd",
								  "nodeType": "YulIdentifier",
								  "src": "1916:7:79"
								},
								{
								  "name": "headStart",
								  "nodeType": "YulIdentifier",
								  "src": "1925:9:79"
								}
							  ],
							  "functionName": {
								"name": "sub",
								"nodeType": "YulIdentifier",
								"src": "1912:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "1912:23:79"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "1937:2:79",
							  "type": "",
							  "value": "64"
							}
						  ],
						  "functionName": {
							"name": "slt",
							"nodeType": "YulIdentifier",
							"src": "1908:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "1908:32:79"
						},
						"nodeType": "YulIf",
						"src": "1905:52:79"
					  },
					  {
						"nodeType": "YulAssignment",
						"src": "1966:33:79",
						"value": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "1989:9:79"
							}
						  ],
						  "functionName": {
							"name": "calldataload",
							"nodeType": "YulIdentifier",
							"src": "1976:12:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "1976:23:79"
						},
						"variableNames": [
						  {
							"name": "value0",
							"nodeType": "YulIdentifier",
							"src": "1966:6:79"
						  }
						]
					  },
					  {
						"nodeType": "YulAssignment",
						"src": "2008:48:79",
						"value": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "headStart",
								  "nodeType": "YulIdentifier",
								  "src": "2041:9:79"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "2052:2:79",
								  "type": "",
								  "value": "32"
								}
							  ],
							  "functionName": {
								"name": "add",
								"nodeType": "YulIdentifier",
								"src": "2037:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "2037:18:79"
							}
						  ],
						  "functionName": {
							"name": "abi_decode_address",
							"nodeType": "YulIdentifier",
							"src": "2018:18:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "2018:38:79"
						},
						"variableNames": [
						  {
							"name": "value1",
							"nodeType": "YulIdentifier",
							"src": "2008:6:79"
						  }
						]
					  }
					]
				  },
				  "name": "abi_decode_tuple_t_bytes32t_address",
				  "nodeType": "YulFunctionDefinition",
				  "parameters": [
					{
					  "name": "headStart",
					  "nodeType": "YulTypedName",
					  "src": "1853:9:79",
					  "type": ""
					},
					{
					  "name": "dataEnd",
					  "nodeType": "YulTypedName",
					  "src": "1864:7:79",
					  "type": ""
					}
				  ],
				  "returnVariables": [
					{
					  "name": "value0",
					  "nodeType": "YulTypedName",
					  "src": "1876:6:79",
					  "type": ""
					},
					{
					  "name": "value1",
					  "nodeType": "YulTypedName",
					  "src": "1884:6:79",
					  "type": ""
					}
				  ],
				  "src": "1808:254:79"
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "2099:95:79",
					"statements": [
					  {
						"expression": {
						  "arguments": [
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "2116:1:79",
							  "type": "",
							  "value": "0"
							},
							{
							  "arguments": [
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "2123:3:79",
								  "type": "",
								  "value": "224"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "2128:10:79",
								  "type": "",
								  "value": "0x4e487b71"
								}
							  ],
							  "functionName": {
								"name": "shl",
								"nodeType": "YulIdentifier",
								"src": "2119:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "2119:20:79"
							}
						  ],
						  "functionName": {
							"name": "mstore",
							"nodeType": "YulIdentifier",
							"src": "2109:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "2109:31:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "2109:31:79"
					  },
					  {
						"expression": {
						  "arguments": [
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "2156:1:79",
							  "type": "",
							  "value": "4"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "2159:4:79",
							  "type": "",
							  "value": "0x41"
							}
						  ],
						  "functionName": {
							"name": "mstore",
							"nodeType": "YulIdentifier",
							"src": "2149:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "2149:15:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "2149:15:79"
					  },
					  {
						"expression": {
						  "arguments": [
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "2180:1:79",
							  "type": "",
							  "value": "0"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "2183:4:79",
							  "type": "",
							  "value": "0x24"
							}
						  ],
						  "functionName": {
							"name": "revert",
							"nodeType": "YulIdentifier",
							"src": "2173:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "2173:15:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "2173:15:79"
					  }
					]
				  },
				  "name": "panic_error_0x41",
				  "nodeType": "YulFunctionDefinition",
				  "src": "2067:127:79"
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "2296:903:79",
					"statements": [
					  {
						"body": {
						  "nodeType": "YulBlock",
						  "src": "2342:16:79",
						  "statements": [
							{
							  "expression": {
								"arguments": [
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "2351:1:79",
									"type": "",
									"value": "0"
								  },
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "2354:1:79",
									"type": "",
									"value": "0"
								  }
								],
								"functionName": {
								  "name": "revert",
								  "nodeType": "YulIdentifier",
								  "src": "2344:6:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "2344:12:79"
							  },
							  "nodeType": "YulExpressionStatement",
							  "src": "2344:12:79"
							}
						  ]
						},
						"condition": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "dataEnd",
								  "nodeType": "YulIdentifier",
								  "src": "2317:7:79"
								},
								{
								  "name": "headStart",
								  "nodeType": "YulIdentifier",
								  "src": "2326:9:79"
								}
							  ],
							  "functionName": {
								"name": "sub",
								"nodeType": "YulIdentifier",
								"src": "2313:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "2313:23:79"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "2338:2:79",
							  "type": "",
							  "value": "64"
							}
						  ],
						  "functionName": {
							"name": "slt",
							"nodeType": "YulIdentifier",
							"src": "2309:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "2309:32:79"
						},
						"nodeType": "YulIf",
						"src": "2306:52:79"
					  },
					  {
						"nodeType": "YulVariableDeclaration",
						"src": "2367:37:79",
						"value": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "2394:9:79"
							}
						  ],
						  "functionName": {
							"name": "calldataload",
							"nodeType": "YulIdentifier",
							"src": "2381:12:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "2381:23:79"
						},
						"variables": [
						  {
							"name": "offset",
							"nodeType": "YulTypedName",
							"src": "2371:6:79",
							"type": ""
						  }
						]
					  },
					  {
						"nodeType": "YulVariableDeclaration",
						"src": "2413:28:79",
						"value": {
						  "kind": "number",
						  "nodeType": "YulLiteral",
						  "src": "2423:18:79",
						  "type": "",
						  "value": "0xffffffffffffffff"
						},
						"variables": [
						  {
							"name": "_1",
							"nodeType": "YulTypedName",
							"src": "2417:2:79",
							"type": ""
						  }
						]
					  },
					  {
						"body": {
						  "nodeType": "YulBlock",
						  "src": "2468:16:79",
						  "statements": [
							{
							  "expression": {
								"arguments": [
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "2477:1:79",
									"type": "",
									"value": "0"
								  },
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "2480:1:79",
									"type": "",
									"value": "0"
								  }
								],
								"functionName": {
								  "name": "revert",
								  "nodeType": "YulIdentifier",
								  "src": "2470:6:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "2470:12:79"
							  },
							  "nodeType": "YulExpressionStatement",
							  "src": "2470:12:79"
							}
						  ]
						},
						"condition": {
						  "arguments": [
							{
							  "name": "offset",
							  "nodeType": "YulIdentifier",
							  "src": "2456:6:79"
							},
							{
							  "name": "_1",
							  "nodeType": "YulIdentifier",
							  "src": "2464:2:79"
							}
						  ],
						  "functionName": {
							"name": "gt",
							"nodeType": "YulIdentifier",
							"src": "2453:2:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "2453:14:79"
						},
						"nodeType": "YulIf",
						"src": "2450:34:79"
					  },
					  {
						"nodeType": "YulVariableDeclaration",
						"src": "2493:32:79",
						"value": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "2507:9:79"
							},
							{
							  "name": "offset",
							  "nodeType": "YulIdentifier",
							  "src": "2518:6:79"
							}
						  ],
						  "functionName": {
							"name": "add",
							"nodeType": "YulIdentifier",
							"src": "2503:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "2503:22:79"
						},
						"variables": [
						  {
							"name": "_2",
							"nodeType": "YulTypedName",
							"src": "2497:2:79",
							"type": ""
						  }
						]
					  },
					  {
						"body": {
						  "nodeType": "YulBlock",
						  "src": "2573:16:79",
						  "statements": [
							{
							  "expression": {
								"arguments": [
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "2582:1:79",
									"type": "",
									"value": "0"
								  },
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "2585:1:79",
									"type": "",
									"value": "0"
								  }
								],
								"functionName": {
								  "name": "revert",
								  "nodeType": "YulIdentifier",
								  "src": "2575:6:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "2575:12:79"
							  },
							  "nodeType": "YulExpressionStatement",
							  "src": "2575:12:79"
							}
						  ]
						},
						"condition": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "arguments": [
									{
									  "name": "_2",
									  "nodeType": "YulIdentifier",
									  "src": "2552:2:79"
									},
									{
									  "kind": "number",
									  "nodeType": "YulLiteral",
									  "src": "2556:4:79",
									  "type": "",
									  "value": "0x1f"
									}
								  ],
								  "functionName": {
									"name": "add",
									"nodeType": "YulIdentifier",
									"src": "2548:3:79"
								  },
								  "nodeType": "YulFunctionCall",
								  "src": "2548:13:79"
								},
								{
								  "name": "dataEnd",
								  "nodeType": "YulIdentifier",
								  "src": "2563:7:79"
								}
							  ],
							  "functionName": {
								"name": "slt",
								"nodeType": "YulIdentifier",
								"src": "2544:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "2544:27:79"
							}
						  ],
						  "functionName": {
							"name": "iszero",
							"nodeType": "YulIdentifier",
							"src": "2537:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "2537:35:79"
						},
						"nodeType": "YulIf",
						"src": "2534:55:79"
					  },
					  {
						"nodeType": "YulVariableDeclaration",
						"src": "2598:26:79",
						"value": {
						  "arguments": [
							{
							  "name": "_2",
							  "nodeType": "YulIdentifier",
							  "src": "2621:2:79"
							}
						  ],
						  "functionName": {
							"name": "calldataload",
							"nodeType": "YulIdentifier",
							"src": "2608:12:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "2608:16:79"
						},
						"variables": [
						  {
							"name": "_3",
							"nodeType": "YulTypedName",
							"src": "2602:2:79",
							"type": ""
						  }
						]
					  },
					  {
						"body": {
						  "nodeType": "YulBlock",
						  "src": "2647:22:79",
						  "statements": [
							{
							  "expression": {
								"arguments": [],
								"functionName": {
								  "name": "panic_error_0x41",
								  "nodeType": "YulIdentifier",
								  "src": "2649:16:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "2649:18:79"
							  },
							  "nodeType": "YulExpressionStatement",
							  "src": "2649:18:79"
							}
						  ]
						},
						"condition": {
						  "arguments": [
							{
							  "name": "_3",
							  "nodeType": "YulIdentifier",
							  "src": "2639:2:79"
							},
							{
							  "name": "_1",
							  "nodeType": "YulIdentifier",
							  "src": "2643:2:79"
							}
						  ],
						  "functionName": {
							"name": "gt",
							"nodeType": "YulIdentifier",
							"src": "2636:2:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "2636:10:79"
						},
						"nodeType": "YulIf",
						"src": "2633:36:79"
					  },
					  {
						"nodeType": "YulVariableDeclaration",
						"src": "2678:17:79",
						"value": {
						  "arguments": [
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "2692:2:79",
							  "type": "",
							  "value": "31"
							}
						  ],
						  "functionName": {
							"name": "not",
							"nodeType": "YulIdentifier",
							"src": "2688:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "2688:7:79"
						},
						"variables": [
						  {
							"name": "_4",
							"nodeType": "YulTypedName",
							"src": "2682:2:79",
							"type": ""
						  }
						]
					  },
					  {
						"nodeType": "YulVariableDeclaration",
						"src": "2704:23:79",
						"value": {
						  "arguments": [
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "2724:2:79",
							  "type": "",
							  "value": "64"
							}
						  ],
						  "functionName": {
							"name": "mload",
							"nodeType": "YulIdentifier",
							"src": "2718:5:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "2718:9:79"
						},
						"variables": [
						  {
							"name": "memPtr",
							"nodeType": "YulTypedName",
							"src": "2708:6:79",
							"type": ""
						  }
						]
					  },
					  {
						"nodeType": "YulVariableDeclaration",
						"src": "2736:71:79",
						"value": {
						  "arguments": [
							{
							  "name": "memPtr",
							  "nodeType": "YulIdentifier",
							  "src": "2758:6:79"
							},
							{
							  "arguments": [
								{
								  "arguments": [
									{
									  "arguments": [
										{
										  "arguments": [
											{
											  "name": "_3",
											  "nodeType": "YulIdentifier",
											  "src": "2782:2:79"
											},
											{
											  "kind": "number",
											  "nodeType": "YulLiteral",
											  "src": "2786:4:79",
											  "type": "",
											  "value": "0x1f"
											}
										  ],
										  "functionName": {
											"name": "add",
											"nodeType": "YulIdentifier",
											"src": "2778:3:79"
										  },
										  "nodeType": "YulFunctionCall",
										  "src": "2778:13:79"
										},
										{
										  "name": "_4",
										  "nodeType": "YulIdentifier",
										  "src": "2793:2:79"
										}
									  ],
									  "functionName": {
										"name": "and",
										"nodeType": "YulIdentifier",
										"src": "2774:3:79"
									  },
									  "nodeType": "YulFunctionCall",
									  "src": "2774:22:79"
									},
									{
									  "kind": "number",
									  "nodeType": "YulLiteral",
									  "src": "2798:2:79",
									  "type": "",
									  "value": "63"
									}
								  ],
								  "functionName": {
									"name": "add",
									"nodeType": "YulIdentifier",
									"src": "2770:3:79"
								  },
								  "nodeType": "YulFunctionCall",
								  "src": "2770:31:79"
								},
								{
								  "name": "_4",
								  "nodeType": "YulIdentifier",
								  "src": "2803:2:79"
								}
							  ],
							  "functionName": {
								"name": "and",
								"nodeType": "YulIdentifier",
								"src": "2766:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "2766:40:79"
							}
						  ],
						  "functionName": {
							"name": "add",
							"nodeType": "YulIdentifier",
							"src": "2754:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "2754:53:79"
						},
						"variables": [
						  {
							"name": "newFreePtr",
							"nodeType": "YulTypedName",
							"src": "2740:10:79",
							"type": ""
						  }
						]
					  },
					  {
						"body": {
						  "nodeType": "YulBlock",
						  "src": "2866:22:79",
						  "statements": [
							{
							  "expression": {
								"arguments": [],
								"functionName": {
								  "name": "panic_error_0x41",
								  "nodeType": "YulIdentifier",
								  "src": "2868:16:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "2868:18:79"
							  },
							  "nodeType": "YulExpressionStatement",
							  "src": "2868:18:79"
							}
						  ]
						},
						"condition": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "newFreePtr",
								  "nodeType": "YulIdentifier",
								  "src": "2825:10:79"
								},
								{
								  "name": "_1",
								  "nodeType": "YulIdentifier",
								  "src": "2837:2:79"
								}
							  ],
							  "functionName": {
								"name": "gt",
								"nodeType": "YulIdentifier",
								"src": "2822:2:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "2822:18:79"
							},
							{
							  "arguments": [
								{
								  "name": "newFreePtr",
								  "nodeType": "YulIdentifier",
								  "src": "2845:10:79"
								},
								{
								  "name": "memPtr",
								  "nodeType": "YulIdentifier",
								  "src": "2857:6:79"
								}
							  ],
							  "functionName": {
								"name": "lt",
								"nodeType": "YulIdentifier",
								"src": "2842:2:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "2842:22:79"
							}
						  ],
						  "functionName": {
							"name": "or",
							"nodeType": "YulIdentifier",
							"src": "2819:2:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "2819:46:79"
						},
						"nodeType": "YulIf",
						"src": "2816:72:79"
					  },
					  {
						"expression": {
						  "arguments": [
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "2904:2:79",
							  "type": "",
							  "value": "64"
							},
							{
							  "name": "newFreePtr",
							  "nodeType": "YulIdentifier",
							  "src": "2908:10:79"
							}
						  ],
						  "functionName": {
							"name": "mstore",
							"nodeType": "YulIdentifier",
							"src": "2897:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "2897:22:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "2897:22:79"
					  },
					  {
						"expression": {
						  "arguments": [
							{
							  "name": "memPtr",
							  "nodeType": "YulIdentifier",
							  "src": "2935:6:79"
							},
							{
							  "name": "_3",
							  "nodeType": "YulIdentifier",
							  "src": "2943:2:79"
							}
						  ],
						  "functionName": {
							"name": "mstore",
							"nodeType": "YulIdentifier",
							"src": "2928:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "2928:18:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "2928:18:79"
					  },
					  {
						"body": {
						  "nodeType": "YulBlock",
						  "src": "2994:16:79",
						  "statements": [
							{
							  "expression": {
								"arguments": [
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "3003:1:79",
									"type": "",
									"value": "0"
								  },
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "3006:1:79",
									"type": "",
									"value": "0"
								  }
								],
								"functionName": {
								  "name": "revert",
								  "nodeType": "YulIdentifier",
								  "src": "2996:6:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "2996:12:79"
							  },
							  "nodeType": "YulExpressionStatement",
							  "src": "2996:12:79"
							}
						  ]
						},
						"condition": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "arguments": [
									{
									  "name": "_2",
									  "nodeType": "YulIdentifier",
									  "src": "2969:2:79"
									},
									{
									  "name": "_3",
									  "nodeType": "YulIdentifier",
									  "src": "2973:2:79"
									}
								  ],
								  "functionName": {
									"name": "add",
									"nodeType": "YulIdentifier",
									"src": "2965:3:79"
								  },
								  "nodeType": "YulFunctionCall",
								  "src": "2965:11:79"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "2978:4:79",
								  "type": "",
								  "value": "0x20"
								}
							  ],
							  "functionName": {
								"name": "add",
								"nodeType": "YulIdentifier",
								"src": "2961:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "2961:22:79"
							},
							{
							  "name": "dataEnd",
							  "nodeType": "YulIdentifier",
							  "src": "2985:7:79"
							}
						  ],
						  "functionName": {
							"name": "gt",
							"nodeType": "YulIdentifier",
							"src": "2958:2:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "2958:35:79"
						},
						"nodeType": "YulIf",
						"src": "2955:55:79"
					  },
					  {
						"expression": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "memPtr",
								  "nodeType": "YulIdentifier",
								  "src": "3036:6:79"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "3044:4:79",
								  "type": "",
								  "value": "0x20"
								}
							  ],
							  "functionName": {
								"name": "add",
								"nodeType": "YulIdentifier",
								"src": "3032:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "3032:17:79"
							},
							{
							  "arguments": [
								{
								  "name": "_2",
								  "nodeType": "YulIdentifier",
								  "src": "3055:2:79"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "3059:4:79",
								  "type": "",
								  "value": "0x20"
								}
							  ],
							  "functionName": {
								"name": "add",
								"nodeType": "YulIdentifier",
								"src": "3051:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "3051:13:79"
							},
							{
							  "name": "_3",
							  "nodeType": "YulIdentifier",
							  "src": "3066:2:79"
							}
						  ],
						  "functionName": {
							"name": "calldatacopy",
							"nodeType": "YulIdentifier",
							"src": "3019:12:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "3019:50:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "3019:50:79"
					  },
					  {
						"expression": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "arguments": [
									{
									  "name": "memPtr",
									  "nodeType": "YulIdentifier",
									  "src": "3093:6:79"
									},
									{
									  "name": "_3",
									  "nodeType": "YulIdentifier",
									  "src": "3101:2:79"
									}
								  ],
								  "functionName": {
									"name": "add",
									"nodeType": "YulIdentifier",
									"src": "3089:3:79"
								  },
								  "nodeType": "YulFunctionCall",
								  "src": "3089:15:79"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "3106:4:79",
								  "type": "",
								  "value": "0x20"
								}
							  ],
							  "functionName": {
								"name": "add",
								"nodeType": "YulIdentifier",
								"src": "3085:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "3085:26:79"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "3113:1:79",
							  "type": "",
							  "value": "0"
							}
						  ],
						  "functionName": {
							"name": "mstore",
							"nodeType": "YulIdentifier",
							"src": "3078:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "3078:37:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "3078:37:79"
					  },
					  {
						"nodeType": "YulAssignment",
						"src": "3124:16:79",
						"value": {
						  "name": "memPtr",
						  "nodeType": "YulIdentifier",
						  "src": "3134:6:79"
						},
						"variableNames": [
						  {
							"name": "value0",
							"nodeType": "YulIdentifier",
							"src": "3124:6:79"
						  }
						]
					  },
					  {
						"nodeType": "YulAssignment",
						"src": "3149:44:79",
						"value": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "headStart",
								  "nodeType": "YulIdentifier",
								  "src": "3176:9:79"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "3187:4:79",
								  "type": "",
								  "value": "0x20"
								}
							  ],
							  "functionName": {
								"name": "add",
								"nodeType": "YulIdentifier",
								"src": "3172:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "3172:20:79"
							}
						  ],
						  "functionName": {
							"name": "calldataload",
							"nodeType": "YulIdentifier",
							"src": "3159:12:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "3159:34:79"
						},
						"variableNames": [
						  {
							"name": "value1",
							"nodeType": "YulIdentifier",
							"src": "3149:6:79"
						  }
						]
					  }
					]
				  },
				  "name": "abi_decode_tuple_t_string_memory_ptrt_uint256",
				  "nodeType": "YulFunctionDefinition",
				  "parameters": [
					{
					  "name": "headStart",
					  "nodeType": "YulTypedName",
					  "src": "2254:9:79",
					  "type": ""
					},
					{
					  "name": "dataEnd",
					  "nodeType": "YulTypedName",
					  "src": "2265:7:79",
					  "type": ""
					}
				  ],
				  "returnVariables": [
					{
					  "name": "value0",
					  "nodeType": "YulTypedName",
					  "src": "2277:6:79",
					  "type": ""
					},
					{
					  "name": "value1",
					  "nodeType": "YulTypedName",
					  "src": "2285:6:79",
					  "type": ""
					}
				  ],
				  "src": "2199:1000:79"
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "3303:103:79",
					"statements": [
					  {
						"nodeType": "YulAssignment",
						"src": "3313:26:79",
						"value": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "3325:9:79"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "3336:2:79",
							  "type": "",
							  "value": "32"
							}
						  ],
						  "functionName": {
							"name": "add",
							"nodeType": "YulIdentifier",
							"src": "3321:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "3321:18:79"
						},
						"variableNames": [
						  {
							"name": "tail",
							"nodeType": "YulIdentifier",
							"src": "3313:4:79"
						  }
						]
					  },
					  {
						"expression": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "3355:9:79"
							},
							{
							  "arguments": [
								{
								  "name": "value0",
								  "nodeType": "YulIdentifier",
								  "src": "3370:6:79"
								},
								{
								  "arguments": [
									{
									  "kind": "number",
									  "nodeType": "YulLiteral",
									  "src": "3382:3:79",
									  "type": "",
									  "value": "224"
									},
									{
									  "kind": "number",
									  "nodeType": "YulLiteral",
									  "src": "3387:10:79",
									  "type": "",
									  "value": "0xffffffff"
									}
								  ],
								  "functionName": {
									"name": "shl",
									"nodeType": "YulIdentifier",
									"src": "3378:3:79"
								  },
								  "nodeType": "YulFunctionCall",
								  "src": "3378:20:79"
								}
							  ],
							  "functionName": {
								"name": "and",
								"nodeType": "YulIdentifier",
								"src": "3366:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "3366:33:79"
							}
						  ],
						  "functionName": {
							"name": "mstore",
							"nodeType": "YulIdentifier",
							"src": "3348:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "3348:52:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "3348:52:79"
					  }
					]
				  },
				  "name": "abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed",
				  "nodeType": "YulFunctionDefinition",
				  "parameters": [
					{
					  "name": "headStart",
					  "nodeType": "YulTypedName",
					  "src": "3272:9:79",
					  "type": ""
					},
					{
					  "name": "value0",
					  "nodeType": "YulTypedName",
					  "src": "3283:6:79",
					  "type": ""
					}
				  ],
				  "returnVariables": [
					{
					  "name": "tail",
					  "nodeType": "YulTypedName",
					  "src": "3294:4:79",
					  "type": ""
					}
				  ],
				  "src": "3204:202:79"
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "3489:199:79",
					"statements": [
					  {
						"body": {
						  "nodeType": "YulBlock",
						  "src": "3535:16:79",
						  "statements": [
							{
							  "expression": {
								"arguments": [
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "3544:1:79",
									"type": "",
									"value": "0"
								  },
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "3547:1:79",
									"type": "",
									"value": "0"
								  }
								],
								"functionName": {
								  "name": "revert",
								  "nodeType": "YulIdentifier",
								  "src": "3537:6:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "3537:12:79"
							  },
							  "nodeType": "YulExpressionStatement",
							  "src": "3537:12:79"
							}
						  ]
						},
						"condition": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "dataEnd",
								  "nodeType": "YulIdentifier",
								  "src": "3510:7:79"
								},
								{
								  "name": "headStart",
								  "nodeType": "YulIdentifier",
								  "src": "3519:9:79"
								}
							  ],
							  "functionName": {
								"name": "sub",
								"nodeType": "YulIdentifier",
								"src": "3506:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "3506:23:79"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "3531:2:79",
							  "type": "",
							  "value": "32"
							}
						  ],
						  "functionName": {
							"name": "slt",
							"nodeType": "YulIdentifier",
							"src": "3502:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "3502:32:79"
						},
						"nodeType": "YulIf",
						"src": "3499:52:79"
					  },
					  {
						"nodeType": "YulVariableDeclaration",
						"src": "3560:29:79",
						"value": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "3579:9:79"
							}
						  ],
						  "functionName": {
							"name": "mload",
							"nodeType": "YulIdentifier",
							"src": "3573:5:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "3573:16:79"
						},
						"variables": [
						  {
							"name": "value",
							"nodeType": "YulTypedName",
							"src": "3564:5:79",
							"type": ""
						  }
						]
					  },
					  {
						"body": {
						  "nodeType": "YulBlock",
						  "src": "3642:16:79",
						  "statements": [
							{
							  "expression": {
								"arguments": [
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "3651:1:79",
									"type": "",
									"value": "0"
								  },
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "3654:1:79",
									"type": "",
									"value": "0"
								  }
								],
								"functionName": {
								  "name": "revert",
								  "nodeType": "YulIdentifier",
								  "src": "3644:6:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "3644:12:79"
							  },
							  "nodeType": "YulExpressionStatement",
							  "src": "3644:12:79"
							}
						  ]
						},
						"condition": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "value",
								  "nodeType": "YulIdentifier",
								  "src": "3611:5:79"
								},
								{
								  "arguments": [
									{
									  "arguments": [
										{
										  "name": "value",
										  "nodeType": "YulIdentifier",
										  "src": "3632:5:79"
										}
									  ],
									  "functionName": {
										"name": "iszero",
										"nodeType": "YulIdentifier",
										"src": "3625:6:79"
									  },
									  "nodeType": "YulFunctionCall",
									  "src": "3625:13:79"
									}
								  ],
								  "functionName": {
									"name": "iszero",
									"nodeType": "YulIdentifier",
									"src": "3618:6:79"
								  },
								  "nodeType": "YulFunctionCall",
								  "src": "3618:21:79"
								}
							  ],
							  "functionName": {
								"name": "eq",
								"nodeType": "YulIdentifier",
								"src": "3608:2:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "3608:32:79"
							}
						  ],
						  "functionName": {
							"name": "iszero",
							"nodeType": "YulIdentifier",
							"src": "3601:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "3601:40:79"
						},
						"nodeType": "YulIf",
						"src": "3598:60:79"
					  },
					  {
						"nodeType": "YulAssignment",
						"src": "3667:15:79",
						"value": {
						  "name": "value",
						  "nodeType": "YulIdentifier",
						  "src": "3677:5:79"
						},
						"variableNames": [
						  {
							"name": "value0",
							"nodeType": "YulIdentifier",
							"src": "3667:6:79"
						  }
						]
					  }
					]
				  },
				  "name": "abi_decode_tuple_t_bool_fromMemory",
				  "nodeType": "YulFunctionDefinition",
				  "parameters": [
					{
					  "name": "headStart",
					  "nodeType": "YulTypedName",
					  "src": "3455:9:79",
					  "type": ""
					},
					{
					  "name": "dataEnd",
					  "nodeType": "YulTypedName",
					  "src": "3466:7:79",
					  "type": ""
					}
				  ],
				  "returnVariables": [
					{
					  "name": "value0",
					  "nodeType": "YulTypedName",
					  "src": "3478:6:79",
					  "type": ""
					}
				  ],
				  "src": "3411:277:79"
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "3822:175:79",
					"statements": [
					  {
						"nodeType": "YulAssignment",
						"src": "3832:26:79",
						"value": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "3844:9:79"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "3855:2:79",
							  "type": "",
							  "value": "64"
							}
						  ],
						  "functionName": {
							"name": "add",
							"nodeType": "YulIdentifier",
							"src": "3840:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "3840:18:79"
						},
						"variableNames": [
						  {
							"name": "tail",
							"nodeType": "YulIdentifier",
							"src": "3832:4:79"
						  }
						]
					  },
					  {
						"nodeType": "YulVariableDeclaration",
						"src": "3867:29:79",
						"value": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "3885:3:79",
								  "type": "",
								  "value": "160"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "3890:1:79",
								  "type": "",
								  "value": "1"
								}
							  ],
							  "functionName": {
								"name": "shl",
								"nodeType": "YulIdentifier",
								"src": "3881:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "3881:11:79"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "3894:1:79",
							  "type": "",
							  "value": "1"
							}
						  ],
						  "functionName": {
							"name": "sub",
							"nodeType": "YulIdentifier",
							"src": "3877:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "3877:19:79"
						},
						"variables": [
						  {
							"name": "_1",
							"nodeType": "YulTypedName",
							"src": "3871:2:79",
							"type": ""
						  }
						]
					  },
					  {
						"expression": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "3912:9:79"
							},
							{
							  "arguments": [
								{
								  "name": "value0",
								  "nodeType": "YulIdentifier",
								  "src": "3927:6:79"
								},
								{
								  "name": "_1",
								  "nodeType": "YulIdentifier",
								  "src": "3935:2:79"
								}
							  ],
							  "functionName": {
								"name": "and",
								"nodeType": "YulIdentifier",
								"src": "3923:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "3923:15:79"
							}
						  ],
						  "functionName": {
							"name": "mstore",
							"nodeType": "YulIdentifier",
							"src": "3905:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "3905:34:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "3905:34:79"
					  },
					  {
						"expression": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "headStart",
								  "nodeType": "YulIdentifier",
								  "src": "3959:9:79"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "3970:2:79",
								  "type": "",
								  "value": "32"
								}
							  ],
							  "functionName": {
								"name": "add",
								"nodeType": "YulIdentifier",
								"src": "3955:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "3955:18:79"
							},
							{
							  "arguments": [
								{
								  "name": "value1",
								  "nodeType": "YulIdentifier",
								  "src": "3979:6:79"
								},
								{
								  "name": "_1",
								  "nodeType": "YulIdentifier",
								  "src": "3987:2:79"
								}
							  ],
							  "functionName": {
								"name": "and",
								"nodeType": "YulIdentifier",
								"src": "3975:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "3975:15:79"
							}
						  ],
						  "functionName": {
							"name": "mstore",
							"nodeType": "YulIdentifier",
							"src": "3948:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "3948:43:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "3948:43:79"
					  }
					]
				  },
				  "name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
				  "nodeType": "YulFunctionDefinition",
				  "parameters": [
					{
					  "name": "headStart",
					  "nodeType": "YulTypedName",
					  "src": "3783:9:79",
					  "type": ""
					},
					{
					  "name": "value1",
					  "nodeType": "YulTypedName",
					  "src": "3794:6:79",
					  "type": ""
					},
					{
					  "name": "value0",
					  "nodeType": "YulTypedName",
					  "src": "3802:6:79",
					  "type": ""
					}
				  ],
				  "returnVariables": [
					{
					  "name": "tail",
					  "nodeType": "YulTypedName",
					  "src": "3813:4:79",
					  "type": ""
					}
				  ],
				  "src": "3693:304:79"
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "4131:119:79",
					"statements": [
					  {
						"nodeType": "YulAssignment",
						"src": "4141:26:79",
						"value": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "4153:9:79"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "4164:2:79",
							  "type": "",
							  "value": "64"
							}
						  ],
						  "functionName": {
							"name": "add",
							"nodeType": "YulIdentifier",
							"src": "4149:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "4149:18:79"
						},
						"variableNames": [
						  {
							"name": "tail",
							"nodeType": "YulIdentifier",
							"src": "4141:4:79"
						  }
						]
					  },
					  {
						"expression": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "4183:9:79"
							},
							{
							  "name": "value0",
							  "nodeType": "YulIdentifier",
							  "src": "4194:6:79"
							}
						  ],
						  "functionName": {
							"name": "mstore",
							"nodeType": "YulIdentifier",
							"src": "4176:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "4176:25:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "4176:25:79"
					  },
					  {
						"expression": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "headStart",
								  "nodeType": "YulIdentifier",
								  "src": "4221:9:79"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "4232:2:79",
								  "type": "",
								  "value": "32"
								}
							  ],
							  "functionName": {
								"name": "add",
								"nodeType": "YulIdentifier",
								"src": "4217:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "4217:18:79"
							},
							{
							  "name": "value1",
							  "nodeType": "YulIdentifier",
							  "src": "4237:6:79"
							}
						  ],
						  "functionName": {
							"name": "mstore",
							"nodeType": "YulIdentifier",
							"src": "4210:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "4210:34:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "4210:34:79"
					  }
					]
				  },
				  "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
				  "nodeType": "YulFunctionDefinition",
				  "parameters": [
					{
					  "name": "headStart",
					  "nodeType": "YulTypedName",
					  "src": "4092:9:79",
					  "type": ""
					},
					{
					  "name": "value1",
					  "nodeType": "YulTypedName",
					  "src": "4103:6:79",
					  "type": ""
					},
					{
					  "name": "value0",
					  "nodeType": "YulTypedName",
					  "src": "4111:6:79",
					  "type": ""
					}
				  ],
				  "returnVariables": [
					{
					  "name": "tail",
					  "nodeType": "YulTypedName",
					  "src": "4122:4:79",
					  "type": ""
					}
				  ],
				  "src": "4002:248:79"
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "4429:237:79",
					"statements": [
					  {
						"expression": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "4446:9:79"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "4457:2:79",
							  "type": "",
							  "value": "32"
							}
						  ],
						  "functionName": {
							"name": "mstore",
							"nodeType": "YulIdentifier",
							"src": "4439:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "4439:21:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "4439:21:79"
					  },
					  {
						"expression": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "headStart",
								  "nodeType": "YulIdentifier",
								  "src": "4480:9:79"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "4491:2:79",
								  "type": "",
								  "value": "32"
								}
							  ],
							  "functionName": {
								"name": "add",
								"nodeType": "YulIdentifier",
								"src": "4476:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "4476:18:79"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "4496:2:79",
							  "type": "",
							  "value": "47"
							}
						  ],
						  "functionName": {
							"name": "mstore",
							"nodeType": "YulIdentifier",
							"src": "4469:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "4469:30:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "4469:30:79"
					  },
					  {
						"expression": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "headStart",
								  "nodeType": "YulIdentifier",
								  "src": "4519:9:79"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "4530:2:79",
								  "type": "",
								  "value": "64"
								}
							  ],
							  "functionName": {
								"name": "add",
								"nodeType": "YulIdentifier",
								"src": "4515:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "4515:18:79"
							},
							{
							  "hexValue": "416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365",
							  "kind": "string",
							  "nodeType": "YulLiteral",
							  "src": "4535:34:79",
							  "type": "",
							  "value": "AccessControl: can only renounce"
							}
						  ],
						  "functionName": {
							"name": "mstore",
							"nodeType": "YulIdentifier",
							"src": "4508:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "4508:62:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "4508:62:79"
					  },
					  {
						"expression": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "headStart",
								  "nodeType": "YulIdentifier",
								  "src": "4590:9:79"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "4601:2:79",
								  "type": "",
								  "value": "96"
								}
							  ],
							  "functionName": {
								"name": "add",
								"nodeType": "YulIdentifier",
								"src": "4586:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "4586:18:79"
							},
							{
							  "hexValue": "20726f6c657320666f722073656c66",
							  "kind": "string",
							  "nodeType": "YulLiteral",
							  "src": "4606:17:79",
							  "type": "",
							  "value": " roles for self"
							}
						  ],
						  "functionName": {
							"name": "mstore",
							"nodeType": "YulIdentifier",
							"src": "4579:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "4579:45:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "4579:45:79"
					  },
					  {
						"nodeType": "YulAssignment",
						"src": "4633:27:79",
						"value": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "4645:9:79"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "4656:3:79",
							  "type": "",
							  "value": "128"
							}
						  ],
						  "functionName": {
							"name": "add",
							"nodeType": "YulIdentifier",
							"src": "4641:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "4641:19:79"
						},
						"variableNames": [
						  {
							"name": "tail",
							"nodeType": "YulIdentifier",
							"src": "4633:4:79"
						  }
						]
					  }
					]
				  },
				  "name": "abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed",
				  "nodeType": "YulFunctionDefinition",
				  "parameters": [
					{
					  "name": "headStart",
					  "nodeType": "YulTypedName",
					  "src": "4406:9:79",
					  "type": ""
					}
				  ],
				  "returnVariables": [
					{
					  "name": "tail",
					  "nodeType": "YulTypedName",
					  "src": "4420:4:79",
					  "type": ""
					}
				  ],
				  "src": "4255:411:79"
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "4724:205:79",
					"statements": [
					  {
						"nodeType": "YulVariableDeclaration",
						"src": "4734:10:79",
						"value": {
						  "kind": "number",
						  "nodeType": "YulLiteral",
						  "src": "4743:1:79",
						  "type": "",
						  "value": "0"
						},
						"variables": [
						  {
							"name": "i",
							"nodeType": "YulTypedName",
							"src": "4738:1:79",
							"type": ""
						  }
						]
					  },
					  {
						"body": {
						  "nodeType": "YulBlock",
						  "src": "4803:63:79",
						  "statements": [
							{
							  "expression": {
								"arguments": [
								  {
									"arguments": [
									  {
										"name": "dst",
										"nodeType": "YulIdentifier",
										"src": "4828:3:79"
									  },
									  {
										"name": "i",
										"nodeType": "YulIdentifier",
										"src": "4833:1:79"
									  }
									],
									"functionName": {
									  "name": "add",
									  "nodeType": "YulIdentifier",
									  "src": "4824:3:79"
									},
									"nodeType": "YulFunctionCall",
									"src": "4824:11:79"
								  },
								  {
									"arguments": [
									  {
										"arguments": [
										  {
											"name": "src",
											"nodeType": "YulIdentifier",
											"src": "4847:3:79"
										  },
										  {
											"name": "i",
											"nodeType": "YulIdentifier",
											"src": "4852:1:79"
										  }
										],
										"functionName": {
										  "name": "add",
										  "nodeType": "YulIdentifier",
										  "src": "4843:3:79"
										},
										"nodeType": "YulFunctionCall",
										"src": "4843:11:79"
									  }
									],
									"functionName": {
									  "name": "mload",
									  "nodeType": "YulIdentifier",
									  "src": "4837:5:79"
									},
									"nodeType": "YulFunctionCall",
									"src": "4837:18:79"
								  }
								],
								"functionName": {
								  "name": "mstore",
								  "nodeType": "YulIdentifier",
								  "src": "4817:6:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "4817:39:79"
							  },
							  "nodeType": "YulExpressionStatement",
							  "src": "4817:39:79"
							}
						  ]
						},
						"condition": {
						  "arguments": [
							{
							  "name": "i",
							  "nodeType": "YulIdentifier",
							  "src": "4764:1:79"
							},
							{
							  "name": "length",
							  "nodeType": "YulIdentifier",
							  "src": "4767:6:79"
							}
						  ],
						  "functionName": {
							"name": "lt",
							"nodeType": "YulIdentifier",
							"src": "4761:2:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "4761:13:79"
						},
						"nodeType": "YulForLoop",
						"post": {
						  "nodeType": "YulBlock",
						  "src": "4775:19:79",
						  "statements": [
							{
							  "nodeType": "YulAssignment",
							  "src": "4777:15:79",
							  "value": {
								"arguments": [
								  {
									"name": "i",
									"nodeType": "YulIdentifier",
									"src": "4786:1:79"
								  },
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "4789:2:79",
									"type": "",
									"value": "32"
								  }
								],
								"functionName": {
								  "name": "add",
								  "nodeType": "YulIdentifier",
								  "src": "4782:3:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "4782:10:79"
							  },
							  "variableNames": [
								{
								  "name": "i",
								  "nodeType": "YulIdentifier",
								  "src": "4777:1:79"
								}
							  ]
							}
						  ]
						},
						"pre": {
						  "nodeType": "YulBlock",
						  "src": "4757:3:79",
						  "statements": []
						},
						"src": "4753:113:79"
					  },
					  {
						"body": {
						  "nodeType": "YulBlock",
						  "src": "4892:31:79",
						  "statements": [
							{
							  "expression": {
								"arguments": [
								  {
									"arguments": [
									  {
										"name": "dst",
										"nodeType": "YulIdentifier",
										"src": "4905:3:79"
									  },
									  {
										"name": "length",
										"nodeType": "YulIdentifier",
										"src": "4910:6:79"
									  }
									],
									"functionName": {
									  "name": "add",
									  "nodeType": "YulIdentifier",
									  "src": "4901:3:79"
									},
									"nodeType": "YulFunctionCall",
									"src": "4901:16:79"
								  },
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "4919:1:79",
									"type": "",
									"value": "0"
								  }
								],
								"functionName": {
								  "name": "mstore",
								  "nodeType": "YulIdentifier",
								  "src": "4894:6:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "4894:27:79"
							  },
							  "nodeType": "YulExpressionStatement",
							  "src": "4894:27:79"
							}
						  ]
						},
						"condition": {
						  "arguments": [
							{
							  "name": "i",
							  "nodeType": "YulIdentifier",
							  "src": "4881:1:79"
							},
							{
							  "name": "length",
							  "nodeType": "YulIdentifier",
							  "src": "4884:6:79"
							}
						  ],
						  "functionName": {
							"name": "gt",
							"nodeType": "YulIdentifier",
							"src": "4878:2:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "4878:13:79"
						},
						"nodeType": "YulIf",
						"src": "4875:48:79"
					  }
					]
				  },
				  "name": "copy_memory_to_memory",
				  "nodeType": "YulFunctionDefinition",
				  "parameters": [
					{
					  "name": "src",
					  "nodeType": "YulTypedName",
					  "src": "4702:3:79",
					  "type": ""
					},
					{
					  "name": "dst",
					  "nodeType": "YulTypedName",
					  "src": "4707:3:79",
					  "type": ""
					},
					{
					  "name": "length",
					  "nodeType": "YulTypedName",
					  "src": "4712:6:79",
					  "type": ""
					}
				  ],
				  "src": "4671:258:79"
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "4984:208:79",
					"statements": [
					  {
						"nodeType": "YulVariableDeclaration",
						"src": "4994:26:79",
						"value": {
						  "arguments": [
							{
							  "name": "value",
							  "nodeType": "YulIdentifier",
							  "src": "5014:5:79"
							}
						  ],
						  "functionName": {
							"name": "mload",
							"nodeType": "YulIdentifier",
							"src": "5008:5:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "5008:12:79"
						},
						"variables": [
						  {
							"name": "length",
							"nodeType": "YulTypedName",
							"src": "4998:6:79",
							"type": ""
						  }
						]
					  },
					  {
						"expression": {
						  "arguments": [
							{
							  "name": "pos",
							  "nodeType": "YulIdentifier",
							  "src": "5036:3:79"
							},
							{
							  "name": "length",
							  "nodeType": "YulIdentifier",
							  "src": "5041:6:79"
							}
						  ],
						  "functionName": {
							"name": "mstore",
							"nodeType": "YulIdentifier",
							"src": "5029:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "5029:19:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "5029:19:79"
					  },
					  {
						"expression": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "value",
								  "nodeType": "YulIdentifier",
								  "src": "5083:5:79"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "5090:4:79",
								  "type": "",
								  "value": "0x20"
								}
							  ],
							  "functionName": {
								"name": "add",
								"nodeType": "YulIdentifier",
								"src": "5079:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "5079:16:79"
							},
							{
							  "arguments": [
								{
								  "name": "pos",
								  "nodeType": "YulIdentifier",
								  "src": "5101:3:79"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "5106:4:79",
								  "type": "",
								  "value": "0x20"
								}
							  ],
							  "functionName": {
								"name": "add",
								"nodeType": "YulIdentifier",
								"src": "5097:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "5097:14:79"
							},
							{
							  "name": "length",
							  "nodeType": "YulIdentifier",
							  "src": "5113:6:79"
							}
						  ],
						  "functionName": {
							"name": "copy_memory_to_memory",
							"nodeType": "YulIdentifier",
							"src": "5057:21:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "5057:63:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "5057:63:79"
					  },
					  {
						"nodeType": "YulAssignment",
						"src": "5129:57:79",
						"value": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "pos",
								  "nodeType": "YulIdentifier",
								  "src": "5144:3:79"
								},
								{
								  "arguments": [
									{
									  "arguments": [
										{
										  "name": "length",
										  "nodeType": "YulIdentifier",
										  "src": "5157:6:79"
										},
										{
										  "kind": "number",
										  "nodeType": "YulLiteral",
										  "src": "5165:2:79",
										  "type": "",
										  "value": "31"
										}
									  ],
									  "functionName": {
										"name": "add",
										"nodeType": "YulIdentifier",
										"src": "5153:3:79"
									  },
									  "nodeType": "YulFunctionCall",
									  "src": "5153:15:79"
									},
									{
									  "arguments": [
										{
										  "kind": "number",
										  "nodeType": "YulLiteral",
										  "src": "5174:2:79",
										  "type": "",
										  "value": "31"
										}
									  ],
									  "functionName": {
										"name": "not",
										"nodeType": "YulIdentifier",
										"src": "5170:3:79"
									  },
									  "nodeType": "YulFunctionCall",
									  "src": "5170:7:79"
									}
								  ],
								  "functionName": {
									"name": "and",
									"nodeType": "YulIdentifier",
									"src": "5149:3:79"
								  },
								  "nodeType": "YulFunctionCall",
								  "src": "5149:29:79"
								}
							  ],
							  "functionName": {
								"name": "add",
								"nodeType": "YulIdentifier",
								"src": "5140:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "5140:39:79"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "5181:4:79",
							  "type": "",
							  "value": "0x20"
							}
						  ],
						  "functionName": {
							"name": "add",
							"nodeType": "YulIdentifier",
							"src": "5136:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "5136:50:79"
						},
						"variableNames": [
						  {
							"name": "end",
							"nodeType": "YulIdentifier",
							"src": "5129:3:79"
						  }
						]
					  }
					]
				  },
				  "name": "abi_encode_string",
				  "nodeType": "YulFunctionDefinition",
				  "parameters": [
					{
					  "name": "value",
					  "nodeType": "YulTypedName",
					  "src": "4961:5:79",
					  "type": ""
					},
					{
					  "name": "pos",
					  "nodeType": "YulTypedName",
					  "src": "4968:3:79",
					  "type": ""
					}
				  ],
				  "returnVariables": [
					{
					  "name": "end",
					  "nodeType": "YulTypedName",
					  "src": "4976:3:79",
					  "type": ""
					}
				  ],
				  "src": "4934:258:79"
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "5466:739:79",
					"statements": [
					  {
						"expression": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "5483:9:79"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "5494:3:79",
							  "type": "",
							  "value": "224"
							}
						  ],
						  "functionName": {
							"name": "mstore",
							"nodeType": "YulIdentifier",
							"src": "5476:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "5476:22:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "5476:22:79"
					  },
					  {
						"nodeType": "YulAssignment",
						"src": "5507:54:79",
						"value": {
						  "arguments": [
							{
							  "name": "value0",
							  "nodeType": "YulIdentifier",
							  "src": "5533:6:79"
							},
							{
							  "arguments": [
								{
								  "name": "headStart",
								  "nodeType": "YulIdentifier",
								  "src": "5545:9:79"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "5556:3:79",
								  "type": "",
								  "value": "224"
								}
							  ],
							  "functionName": {
								"name": "add",
								"nodeType": "YulIdentifier",
								"src": "5541:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "5541:19:79"
							}
						  ],
						  "functionName": {
							"name": "abi_encode_string",
							"nodeType": "YulIdentifier",
							"src": "5515:17:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "5515:46:79"
						},
						"variableNames": [
						  {
							"name": "tail",
							"nodeType": "YulIdentifier",
							"src": "5507:4:79"
						  }
						]
					  },
					  {
						"nodeType": "YulVariableDeclaration",
						"src": "5570:12:79",
						"value": {
						  "kind": "number",
						  "nodeType": "YulLiteral",
						  "src": "5580:2:79",
						  "type": "",
						  "value": "32"
						},
						"variables": [
						  {
							"name": "_1",
							"nodeType": "YulTypedName",
							"src": "5574:2:79",
							"type": ""
						  }
						]
					  },
					  {
						"nodeType": "YulVariableDeclaration",
						"src": "5591:29:79",
						"value": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "5606:9:79"
							},
							{
							  "name": "_1",
							  "nodeType": "YulIdentifier",
							  "src": "5617:2:79"
							}
						  ],
						  "functionName": {
							"name": "add",
							"nodeType": "YulIdentifier",
							"src": "5602:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "5602:18:79"
						},
						"variables": [
						  {
							"name": "pos",
							"nodeType": "YulTypedName",
							"src": "5595:3:79",
							"type": ""
						  }
						]
					  },
					  {
						"nodeType": "YulAssignment",
						"src": "5629:10:79",
						"value": {
						  "name": "pos",
						  "nodeType": "YulIdentifier",
						  "src": "5636:3:79"
						},
						"variableNames": [
						  {
							"name": "pos",
							"nodeType": "YulIdentifier",
							"src": "5629:3:79"
						  }
						]
					  },
					  {
						"nodeType": "YulVariableDeclaration",
						"src": "5648:20:79",
						"value": {
						  "name": "value1",
						  "nodeType": "YulIdentifier",
						  "src": "5662:6:79"
						},
						"variables": [
						  {
							"name": "srcPtr",
							"nodeType": "YulTypedName",
							"src": "5652:6:79",
							"type": ""
						  }
						]
					  },
					  {
						"nodeType": "YulVariableDeclaration",
						"src": "5677:10:79",
						"value": {
						  "kind": "number",
						  "nodeType": "YulLiteral",
						  "src": "5686:1:79",
						  "type": "",
						  "value": "0"
						},
						"variables": [
						  {
							"name": "i",
							"nodeType": "YulTypedName",
							"src": "5681:1:79",
							"type": ""
						  }
						]
					  },
					  {
						"body": {
						  "nodeType": "YulBlock",
						  "src": "5743:120:79",
						  "statements": [
							{
							  "expression": {
								"arguments": [
								  {
									"name": "pos",
									"nodeType": "YulIdentifier",
									"src": "5764:3:79"
								  },
								  {
									"arguments": [
									  {
										"name": "srcPtr",
										"nodeType": "YulIdentifier",
										"src": "5775:6:79"
									  }
									],
									"functionName": {
									  "name": "mload",
									  "nodeType": "YulIdentifier",
									  "src": "5769:5:79"
									},
									"nodeType": "YulFunctionCall",
									"src": "5769:13:79"
								  }
								],
								"functionName": {
								  "name": "mstore",
								  "nodeType": "YulIdentifier",
								  "src": "5757:6:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "5757:26:79"
							  },
							  "nodeType": "YulExpressionStatement",
							  "src": "5757:26:79"
							},
							{
							  "nodeType": "YulAssignment",
							  "src": "5796:19:79",
							  "value": {
								"arguments": [
								  {
									"name": "pos",
									"nodeType": "YulIdentifier",
									"src": "5807:3:79"
								  },
								  {
									"name": "_1",
									"nodeType": "YulIdentifier",
									"src": "5812:2:79"
								  }
								],
								"functionName": {
								  "name": "add",
								  "nodeType": "YulIdentifier",
								  "src": "5803:3:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "5803:12:79"
							  },
							  "variableNames": [
								{
								  "name": "pos",
								  "nodeType": "YulIdentifier",
								  "src": "5796:3:79"
								}
							  ]
							},
							{
							  "nodeType": "YulAssignment",
							  "src": "5828:25:79",
							  "value": {
								"arguments": [
								  {
									"name": "srcPtr",
									"nodeType": "YulIdentifier",
									"src": "5842:6:79"
								  },
								  {
									"name": "_1",
									"nodeType": "YulIdentifier",
									"src": "5850:2:79"
								  }
								],
								"functionName": {
								  "name": "add",
								  "nodeType": "YulIdentifier",
								  "src": "5838:3:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "5838:15:79"
							  },
							  "variableNames": [
								{
								  "name": "srcPtr",
								  "nodeType": "YulIdentifier",
								  "src": "5828:6:79"
								}
							  ]
							}
						  ]
						},
						"condition": {
						  "arguments": [
							{
							  "name": "i",
							  "nodeType": "YulIdentifier",
							  "src": "5707:1:79"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "5710:4:79",
							  "type": "",
							  "value": "0x03"
							}
						  ],
						  "functionName": {
							"name": "lt",
							"nodeType": "YulIdentifier",
							"src": "5704:2:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "5704:11:79"
						},
						"nodeType": "YulForLoop",
						"post": {
						  "nodeType": "YulBlock",
						  "src": "5716:18:79",
						  "statements": [
							{
							  "nodeType": "YulAssignment",
							  "src": "5718:14:79",
							  "value": {
								"arguments": [
								  {
									"name": "i",
									"nodeType": "YulIdentifier",
									"src": "5727:1:79"
								  },
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "5730:1:79",
									"type": "",
									"value": "1"
								  }
								],
								"functionName": {
								  "name": "add",
								  "nodeType": "YulIdentifier",
								  "src": "5723:3:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "5723:9:79"
							  },
							  "variableNames": [
								{
								  "name": "i",
								  "nodeType": "YulIdentifier",
								  "src": "5718:1:79"
								}
							  ]
							}
						  ]
						},
						"pre": {
						  "nodeType": "YulBlock",
						  "src": "5700:3:79",
						  "statements": []
						},
						"src": "5696:167:79"
					  },
					  {
						"nodeType": "YulVariableDeclaration",
						"src": "5872:32:79",
						"value": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "5889:9:79"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "5900:3:79",
							  "type": "",
							  "value": "128"
							}
						  ],
						  "functionName": {
							"name": "add",
							"nodeType": "YulIdentifier",
							"src": "5885:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "5885:19:79"
						},
						"variables": [
						  {
							"name": "pos_1",
							"nodeType": "YulTypedName",
							"src": "5876:5:79",
							"type": ""
						  }
						]
					  },
					  {
						"nodeType": "YulAssignment",
						"src": "5913:14:79",
						"value": {
						  "name": "pos_1",
						  "nodeType": "YulIdentifier",
						  "src": "5922:5:79"
						},
						"variableNames": [
						  {
							"name": "pos_1",
							"nodeType": "YulIdentifier",
							"src": "5913:5:79"
						  }
						]
					  },
					  {
						"nodeType": "YulVariableDeclaration",
						"src": "5936:22:79",
						"value": {
						  "name": "value2",
						  "nodeType": "YulIdentifier",
						  "src": "5952:6:79"
						},
						"variables": [
						  {
							"name": "srcPtr_1",
							"nodeType": "YulTypedName",
							"src": "5940:8:79",
							"type": ""
						  }
						]
					  },
					  {
						"nodeType": "YulVariableDeclaration",
						"src": "5967:12:79",
						"value": {
						  "kind": "number",
						  "nodeType": "YulLiteral",
						  "src": "5978:1:79",
						  "type": "",
						  "value": "0"
						},
						"variables": [
						  {
							"name": "i_1",
							"nodeType": "YulTypedName",
							"src": "5971:3:79",
							"type": ""
						  }
						]
					  },
					  {
						"body": {
						  "nodeType": "YulBlock",
						  "src": "6041:158:79",
						  "statements": [
							{
							  "expression": {
								"arguments": [
								  {
									"name": "pos_1",
									"nodeType": "YulIdentifier",
									"src": "6062:5:79"
								  },
								  {
									"arguments": [
									  {
										"arguments": [
										  {
											"name": "srcPtr_1",
											"nodeType": "YulIdentifier",
											"src": "6079:8:79"
										  }
										],
										"functionName": {
										  "name": "mload",
										  "nodeType": "YulIdentifier",
										  "src": "6073:5:79"
										},
										"nodeType": "YulFunctionCall",
										"src": "6073:15:79"
									  },
									  {
										"arguments": [
										  {
											"arguments": [
											  {
												"kind": "number",
												"nodeType": "YulLiteral",
												"src": "6098:3:79",
												"type": "",
												"value": "160"
											  },
											  {
												"kind": "number",
												"nodeType": "YulLiteral",
												"src": "6103:1:79",
												"type": "",
												"value": "1"
											  }
											],
											"functionName": {
											  "name": "shl",
											  "nodeType": "YulIdentifier",
											  "src": "6094:3:79"
											},
											"nodeType": "YulFunctionCall",
											"src": "6094:11:79"
										  },
										  {
											"kind": "number",
											"nodeType": "YulLiteral",
											"src": "6107:1:79",
											"type": "",
											"value": "1"
										  }
										],
										"functionName": {
										  "name": "sub",
										  "nodeType": "YulIdentifier",
										  "src": "6090:3:79"
										},
										"nodeType": "YulFunctionCall",
										"src": "6090:19:79"
									  }
									],
									"functionName": {
									  "name": "and",
									  "nodeType": "YulIdentifier",
									  "src": "6069:3:79"
									},
									"nodeType": "YulFunctionCall",
									"src": "6069:41:79"
								  }
								],
								"functionName": {
								  "name": "mstore",
								  "nodeType": "YulIdentifier",
								  "src": "6055:6:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "6055:56:79"
							  },
							  "nodeType": "YulExpressionStatement",
							  "src": "6055:56:79"
							},
							{
							  "nodeType": "YulAssignment",
							  "src": "6124:23:79",
							  "value": {
								"arguments": [
								  {
									"name": "pos_1",
									"nodeType": "YulIdentifier",
									"src": "6137:5:79"
								  },
								  {
									"name": "_1",
									"nodeType": "YulIdentifier",
									"src": "6144:2:79"
								  }
								],
								"functionName": {
								  "name": "add",
								  "nodeType": "YulIdentifier",
								  "src": "6133:3:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "6133:14:79"
							  },
							  "variableNames": [
								{
								  "name": "pos_1",
								  "nodeType": "YulIdentifier",
								  "src": "6124:5:79"
								}
							  ]
							},
							{
							  "nodeType": "YulAssignment",
							  "src": "6160:29:79",
							  "value": {
								"arguments": [
								  {
									"name": "srcPtr_1",
									"nodeType": "YulIdentifier",
									"src": "6176:8:79"
								  },
								  {
									"name": "_1",
									"nodeType": "YulIdentifier",
									"src": "6186:2:79"
								  }
								],
								"functionName": {
								  "name": "add",
								  "nodeType": "YulIdentifier",
								  "src": "6172:3:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "6172:17:79"
							  },
							  "variableNames": [
								{
								  "name": "srcPtr_1",
								  "nodeType": "YulIdentifier",
								  "src": "6160:8:79"
								}
							  ]
							}
						  ]
						},
						"condition": {
						  "arguments": [
							{
							  "name": "i_1",
							  "nodeType": "YulIdentifier",
							  "src": "5999:3:79"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "6004:4:79",
							  "type": "",
							  "value": "0x03"
							}
						  ],
						  "functionName": {
							"name": "lt",
							"nodeType": "YulIdentifier",
							"src": "5996:2:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "5996:13:79"
						},
						"nodeType": "YulForLoop",
						"post": {
						  "nodeType": "YulBlock",
						  "src": "6010:22:79",
						  "statements": [
							{
							  "nodeType": "YulAssignment",
							  "src": "6012:18:79",
							  "value": {
								"arguments": [
								  {
									"name": "i_1",
									"nodeType": "YulIdentifier",
									"src": "6023:3:79"
								  },
								  {
									"kind": "number",
									"nodeType": "YulLiteral",
									"src": "6028:1:79",
									"type": "",
									"value": "1"
								  }
								],
								"functionName": {
								  "name": "add",
								  "nodeType": "YulIdentifier",
								  "src": "6019:3:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "6019:11:79"
							  },
							  "variableNames": [
								{
								  "name": "i_1",
								  "nodeType": "YulIdentifier",
								  "src": "6012:3:79"
								}
							  ]
							}
						  ]
						},
						"pre": {
						  "nodeType": "YulBlock",
						  "src": "5992:3:79",
						  "statements": []
						},
						"src": "5988:211:79"
					  }
					]
				  },
				  "name": "abi_encode_tuple_t_string_memory_ptr_t_array$_t_uint256_$3_memory_ptr_t_array$_t_address_$3_memory_ptr__to_t_string_memory_ptr_t_array$_t_uint256_$3_memory_ptr_t_array$_t_address_$3_memory_ptr__fromStack_reversed",
				  "nodeType": "YulFunctionDefinition",
				  "parameters": [
					{
					  "name": "headStart",
					  "nodeType": "YulTypedName",
					  "src": "5419:9:79",
					  "type": ""
					},
					{
					  "name": "value2",
					  "nodeType": "YulTypedName",
					  "src": "5430:6:79",
					  "type": ""
					},
					{
					  "name": "value1",
					  "nodeType": "YulTypedName",
					  "src": "5438:6:79",
					  "type": ""
					},
					{
					  "name": "value0",
					  "nodeType": "YulTypedName",
					  "src": "5446:6:79",
					  "type": ""
					}
				  ],
				  "returnVariables": [
					{
					  "name": "tail",
					  "nodeType": "YulTypedName",
					  "src": "5457:4:79",
					  "type": ""
					}
				  ],
				  "src": "5197:1008:79"
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "6349:137:79",
					"statements": [
					  {
						"nodeType": "YulVariableDeclaration",
						"src": "6359:27:79",
						"value": {
						  "arguments": [
							{
							  "name": "value0",
							  "nodeType": "YulIdentifier",
							  "src": "6379:6:79"
							}
						  ],
						  "functionName": {
							"name": "mload",
							"nodeType": "YulIdentifier",
							"src": "6373:5:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "6373:13:79"
						},
						"variables": [
						  {
							"name": "length",
							"nodeType": "YulTypedName",
							"src": "6363:6:79",
							"type": ""
						  }
						]
					  },
					  {
						"expression": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "value0",
								  "nodeType": "YulIdentifier",
								  "src": "6421:6:79"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "6429:4:79",
								  "type": "",
								  "value": "0x20"
								}
							  ],
							  "functionName": {
								"name": "add",
								"nodeType": "YulIdentifier",
								"src": "6417:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "6417:17:79"
							},
							{
							  "name": "pos",
							  "nodeType": "YulIdentifier",
							  "src": "6436:3:79"
							},
							{
							  "name": "length",
							  "nodeType": "YulIdentifier",
							  "src": "6441:6:79"
							}
						  ],
						  "functionName": {
							"name": "copy_memory_to_memory",
							"nodeType": "YulIdentifier",
							"src": "6395:21:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "6395:53:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "6395:53:79"
					  },
					  {
						"nodeType": "YulAssignment",
						"src": "6457:23:79",
						"value": {
						  "arguments": [
							{
							  "name": "pos",
							  "nodeType": "YulIdentifier",
							  "src": "6468:3:79"
							},
							{
							  "name": "length",
							  "nodeType": "YulIdentifier",
							  "src": "6473:6:79"
							}
						  ],
						  "functionName": {
							"name": "add",
							"nodeType": "YulIdentifier",
							"src": "6464:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "6464:16:79"
						},
						"variableNames": [
						  {
							"name": "end",
							"nodeType": "YulIdentifier",
							"src": "6457:3:79"
						  }
						]
					  }
					]
				  },
				  "name": "abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
				  "nodeType": "YulFunctionDefinition",
				  "parameters": [
					{
					  "name": "pos",
					  "nodeType": "YulTypedName",
					  "src": "6325:3:79",
					  "type": ""
					},
					{
					  "name": "value0",
					  "nodeType": "YulTypedName",
					  "src": "6330:6:79",
					  "type": ""
					}
				  ],
				  "returnVariables": [
					{
					  "name": "end",
					  "nodeType": "YulTypedName",
					  "src": "6341:3:79",
					  "type": ""
					}
				  ],
				  "src": "6210:276:79"
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "6880:397:79",
					"statements": [
					  {
						"expression": {
						  "arguments": [
							{
							  "name": "pos",
							  "nodeType": "YulIdentifier",
							  "src": "6897:3:79"
							},
							{
							  "hexValue": "416363657373436f6e74726f6c3a206163636f756e7420",
							  "kind": "string",
							  "nodeType": "YulLiteral",
							  "src": "6902:25:79",
							  "type": "",
							  "value": "AccessControl: account "
							}
						  ],
						  "functionName": {
							"name": "mstore",
							"nodeType": "YulIdentifier",
							"src": "6890:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "6890:38:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "6890:38:79"
					  },
					  {
						"nodeType": "YulVariableDeclaration",
						"src": "6937:27:79",
						"value": {
						  "arguments": [
							{
							  "name": "value0",
							  "nodeType": "YulIdentifier",
							  "src": "6957:6:79"
							}
						  ],
						  "functionName": {
							"name": "mload",
							"nodeType": "YulIdentifier",
							"src": "6951:5:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "6951:13:79"
						},
						"variables": [
						  {
							"name": "length",
							"nodeType": "YulTypedName",
							"src": "6941:6:79",
							"type": ""
						  }
						]
					  },
					  {
						"expression": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "value0",
								  "nodeType": "YulIdentifier",
								  "src": "6999:6:79"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "7007:4:79",
								  "type": "",
								  "value": "0x20"
								}
							  ],
							  "functionName": {
								"name": "add",
								"nodeType": "YulIdentifier",
								"src": "6995:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "6995:17:79"
							},
							{
							  "arguments": [
								{
								  "name": "pos",
								  "nodeType": "YulIdentifier",
								  "src": "7018:3:79"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "7023:2:79",
								  "type": "",
								  "value": "23"
								}
							  ],
							  "functionName": {
								"name": "add",
								"nodeType": "YulIdentifier",
								"src": "7014:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "7014:12:79"
							},
							{
							  "name": "length",
							  "nodeType": "YulIdentifier",
							  "src": "7028:6:79"
							}
						  ],
						  "functionName": {
							"name": "copy_memory_to_memory",
							"nodeType": "YulIdentifier",
							"src": "6973:21:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "6973:62:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "6973:62:79"
					  },
					  {
						"nodeType": "YulVariableDeclaration",
						"src": "7044:26:79",
						"value": {
						  "arguments": [
							{
							  "name": "pos",
							  "nodeType": "YulIdentifier",
							  "src": "7058:3:79"
							},
							{
							  "name": "length",
							  "nodeType": "YulIdentifier",
							  "src": "7063:6:79"
							}
						  ],
						  "functionName": {
							"name": "add",
							"nodeType": "YulIdentifier",
							"src": "7054:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "7054:16:79"
						},
						"variables": [
						  {
							"name": "_1",
							"nodeType": "YulTypedName",
							"src": "7048:2:79",
							"type": ""
						  }
						]
					  },
					  {
						"expression": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "_1",
								  "nodeType": "YulIdentifier",
								  "src": "7090:2:79"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "7094:2:79",
								  "type": "",
								  "value": "23"
								}
							  ],
							  "functionName": {
								"name": "add",
								"nodeType": "YulIdentifier",
								"src": "7086:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "7086:11:79"
							},
							{
							  "hexValue": "206973206d697373696e6720726f6c6520",
							  "kind": "string",
							  "nodeType": "YulLiteral",
							  "src": "7099:19:79",
							  "type": "",
							  "value": " is missing role "
							}
						  ],
						  "functionName": {
							"name": "mstore",
							"nodeType": "YulIdentifier",
							"src": "7079:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "7079:40:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "7079:40:79"
					  },
					  {
						"nodeType": "YulVariableDeclaration",
						"src": "7128:29:79",
						"value": {
						  "arguments": [
							{
							  "name": "value1",
							  "nodeType": "YulIdentifier",
							  "src": "7150:6:79"
							}
						  ],
						  "functionName": {
							"name": "mload",
							"nodeType": "YulIdentifier",
							"src": "7144:5:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "7144:13:79"
						},
						"variables": [
						  {
							"name": "length_1",
							"nodeType": "YulTypedName",
							"src": "7132:8:79",
							"type": ""
						  }
						]
					  },
					  {
						"expression": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "value1",
								  "nodeType": "YulIdentifier",
								  "src": "7192:6:79"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "7200:4:79",
								  "type": "",
								  "value": "0x20"
								}
							  ],
							  "functionName": {
								"name": "add",
								"nodeType": "YulIdentifier",
								"src": "7188:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "7188:17:79"
							},
							{
							  "arguments": [
								{
								  "name": "_1",
								  "nodeType": "YulIdentifier",
								  "src": "7211:2:79"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "7215:2:79",
								  "type": "",
								  "value": "40"
								}
							  ],
							  "functionName": {
								"name": "add",
								"nodeType": "YulIdentifier",
								"src": "7207:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "7207:11:79"
							},
							{
							  "name": "length_1",
							  "nodeType": "YulIdentifier",
							  "src": "7220:8:79"
							}
						  ],
						  "functionName": {
							"name": "copy_memory_to_memory",
							"nodeType": "YulIdentifier",
							"src": "7166:21:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "7166:63:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "7166:63:79"
					  },
					  {
						"nodeType": "YulAssignment",
						"src": "7238:33:79",
						"value": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "_1",
								  "nodeType": "YulIdentifier",
								  "src": "7253:2:79"
								},
								{
								  "name": "length_1",
								  "nodeType": "YulIdentifier",
								  "src": "7257:8:79"
								}
							  ],
							  "functionName": {
								"name": "add",
								"nodeType": "YulIdentifier",
								"src": "7249:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "7249:17:79"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "7268:2:79",
							  "type": "",
							  "value": "40"
							}
						  ],
						  "functionName": {
							"name": "add",
							"nodeType": "YulIdentifier",
							"src": "7245:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "7245:26:79"
						},
						"variableNames": [
						  {
							"name": "end",
							"nodeType": "YulIdentifier",
							"src": "7238:3:79"
						  }
						]
					  }
					]
				  },
				  "name": "abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
				  "nodeType": "YulFunctionDefinition",
				  "parameters": [
					{
					  "name": "pos",
					  "nodeType": "YulTypedName",
					  "src": "6848:3:79",
					  "type": ""
					},
					{
					  "name": "value1",
					  "nodeType": "YulTypedName",
					  "src": "6853:6:79",
					  "type": ""
					},
					{
					  "name": "value0",
					  "nodeType": "YulTypedName",
					  "src": "6861:6:79",
					  "type": ""
					}
				  ],
				  "returnVariables": [
					{
					  "name": "end",
					  "nodeType": "YulTypedName",
					  "src": "6872:3:79",
					  "type": ""
					}
				  ],
				  "src": "6491:786:79"
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "7403:99:79",
					"statements": [
					  {
						"expression": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "7420:9:79"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "7431:2:79",
							  "type": "",
							  "value": "32"
							}
						  ],
						  "functionName": {
							"name": "mstore",
							"nodeType": "YulIdentifier",
							"src": "7413:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "7413:21:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "7413:21:79"
					  },
					  {
						"nodeType": "YulAssignment",
						"src": "7443:53:79",
						"value": {
						  "arguments": [
							{
							  "name": "value0",
							  "nodeType": "YulIdentifier",
							  "src": "7469:6:79"
							},
							{
							  "arguments": [
								{
								  "name": "headStart",
								  "nodeType": "YulIdentifier",
								  "src": "7481:9:79"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "7492:2:79",
								  "type": "",
								  "value": "32"
								}
							  ],
							  "functionName": {
								"name": "add",
								"nodeType": "YulIdentifier",
								"src": "7477:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "7477:18:79"
							}
						  ],
						  "functionName": {
							"name": "abi_encode_string",
							"nodeType": "YulIdentifier",
							"src": "7451:17:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "7451:45:79"
						},
						"variableNames": [
						  {
							"name": "tail",
							"nodeType": "YulIdentifier",
							"src": "7443:4:79"
						  }
						]
					  }
					]
				  },
				  "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
				  "nodeType": "YulFunctionDefinition",
				  "parameters": [
					{
					  "name": "headStart",
					  "nodeType": "YulTypedName",
					  "src": "7372:9:79",
					  "type": ""
					},
					{
					  "name": "value0",
					  "nodeType": "YulTypedName",
					  "src": "7383:6:79",
					  "type": ""
					}
				  ],
				  "returnVariables": [
					{
					  "name": "tail",
					  "nodeType": "YulTypedName",
					  "src": "7394:4:79",
					  "type": ""
					}
				  ],
				  "src": "7282:220:79"
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "7539:95:79",
					"statements": [
					  {
						"expression": {
						  "arguments": [
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "7556:1:79",
							  "type": "",
							  "value": "0"
							},
							{
							  "arguments": [
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "7563:3:79",
								  "type": "",
								  "value": "224"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "7568:10:79",
								  "type": "",
								  "value": "0x4e487b71"
								}
							  ],
							  "functionName": {
								"name": "shl",
								"nodeType": "YulIdentifier",
								"src": "7559:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "7559:20:79"
							}
						  ],
						  "functionName": {
							"name": "mstore",
							"nodeType": "YulIdentifier",
							"src": "7549:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "7549:31:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "7549:31:79"
					  },
					  {
						"expression": {
						  "arguments": [
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "7596:1:79",
							  "type": "",
							  "value": "4"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "7599:4:79",
							  "type": "",
							  "value": "0x11"
							}
						  ],
						  "functionName": {
							"name": "mstore",
							"nodeType": "YulIdentifier",
							"src": "7589:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "7589:15:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "7589:15:79"
					  },
					  {
						"expression": {
						  "arguments": [
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "7620:1:79",
							  "type": "",
							  "value": "0"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "7623:4:79",
							  "type": "",
							  "value": "0x24"
							}
						  ],
						  "functionName": {
							"name": "revert",
							"nodeType": "YulIdentifier",
							"src": "7613:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "7613:15:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "7613:15:79"
					  }
					]
				  },
				  "name": "panic_error_0x11",
				  "nodeType": "YulFunctionDefinition",
				  "src": "7507:127:79"
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "7691:116:79",
					"statements": [
					  {
						"body": {
						  "nodeType": "YulBlock",
						  "src": "7750:22:79",
						  "statements": [
							{
							  "expression": {
								"arguments": [],
								"functionName": {
								  "name": "panic_error_0x11",
								  "nodeType": "YulIdentifier",
								  "src": "7752:16:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "7752:18:79"
							  },
							  "nodeType": "YulExpressionStatement",
							  "src": "7752:18:79"
							}
						  ]
						},
						"condition": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "arguments": [
									{
									  "name": "x",
									  "nodeType": "YulIdentifier",
									  "src": "7722:1:79"
									}
								  ],
								  "functionName": {
									"name": "iszero",
									"nodeType": "YulIdentifier",
									"src": "7715:6:79"
								  },
								  "nodeType": "YulFunctionCall",
								  "src": "7715:9:79"
								}
							  ],
							  "functionName": {
								"name": "iszero",
								"nodeType": "YulIdentifier",
								"src": "7708:6:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "7708:17:79"
							},
							{
							  "arguments": [
								{
								  "name": "y",
								  "nodeType": "YulIdentifier",
								  "src": "7730:1:79"
								},
								{
								  "arguments": [
									{
									  "arguments": [
										{
										  "kind": "number",
										  "nodeType": "YulLiteral",
										  "src": "7741:1:79",
										  "type": "",
										  "value": "0"
										}
									  ],
									  "functionName": {
										"name": "not",
										"nodeType": "YulIdentifier",
										"src": "7737:3:79"
									  },
									  "nodeType": "YulFunctionCall",
									  "src": "7737:6:79"
									},
									{
									  "name": "x",
									  "nodeType": "YulIdentifier",
									  "src": "7745:1:79"
									}
								  ],
								  "functionName": {
									"name": "div",
									"nodeType": "YulIdentifier",
									"src": "7733:3:79"
								  },
								  "nodeType": "YulFunctionCall",
								  "src": "7733:14:79"
								}
							  ],
							  "functionName": {
								"name": "gt",
								"nodeType": "YulIdentifier",
								"src": "7727:2:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "7727:21:79"
							}
						  ],
						  "functionName": {
							"name": "and",
							"nodeType": "YulIdentifier",
							"src": "7704:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "7704:45:79"
						},
						"nodeType": "YulIf",
						"src": "7701:71:79"
					  },
					  {
						"nodeType": "YulAssignment",
						"src": "7781:20:79",
						"value": {
						  "arguments": [
							{
							  "name": "x",
							  "nodeType": "YulIdentifier",
							  "src": "7796:1:79"
							},
							{
							  "name": "y",
							  "nodeType": "YulIdentifier",
							  "src": "7799:1:79"
							}
						  ],
						  "functionName": {
							"name": "mul",
							"nodeType": "YulIdentifier",
							"src": "7792:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "7792:9:79"
						},
						"variableNames": [
						  {
							"name": "product",
							"nodeType": "YulIdentifier",
							"src": "7781:7:79"
						  }
						]
					  }
					]
				  },
				  "name": "checked_mul_t_uint256",
				  "nodeType": "YulFunctionDefinition",
				  "parameters": [
					{
					  "name": "x",
					  "nodeType": "YulTypedName",
					  "src": "7670:1:79",
					  "type": ""
					},
					{
					  "name": "y",
					  "nodeType": "YulTypedName",
					  "src": "7673:1:79",
					  "type": ""
					}
				  ],
				  "returnVariables": [
					{
					  "name": "product",
					  "nodeType": "YulTypedName",
					  "src": "7679:7:79",
					  "type": ""
					}
				  ],
				  "src": "7639:168:79"
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "7860:80:79",
					"statements": [
					  {
						"body": {
						  "nodeType": "YulBlock",
						  "src": "7887:22:79",
						  "statements": [
							{
							  "expression": {
								"arguments": [],
								"functionName": {
								  "name": "panic_error_0x11",
								  "nodeType": "YulIdentifier",
								  "src": "7889:16:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "7889:18:79"
							  },
							  "nodeType": "YulExpressionStatement",
							  "src": "7889:18:79"
							}
						  ]
						},
						"condition": {
						  "arguments": [
							{
							  "name": "x",
							  "nodeType": "YulIdentifier",
							  "src": "7876:1:79"
							},
							{
							  "arguments": [
								{
								  "name": "y",
								  "nodeType": "YulIdentifier",
								  "src": "7883:1:79"
								}
							  ],
							  "functionName": {
								"name": "not",
								"nodeType": "YulIdentifier",
								"src": "7879:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "7879:6:79"
							}
						  ],
						  "functionName": {
							"name": "gt",
							"nodeType": "YulIdentifier",
							"src": "7873:2:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "7873:13:79"
						},
						"nodeType": "YulIf",
						"src": "7870:39:79"
					  },
					  {
						"nodeType": "YulAssignment",
						"src": "7918:16:79",
						"value": {
						  "arguments": [
							{
							  "name": "x",
							  "nodeType": "YulIdentifier",
							  "src": "7929:1:79"
							},
							{
							  "name": "y",
							  "nodeType": "YulIdentifier",
							  "src": "7932:1:79"
							}
						  ],
						  "functionName": {
							"name": "add",
							"nodeType": "YulIdentifier",
							"src": "7925:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "7925:9:79"
						},
						"variableNames": [
						  {
							"name": "sum",
							"nodeType": "YulIdentifier",
							"src": "7918:3:79"
						  }
						]
					  }
					]
				  },
				  "name": "checked_add_t_uint256",
				  "nodeType": "YulFunctionDefinition",
				  "parameters": [
					{
					  "name": "x",
					  "nodeType": "YulTypedName",
					  "src": "7843:1:79",
					  "type": ""
					},
					{
					  "name": "y",
					  "nodeType": "YulTypedName",
					  "src": "7846:1:79",
					  "type": ""
					}
				  ],
				  "returnVariables": [
					{
					  "name": "sum",
					  "nodeType": "YulTypedName",
					  "src": "7852:3:79",
					  "type": ""
					}
				  ],
				  "src": "7812:128:79"
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "7977:95:79",
					"statements": [
					  {
						"expression": {
						  "arguments": [
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "7994:1:79",
							  "type": "",
							  "value": "0"
							},
							{
							  "arguments": [
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "8001:3:79",
								  "type": "",
								  "value": "224"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "8006:10:79",
								  "type": "",
								  "value": "0x4e487b71"
								}
							  ],
							  "functionName": {
								"name": "shl",
								"nodeType": "YulIdentifier",
								"src": "7997:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "7997:20:79"
							}
						  ],
						  "functionName": {
							"name": "mstore",
							"nodeType": "YulIdentifier",
							"src": "7987:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "7987:31:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "7987:31:79"
					  },
					  {
						"expression": {
						  "arguments": [
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "8034:1:79",
							  "type": "",
							  "value": "4"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "8037:4:79",
							  "type": "",
							  "value": "0x32"
							}
						  ],
						  "functionName": {
							"name": "mstore",
							"nodeType": "YulIdentifier",
							"src": "8027:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "8027:15:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "8027:15:79"
					  },
					  {
						"expression": {
						  "arguments": [
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "8058:1:79",
							  "type": "",
							  "value": "0"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "8061:4:79",
							  "type": "",
							  "value": "0x24"
							}
						  ],
						  "functionName": {
							"name": "revert",
							"nodeType": "YulIdentifier",
							"src": "8051:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "8051:15:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "8051:15:79"
					  }
					]
				  },
				  "name": "panic_error_0x32",
				  "nodeType": "YulFunctionDefinition",
				  "src": "7945:127:79"
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "8124:89:79",
					"statements": [
					  {
						"body": {
						  "nodeType": "YulBlock",
						  "src": "8151:22:79",
						  "statements": [
							{
							  "expression": {
								"arguments": [],
								"functionName": {
								  "name": "panic_error_0x11",
								  "nodeType": "YulIdentifier",
								  "src": "8153:16:79"
								},
								"nodeType": "YulFunctionCall",
								"src": "8153:18:79"
							  },
							  "nodeType": "YulExpressionStatement",
							  "src": "8153:18:79"
							}
						  ]
						},
						"condition": {
						  "arguments": [
							{
							  "name": "value",
							  "nodeType": "YulIdentifier",
							  "src": "8144:5:79"
							}
						  ],
						  "functionName": {
							"name": "iszero",
							"nodeType": "YulIdentifier",
							"src": "8137:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "8137:13:79"
						},
						"nodeType": "YulIf",
						"src": "8134:39:79"
					  },
					  {
						"nodeType": "YulAssignment",
						"src": "8182:25:79",
						"value": {
						  "arguments": [
							{
							  "name": "value",
							  "nodeType": "YulIdentifier",
							  "src": "8193:5:79"
							},
							{
							  "arguments": [
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "8204:1:79",
								  "type": "",
								  "value": "0"
								}
							  ],
							  "functionName": {
								"name": "not",
								"nodeType": "YulIdentifier",
								"src": "8200:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "8200:6:79"
							}
						  ],
						  "functionName": {
							"name": "add",
							"nodeType": "YulIdentifier",
							"src": "8189:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "8189:18:79"
						},
						"variableNames": [
						  {
							"name": "ret",
							"nodeType": "YulIdentifier",
							"src": "8182:3:79"
						  }
						]
					  }
					]
				  },
				  "name": "decrement_t_uint256",
				  "nodeType": "YulFunctionDefinition",
				  "parameters": [
					{
					  "name": "value",
					  "nodeType": "YulTypedName",
					  "src": "8106:5:79",
					  "type": ""
					}
				  ],
				  "returnVariables": [
					{
					  "name": "ret",
					  "nodeType": "YulTypedName",
					  "src": "8116:3:79",
					  "type": ""
					}
				  ],
				  "src": "8077:136:79"
				},
				{
				  "body": {
					"nodeType": "YulBlock",
					"src": "8392:182:79",
					"statements": [
					  {
						"expression": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "8409:9:79"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "8420:2:79",
							  "type": "",
							  "value": "32"
							}
						  ],
						  "functionName": {
							"name": "mstore",
							"nodeType": "YulIdentifier",
							"src": "8402:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "8402:21:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "8402:21:79"
					  },
					  {
						"expression": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "headStart",
								  "nodeType": "YulIdentifier",
								  "src": "8443:9:79"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "8454:2:79",
								  "type": "",
								  "value": "32"
								}
							  ],
							  "functionName": {
								"name": "add",
								"nodeType": "YulIdentifier",
								"src": "8439:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "8439:18:79"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "8459:2:79",
							  "type": "",
							  "value": "32"
							}
						  ],
						  "functionName": {
							"name": "mstore",
							"nodeType": "YulIdentifier",
							"src": "8432:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "8432:30:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "8432:30:79"
					  },
					  {
						"expression": {
						  "arguments": [
							{
							  "arguments": [
								{
								  "name": "headStart",
								  "nodeType": "YulIdentifier",
								  "src": "8482:9:79"
								},
								{
								  "kind": "number",
								  "nodeType": "YulLiteral",
								  "src": "8493:2:79",
								  "type": "",
								  "value": "64"
								}
							  ],
							  "functionName": {
								"name": "add",
								"nodeType": "YulIdentifier",
								"src": "8478:3:79"
							  },
							  "nodeType": "YulFunctionCall",
							  "src": "8478:18:79"
							},
							{
							  "hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
							  "kind": "string",
							  "nodeType": "YulLiteral",
							  "src": "8498:34:79",
							  "type": "",
							  "value": "Strings: hex length insufficient"
							}
						  ],
						  "functionName": {
							"name": "mstore",
							"nodeType": "YulIdentifier",
							"src": "8471:6:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "8471:62:79"
						},
						"nodeType": "YulExpressionStatement",
						"src": "8471:62:79"
					  },
					  {
						"nodeType": "YulAssignment",
						"src": "8542:26:79",
						"value": {
						  "arguments": [
							{
							  "name": "headStart",
							  "nodeType": "YulIdentifier",
							  "src": "8554:9:79"
							},
							{
							  "kind": "number",
							  "nodeType": "YulLiteral",
							  "src": "8565:2:79",
							  "type": "",
							  "value": "96"
							}
						  ],
						  "functionName": {
							"name": "add",
							"nodeType": "YulIdentifier",
							"src": "8550:3:79"
						  },
						  "nodeType": "YulFunctionCall",
						  "src": "8550:18:79"
						},
						"variableNames": [
						  {
							"name": "tail",
							"nodeType": "YulIdentifier",
							"src": "8542:4:79"
						  }
						]
					  }
					]
				  },
				  "name": "abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed",
				  "nodeType": "YulFunctionDefinition",
				  "parameters": [
					{
					  "name": "headStart",
					  "nodeType": "YulTypedName",
					  "src": "8369:9:79",
					  "type": ""
					}
				  ],
				  "returnVariables": [
					{
					  "name": "tail",
					  "nodeType": "YulTypedName",
					  "src": "8383:4:79",
					  "type": ""
					}
				  ],
				  "src": "8218:356:79"
				}
			  ]
			},
			"contents": "{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 0x20), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 0x20), add(_2, 0x20), _3)\n        mstore(add(add(memPtr, _3), 0x20), 0)\n        value0 := memPtr\n        value1 := calldataload(add(headStart, 0x20))\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, shl(224, 0xffffffff)))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 47)\n        mstore(add(headStart, 64), \"AccessControl: can only renounce\")\n        mstore(add(headStart, 96), \" roles for self\")\n        tail := add(headStart, 128)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr_t_array$_t_uint256_$3_memory_ptr_t_array$_t_address_$3_memory_ptr__to_t_string_memory_ptr_t_array$_t_uint256_$3_memory_ptr_t_array$_t_address_$3_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 224)\n        tail := abi_encode_string(value0, add(headStart, 224))\n        let _1 := 32\n        let pos := add(headStart, _1)\n        pos := pos\n        let srcPtr := value1\n        let i := 0\n        for { } lt(i, 0x03) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        let pos_1 := add(headStart, 128)\n        pos_1 := pos_1\n        let srcPtr_1 := value2\n        let i_1 := 0\n        for { } lt(i_1, 0x03) { i_1 := add(i_1, 1) }\n        {\n            mstore(pos_1, and(mload(srcPtr_1), sub(shl(160, 1), 1)))\n            pos_1 := add(pos_1, _1)\n            srcPtr_1 := add(srcPtr_1, _1)\n        }\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, \"AccessControl: account \")\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), add(pos, 23), length)\n        let _1 := add(pos, length)\n        mstore(add(_1, 23), \" is missing role \")\n        let length_1 := mload(value1)\n        copy_memory_to_memory(add(value1, 0x20), add(_1, 40), length_1)\n        end := add(add(_1, length_1), 40)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, not(0))\n    }\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Strings: hex length insufficient\")\n        tail := add(headStart, 96)\n    }\n}",
			"id": 79,
			"language": "Yul",
			"name": "#utility.yul"
		  }
		],
		"immutableReferences": {},
		"linkReferences": {},
		"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x121 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x75B238FC GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xB6C3EF27 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xB6C3EF27 EQ PUSH2 0x254 JUMPI DUP1 PUSH4 0xCE791CE3 EQ PUSH2 0x267 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x27A JUMPI DUP1 PUSH4 0xEC5EB5DA EQ PUSH2 0x28D JUMPI DUP1 PUSH4 0xF8BE73DD EQ PUSH2 0x296 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x75B238FC EQ PUSH2 0x214 JUMPI DUP1 PUSH4 0x76C71CA1 EQ PUSH2 0x21D JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x226 JUMPI DUP1 PUSH4 0x95F148F7 EQ PUSH2 0x239 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x24C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x29575F6A GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x29575F6A EQ PUSH2 0x1A7 JUMPI DUP1 PUSH4 0x2E4DB810 EQ PUSH2 0x1D2 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x1EE JUMPI DUP1 PUSH4 0x4070A0C9 EQ PUSH2 0x201 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x3745A0E EQ PUSH2 0x14E JUMPI DUP1 PUSH4 0x13877CEA EQ PUSH2 0x163 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x176 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x139 PUSH2 0x134 CALLDATASIZE PUSH1 0x4 PUSH2 0xABE JUMP JUMPDEST PUSH2 0x2A9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x161 PUSH2 0x15C CALLDATASIZE PUSH1 0x4 PUSH2 0xB04 JUMP JUMPDEST PUSH2 0x2E0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x161 PUSH2 0x171 CALLDATASIZE PUSH1 0x4 PUSH2 0xB1F JUMP JUMPDEST PUSH2 0x41C JUMP JUMPDEST PUSH2 0x199 PUSH2 0x184 CALLDATASIZE PUSH1 0x4 PUSH2 0xB1F JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x145 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0x1BA SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x145 JUMP JUMPDEST PUSH2 0x199 PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x161 PUSH2 0x1E9 CALLDATASIZE PUSH1 0x4 PUSH2 0xB38 JUMP JUMPDEST PUSH2 0x466 JUMP JUMPDEST PUSH2 0x161 PUSH2 0x1FC CALLDATASIZE PUSH1 0x4 PUSH2 0xB38 JUMP JUMPDEST PUSH2 0x490 JUMP JUMPDEST PUSH2 0x161 PUSH2 0x20F CALLDATASIZE PUSH1 0x4 PUSH2 0xB1F JUMP JUMPDEST PUSH2 0x50F JUMP JUMPDEST PUSH2 0x199 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x199 PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x139 PUSH2 0x234 CALLDATASIZE PUSH1 0x4 PUSH2 0xB38 JUMP JUMPDEST PUSH2 0x559 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x1BA SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x199 PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH2 0x161 PUSH2 0x262 CALLDATASIZE PUSH1 0x4 PUSH2 0xB04 JUMP JUMPDEST PUSH2 0x582 JUMP JUMPDEST PUSH2 0x1BA PUSH2 0x275 CALLDATASIZE PUSH1 0x4 PUSH2 0xB7A JUMP JUMPDEST PUSH2 0x5E6 JUMP JUMPDEST PUSH2 0x161 PUSH2 0x288 CALLDATASIZE PUSH1 0x4 PUSH2 0xB38 JUMP JUMPDEST PUSH2 0x78F JUMP JUMPDEST PUSH2 0x199 PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x1BA SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x2DA JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x2EC DUP2 PUSH2 0x7B4 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x31B JUMPI PUSH1 0x40 MLOAD PUSH4 0xBA501C4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH4 0x92209DBF PUSH1 0xE0 SHL PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x1FFC9A7 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x361 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x375 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x399 SWAP2 SWAP1 PUSH2 0xC2F JUMP JUMPDEST ISZERO PUSH2 0x3FF JUMPI PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE SWAP2 AND PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE SWAP2 PUSH32 0xEF71174D9CB18ECB75827201470103B3CA2E98BFFC6A123C181A4294AACD665B SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1DC9BBA7 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x428 DUP2 PUSH2 0x7B4 JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD SWAP1 DUP4 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0xA5BDEA0442F92D4F8CFCB2EF097CBEF895DEE459E114D0A2D1DFC94E7B9637CE SWAP2 ADD PUSH2 0x3F2 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x481 DUP2 PUSH2 0x7B4 JUMP JUMPDEST PUSH2 0x48B DUP4 DUP4 PUSH2 0x7C1 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0x505 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x418 DUP3 DUP3 PUSH2 0x845 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x51B DUP2 PUSH2 0x7B4 JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD SWAP1 DUP4 SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0xDE0F3E82F0D197E64E2B50A8428517693190E0C2B6BEAA3511C60E0FF031DDA3 SWAP2 ADD PUSH2 0x3F2 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x58E DUP2 PUSH2 0x7B4 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE SWAP2 AND PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE SWAP2 PUSH32 0x4BF62747831E52566C95DB9DC765944D67440AA79E4BE5784042E4BFF7E955F6 SWAP2 ADD PUSH2 0x3F2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD PUSH2 0x5F4 DUP2 PUSH2 0x7B4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH2 0x602 SWAP1 PUSH2 0xAB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x61E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x1B2CE7F3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP DUP3 SWAP2 DUP3 AND SWAP1 PUSH4 0x3659CFE6 SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x66D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x681 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x3 SLOAD DUP2 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE CALLER DUP5 DUP7 ADD MSTORE DUP5 MLOAD SWAP3 DUP4 ADD DUP6 MSTORE PUSH1 0x7 SLOAD DUP4 MSTORE DUP3 ADD DUP12 SWAP1 MSTORE PUSH1 0x6 SLOAD DUP3 DUP6 ADD MSTORE SWAP3 MLOAD PUSH4 0xEB65D8F PUSH1 0xE2 SHL DUP2 MSTORE SWAP2 SWAP5 POP SWAP3 POP SWAP1 DUP6 AND SWAP1 PUSH4 0x3AD9763C SWAP1 PUSH2 0x6F6 SWAP1 DUP12 SWAP1 DUP6 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0xCAD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x710 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x724 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP8 PUSH1 0x40 MLOAD PUSH2 0x736 SWAP2 SWAP1 PUSH2 0xD25 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB DUP3 KECCAK256 PUSH1 0x6 SLOAD DUP4 MSTORE PUSH1 0x20 DUP4 ADD DUP11 SWAP1 MSTORE SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH32 0x37CD716B957E7C7BCFB2F5AE26D6D900ABEF16103B3D6E068C3D9B73C5C277AE SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0x7AA DUP2 PUSH2 0x7B4 JUMP JUMPDEST PUSH2 0x48B DUP4 DUP4 PUSH2 0x845 JUMP JUMPDEST PUSH2 0x7BE DUP2 CALLER PUSH2 0x8AA JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x7CB DUP3 DUP3 PUSH2 0x559 JUMP JUMPDEST PUSH2 0x418 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x801 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x84F DUP3 DUP3 PUSH2 0x559 JUMP JUMPDEST ISZERO PUSH2 0x418 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x8B4 DUP3 DUP3 PUSH2 0x559 JUMP JUMPDEST PUSH2 0x418 JUMPI PUSH2 0x8CC DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x14 PUSH2 0x90E JUMP JUMPDEST PUSH2 0x8D7 DUP4 PUSH1 0x20 PUSH2 0x90E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8E8 SWAP3 SWAP2 SWAP1 PUSH2 0xD41 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0x4FC SWAP2 PUSH1 0x4 ADD PUSH2 0xDB6 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x91D DUP4 PUSH1 0x2 PUSH2 0xDDF JUMP JUMPDEST PUSH2 0x928 SWAP1 PUSH1 0x2 PUSH2 0xDFE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x940 JUMPI PUSH2 0x940 PUSH2 0xB64 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x96A JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x985 JUMPI PUSH2 0x985 PUSH2 0xE16 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x9B4 JUMPI PUSH2 0x9B4 PUSH2 0xE16 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x9D8 DUP5 PUSH1 0x2 PUSH2 0xDDF JUMP JUMPDEST PUSH2 0x9E3 SWAP1 PUSH1 0x1 PUSH2 0xDFE JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xA5B JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0xA17 JUMPI PUSH2 0xA17 PUSH2 0xE16 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xA2D JUMPI PUSH2 0xA2D PUSH2 0xE16 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0xA54 DUP2 PUSH2 0xE2C JUMP JUMPDEST SWAP1 POP PUSH2 0x9E6 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0xAAA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x4FC JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1AE3 DUP1 PUSH2 0xE44 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xAAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xAFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAAA DUP3 PUSH2 0xAE8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB31 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0xB5B PUSH1 0x20 DUP5 ADD PUSH2 0xAE8 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB8D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xBA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xBB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xBCB JUMPI PUSH2 0xBCB PUSH2 0xB64 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0xBF3 JUMPI PUSH2 0xBF3 PUSH2 0xB64 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0xC0C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 SWAP4 DUP3 ADD DUP5 ADD MSTORE SWAP9 SWAP7 SWAP1 SWAP2 ADD CALLDATALOAD SWAP7 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xAAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xC6C JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xC54 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xC7B JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xC99 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xC51 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xE0 DUP2 MSTORE PUSH1 0x0 PUSH2 0xCC0 PUSH1 0xE0 DUP4 ADD DUP7 PUSH2 0xC81 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP1 DUP4 ADD DUP6 PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xCE8 JUMPI DUP2 MLOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xCCB JUMP JUMPDEST POP POP POP PUSH1 0x80 DUP4 ADD DUP5 PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xD19 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xCF3 JUMP JUMPDEST POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xD37 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xC51 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0xD79 DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0xC51 JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0xDAA DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0xC51 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xAAA PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xC81 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xDF9 JUMPI PUSH2 0xDF9 PUSH2 0xDC9 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xE11 JUMPI PUSH2 0xE11 PUSH2 0xDC9 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xE3B JUMPI PUSH2 0xE3B PUSH2 0xDC9 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B PUSH32 0x7613A25ECC738585A232AD50A301178F12B3BA8887D13E138B523C4269C47689 CALLER PUSH2 0x40 JUMP JUMPDEST PUSH2 0xF0 JUMP JUMPDEST PUSH2 0x4A DUP3 DUP3 PUSH2 0x4E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x4A JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xAC CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x19E3 DUP1 PUSH3 0x100 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x297 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x707109B4 GT PUSH2 0x15A JUMPI DUP1 PUSH4 0xA2FB1175 GT PUSH2 0xC1 JUMPI DUP1 PUSH4 0xCCBB6299 GT PUSH2 0x7A JUMPI DUP1 PUSH4 0xCCBB6299 EQ PUSH2 0x7FF JUMPI DUP1 PUSH4 0xD182CF4D EQ PUSH2 0x816 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x82C JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x84C JUMPI DUP1 PUSH4 0xF621CC48 EQ PUSH2 0x878 JUMPI DUP1 PUSH4 0xF8BE73DD EQ PUSH2 0x941 JUMPI PUSH2 0x29E JUMP JUMPDEST DUP1 PUSH4 0xA2FB1175 EQ PUSH2 0x731 JUMPI DUP1 PUSH4 0xA870A5B2 EQ PUSH2 0x751 JUMPI DUP1 PUSH4 0xB0FE6414 EQ PUSH2 0x768 JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x77F JUMPI DUP1 PUSH4 0xC6C9BD47 EQ PUSH2 0x7AB JUMPI DUP1 PUSH4 0xCAFF99CE EQ PUSH2 0x7CB JUMPI PUSH2 0x29E JUMP JUMPDEST DUP1 PUSH4 0x95D89B41 GT PUSH2 0x113 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x6AC JUMPI DUP1 PUSH4 0x95F148F7 EQ PUSH2 0x6C1 JUMPI DUP1 PUSH4 0x9711D7E5 EQ PUSH2 0x6E2 JUMPI DUP1 PUSH4 0x98EEE484 EQ PUSH2 0x6F9 JUMPI DUP1 PUSH4 0x9B7D707D EQ PUSH2 0x710 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x3DD JUMPI PUSH2 0x29E JUMP JUMPDEST DUP1 PUSH4 0x707109B4 EQ PUSH2 0x5F3 JUMPI DUP1 PUSH4 0x73EE4508 EQ PUSH2 0x615 JUMPI DUP1 PUSH4 0x75B238FC EQ PUSH2 0x62B JUMPI DUP1 PUSH4 0x76C71CA1 EQ PUSH2 0x65F JUMPI DUP1 PUSH4 0x77A714AE EQ PUSH2 0x676 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x68C JUMPI PUSH2 0x29E JUMP JUMPDEST DUP1 PUSH4 0x32C60EEF GT PUSH2 0x1FE JUMPI DUP1 PUSH4 0x4460BDD6 GT PUSH2 0x1B7 JUMPI DUP1 PUSH4 0x4460BDD6 EQ PUSH2 0x52D JUMPI DUP1 PUSH4 0x5813FD3D EQ PUSH2 0x54F JUMPI DUP1 PUSH4 0x6588103B EQ PUSH2 0x566 JUMPI DUP1 PUSH4 0x6817C76C EQ PUSH2 0x59F JUMPI DUP1 PUSH4 0x6C0360EB EQ PUSH2 0x5B6 JUMPI DUP1 PUSH4 0x6FAC889B EQ PUSH2 0x5CB JUMPI PUSH2 0x29E JUMP JUMPDEST DUP1 PUSH4 0x32C60EEF EQ PUSH2 0x488 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x49F JUMPI DUP1 PUSH4 0x3659CFE6 EQ PUSH2 0x4BF JUMPI DUP1 PUSH4 0x3AD9763C EQ PUSH2 0x4DF JUMPI DUP1 PUSH4 0x3D779F32 EQ PUSH2 0x4FF JUMPI DUP1 PUSH4 0x4264F40D EQ PUSH2 0x516 JUMPI PUSH2 0x29E JUMP JUMPDEST DUP1 PUSH4 0x1649C6CE GT PUSH2 0x250 JUMPI DUP1 PUSH4 0x1649C6CE EQ PUSH2 0x3C6 JUMPI DUP1 PUSH4 0x1AE13C23 EQ PUSH2 0x3DD JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x3F2 JUMPI DUP1 PUSH4 0x295A5212 EQ PUSH2 0x422 JUMPI DUP1 PUSH4 0x2E4DB810 EQ PUSH2 0x44F JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x466 JUMPI PUSH2 0x29E JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x2D9 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x30E JUMPI DUP1 PUSH4 0xC26ABC3 EQ PUSH2 0x330 JUMPI DUP1 PUSH4 0x12F09746 EQ PUSH2 0x355 JUMPI DUP1 PUSH4 0x13AD88CA EQ PUSH2 0x36C JUMPI DUP1 PUSH4 0x150B7A02 EQ PUSH2 0x382 JUMPI PUSH2 0x29E JUMP JUMPDEST CALLDATASIZE PUSH2 0x29E JUMPI STOP JUMPDEST PUSH2 0x13B SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x2B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 DUP1 ISZERO PUSH2 0x2D4 JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F9 PUSH2 0x2F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x12EB JUMP JUMPDEST PUSH2 0x962 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x323 PUSH2 0x98D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x305 SWAP2 SWAP1 PUSH2 0x1341 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x33C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x13A SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x305 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x361 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x138 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x378 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x2710 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AD PUSH2 0x39D CALLDATASIZE PUSH1 0x4 PUSH2 0x1473 JUMP JUMPDEST PUSH4 0xA85BD01 PUSH1 0xE1 SHL SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x305 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x12D SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x40D CALLDATASIZE PUSH1 0x4 PUSH2 0x14DB JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x143 SLOAD PUSH2 0x442 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x305 SWAP2 SWAP1 PUSH2 0x150A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x45B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x130 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x472 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x486 PUSH2 0x481 CALLDATASIZE PUSH1 0x4 PUSH2 0x1524 JUMP JUMPDEST PUSH2 0xA1C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x494 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x133 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x486 PUSH2 0x4BA CALLDATASIZE PUSH1 0x4 PUSH2 0x1524 JUMP JUMPDEST PUSH2 0xA46 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x486 PUSH2 0x4DA CALLDATASIZE PUSH1 0x4 PUSH2 0x1550 JUMP JUMPDEST PUSH2 0xAC9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x486 PUSH2 0x4FA CALLDATASIZE PUSH1 0x4 PUSH2 0x15C2 JUMP JUMPDEST PUSH2 0xB1A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x50B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x13F SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x522 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x139 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x539 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x198E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x55B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x132 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x572 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13D SLOAD PUSH2 0x587 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x305 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x131 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x323 PUSH2 0xC9D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x143 SLOAD PUSH2 0x5E6 SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x305 SWAP2 SWAP1 PUSH2 0x1672 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13E SLOAD PUSH2 0x2F9 SWAP1 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x621 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x483 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x637 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x12E SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x682 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x2D1 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x698 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2F9 PUSH2 0x6A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1524 JUMP JUMPDEST PUSH2 0xCAB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x323 PUSH2 0xCD6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13B SLOAD PUSH2 0x587 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x136 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x705 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x137 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x71C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13E SLOAD PUSH2 0x587 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x73D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x587 PUSH2 0x74C CALLDATASIZE PUSH1 0x4 PUSH2 0x14DB JUMP JUMPDEST PUSH2 0xCE4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x75D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x135 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x774 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x134 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x78B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AD PUSH2 0x79A CALLDATASIZE PUSH1 0x4 PUSH2 0x1706 JUMP JUMPDEST PUSH4 0xBC197C81 PUSH1 0xE0 SHL SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x7C6 CALLDATASIZE PUSH1 0x4 PUSH2 0x14DB JUMP JUMPDEST PUSH2 0xD0F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH32 0xE926D122B799DCBE5C2ECCDF60AE0AEFBB1A4BC75A7848BB07BEFECF8C775F5C DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x80B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x12F SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x822 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x347 PUSH2 0x2711 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x838 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x486 PUSH2 0x847 CALLDATASIZE PUSH1 0x4 PUSH2 0x1524 JUMP JUMPDEST PUSH2 0xD31 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x858 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AD PUSH2 0x867 CALLDATASIZE PUSH1 0x4 PUSH2 0x17B0 JUMP JUMPDEST PUSH4 0xF23A6E61 PUSH1 0xE0 SHL SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x884 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8F3 PUSH2 0x893 CALLDATASIZE PUSH1 0x4 PUSH2 0x1550 JUMP JUMPDEST PUSH2 0x145 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x3 DUP3 ADD SLOAD PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x5 DUP5 ADD SLOAD PUSH1 0x6 DUP6 ADD SLOAD PUSH1 0x7 DUP7 ADD SLOAD PUSH1 0x8 SWAP1 SWAP7 ADD SLOAD SWAP5 SWAP6 SWAP4 SWAP5 SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF DUP2 AND SWAP1 PUSH1 0xFF PUSH5 0x100000000 DUP3 DIV DUP2 AND SWAP2 PUSH6 0x10000000000 SWAP1 DIV AND DUP10 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP10 DUP11 MSTORE PUSH1 0x20 DUP11 ADD SWAP9 SWAP1 SWAP9 MSTORE SWAP7 DUP9 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x60 DUP8 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x80 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 DUP6 ADD MSTORE PUSH4 0xFFFFFFFF AND PUSH1 0xC0 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0xE0 DUP4 ADD MSTORE ISZERO ISZERO PUSH2 0x100 DUP3 ADD MSTORE PUSH2 0x120 ADD PUSH2 0x305 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x94D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13C SLOAD PUSH2 0x587 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x92209DBF PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x987 JUMPI POP PUSH2 0x987 DUP3 PUSH2 0xD56 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x140 DUP1 SLOAD PUSH2 0x99B SWAP1 PUSH2 0x1815 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x9C7 SWAP1 PUSH2 0x1815 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xA14 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x9E9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA14 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x9F7 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xA37 DUP2 PUSH2 0xD7B JUMP JUMPDEST PUSH2 0xA41 DUP4 DUP4 PUSH2 0xD88 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0xABB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xAC5 DUP3 DUP3 PUSH2 0xE0E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x198E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xAE1 DUP2 PUSH2 0xD7B JUMP JUMPDEST PUSH2 0x13B SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0xB11 JUMPI PUSH1 0x40 MLOAD PUSH4 0xBA501C4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xAC5 DUP3 PUSH2 0xE75 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB26 PUSH1 0x1 PUSH2 0xEC7 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xB3E JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x198E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xB56 DUP2 PUSH2 0xD7B JUMP JUMPDEST PUSH2 0xB5E PUSH2 0xF54 JUMP JUMPDEST PUSH2 0xB66 PUSH2 0xF54 JUMP JUMPDEST PUSH2 0xB6E PUSH2 0xF54 JUMP JUMPDEST DUP5 MLOAD PUSH2 0xB82 SWAP1 PUSH2 0x140 SWAP1 PUSH1 0x20 DUP9 ADD SWAP1 PUSH2 0x1252 JUMP JUMPDEST POP DUP3 MLOAD PUSH2 0x13C DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP4 MLOAD PUSH2 0x12E SSTORE PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0x12F SSTORE PUSH1 0x40 DUP5 ADD MLOAD PUSH2 0x130 SSTORE TIMESTAMP PUSH2 0x12D SSTORE PUSH2 0xBE2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x198E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 PUSH1 0x1 JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH2 0xFC1 JUMP JUMPDEST PUSH2 0xC0E PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP5 PUSH1 0x2 PUSH2 0xBD8 JUMP JUMPDEST PUSH2 0xC26 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x198E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 PUSH2 0xFCB JUMP JUMPDEST PUSH2 0xC50 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP1 PUSH2 0xFCB JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0xC97 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x142 DUP1 SLOAD PUSH2 0x99B SWAP1 PUSH2 0x1815 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x141 DUP1 SLOAD PUSH2 0x99B SWAP1 PUSH2 0x1815 JUMP JUMPDEST PUSH2 0x146 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xCF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH2 0x147 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xD20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD PUSH2 0xD4C DUP2 PUSH2 0xD7B JUMP JUMPDEST PUSH2 0xA41 DUP4 DUP4 PUSH2 0xE0E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x987 JUMPI POP PUSH2 0x987 DUP3 PUSH2 0x1016 JUMP JUMPDEST PUSH2 0xD85 DUP2 CALLER PUSH2 0x104B JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xD92 DUP3 DUP3 PUSH2 0xCAB JUMP JUMPDEST PUSH2 0xAC5 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xDCA CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0xE18 DUP3 DUP3 PUSH2 0xCAB JUMP JUMPDEST ISZERO PUSH2 0xAC5 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x13B DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 DUP3 SWAP2 PUSH32 0xD2D601FF50517068C7174BC2A7E6E8EA802702E59DA429EBB0D6B381B2785C5D SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0xF0E JUMPI DUP2 PUSH1 0xFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0xEEA JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST PUSH2 0xF06 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAB2 SWAP1 PUSH2 0x1866 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF DUP1 DUP5 AND SWAP2 AND LT PUSH2 0xF35 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAB2 SWAP1 PUSH2 0x1866 JUMP JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0xFBF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xAB2 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0xAC5 DUP3 DUP3 PUSH2 0xD88 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xFB PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 PUSH1 0x1 ADD DUP1 SLOAD SWAP1 DUP5 SWAP1 SSTORE SWAP1 MLOAD SWAP1 SWAP2 DUP4 SWAP2 DUP4 SWAP2 DUP7 SWAP2 PUSH32 0xBD79B86FFE0AB8E8776151514217CD7CACD52C909F66475C3AF44E129F0B00FF SWAP2 SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x2711897 PUSH1 0xE5 SHL EQ DUP1 PUSH2 0x987 JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0x987 JUMP JUMPDEST PUSH2 0x1055 DUP3 DUP3 PUSH2 0xCAB JUMP JUMPDEST PUSH2 0xAC5 JUMPI PUSH2 0x106D DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x14 PUSH2 0x10AF JUMP JUMPDEST PUSH2 0x1078 DUP4 PUSH1 0x20 PUSH2 0x10AF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1089 SWAP3 SWAP2 SWAP1 PUSH2 0x18B4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0xAB2 SWAP2 PUSH1 0x4 ADD PUSH2 0x1341 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x10BE DUP4 PUSH1 0x2 PUSH2 0x193F JUMP JUMPDEST PUSH2 0x10C9 SWAP1 PUSH1 0x2 PUSH2 0x195E JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10E1 JUMPI PUSH2 0x10E1 PUSH2 0x138B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x110B JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1126 JUMPI PUSH2 0x1126 PUSH2 0x1850 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x1155 JUMPI PUSH2 0x1155 PUSH2 0x1850 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x1179 DUP5 PUSH1 0x2 PUSH2 0x193F JUMP JUMPDEST PUSH2 0x1184 SWAP1 PUSH1 0x1 PUSH2 0x195E JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x11FC JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x11B8 JUMPI PUSH2 0x11B8 PUSH2 0x1850 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x11CE JUMPI PUSH2 0x11CE PUSH2 0x1850 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x11F5 DUP2 PUSH2 0x1976 JUMP JUMPDEST SWAP1 POP PUSH2 0x1187 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0x124B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xAB2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x125E SWAP1 PUSH2 0x1815 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x1280 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x12C6 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x1299 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x12C6 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x12C6 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x12C6 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x12AB JUMP JUMPDEST POP PUSH2 0x12D2 SWAP3 SWAP2 POP PUSH2 0x12D6 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x12D2 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x12D7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x124B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1330 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1318 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xC97 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1360 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1315 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xF4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x13C4 JUMPI PUSH2 0x13C4 PUSH2 0x138B JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x13F3 JUMPI PUSH2 0x13F3 PUSH2 0x138B JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x1415 JUMPI PUSH2 0x1415 PUSH2 0x138B JUMP JUMPDEST PUSH2 0x1428 PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x13CA JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE DUP4 DUP4 DUP4 ADD GT ISZERO PUSH2 0x143C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP3 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1464 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x124B DUP4 DUP4 CALLDATALOAD PUSH1 0x20 DUP6 ADD PUSH2 0x13FB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1489 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1492 DUP6 PUSH2 0x1374 JUMP JUMPDEST SWAP4 POP PUSH2 0x14A0 PUSH1 0x20 DUP7 ADD PUSH2 0x1374 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x14C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14CF DUP8 DUP3 DUP9 ADD PUSH2 0x1453 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x4 DUP4 LT PUSH2 0x151E JUMPI PUSH2 0x151E PUSH2 0x14F4 JUMP JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1537 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1547 PUSH1 0x20 DUP5 ADD PUSH2 0x1374 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1562 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x124B DUP3 PUSH2 0x1374 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x157C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1584 PUSH2 0x13A1 JUMP JUMPDEST DUP1 PUSH1 0x60 DUP5 ADD DUP6 DUP2 GT ISZERO PUSH2 0x1596 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x15B7 JUMPI PUSH2 0x15A9 DUP2 PUSH2 0x1374 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 ADD PUSH2 0x1598 JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x15D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x15EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 ADD PUSH1 0x1F DUP2 ADD DUP7 SGT PUSH2 0x15FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 PUSH2 0x160F DUP8 DUP4 CALLDATALOAD DUP4 DUP6 ADD PUSH2 0x13FB JUMP JUMPDEST SWAP5 POP DUP7 PUSH1 0x3F DUP8 ADD SLT PUSH2 0x1620 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1628 PUSH2 0x13A1 JUMP JUMPDEST SWAP2 POP DUP2 PUSH1 0x80 DUP8 ADD DUP9 DUP2 GT ISZERO PUSH2 0x163C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 DUP9 ADD JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1657 JUMPI DUP1 CALLDATALOAD DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 DUP4 ADD PUSH2 0x1640 JUMP JUMPDEST POP DUP2 SWAP6 POP PUSH2 0x1665 DUP10 DUP3 PUSH2 0x156B JUMP JUMPDEST SWAP5 POP POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x2 DUP4 LT PUSH2 0x151E JUMPI PUSH2 0x151E PUSH2 0x14F4 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1697 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x16B3 JUMPI PUSH2 0x16B3 PUSH2 0x138B JUMP JUMPDEST DUP2 PUSH1 0x5 SHL PUSH2 0x16C2 DUP3 DUP3 ADD PUSH2 0x13CA JUMP JUMPDEST SWAP3 DUP4 MSTORE DUP5 DUP2 ADD DUP3 ADD SWAP3 DUP3 DUP2 ADD SWAP1 DUP8 DUP6 GT ISZERO PUSH2 0x16DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP8 ADD SWAP3 POP JUMPDEST DUP5 DUP4 LT ISZERO PUSH2 0x16FB JUMPI DUP3 CALLDATALOAD DUP3 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH2 0x16E2 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x171E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1727 DUP7 PUSH2 0x1374 JUMP JUMPDEST SWAP5 POP PUSH2 0x1735 PUSH1 0x20 DUP8 ADD PUSH2 0x1374 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1752 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x175E DUP10 DUP4 DUP11 ADD PUSH2 0x1686 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1774 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1780 DUP10 DUP4 DUP11 ADD PUSH2 0x1686 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1796 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x17A3 DUP9 DUP3 DUP10 ADD PUSH2 0x1453 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x17C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17D1 DUP7 PUSH2 0x1374 JUMP JUMPDEST SWAP5 POP PUSH2 0x17DF PUSH1 0x20 DUP8 ADD PUSH2 0x1374 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1809 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17A3 DUP9 DUP3 DUP10 ADD PUSH2 0x1453 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1829 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x184A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH32 0x416363657373436F6E74726F6C3A206163636F756E7420000000000000000000 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD PUSH2 0x18EC DUP2 PUSH1 0x17 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1315 JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x17 SWAP2 DUP5 ADD SWAP2 DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x191D DUP2 PUSH1 0x28 DUP5 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1315 JUMP JUMPDEST ADD PUSH1 0x28 ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1959 JUMPI PUSH2 0x1959 PUSH2 0x1929 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1971 JUMPI PUSH2 0x1971 PUSH2 0x1929 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x1985 JUMPI PUSH2 0x1985 PUSH2 0x1929 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP INVALID PUSH23 0x13A25ECC738585A232AD50A301178F12B3BA8887D13E13 DUP12 MSTORE EXTCODECOPY TIMESTAMP PUSH10 0xC47689A2646970667358 0x22 SLT KECCAK256 0xCD 0xC7 PUSH9 0xB8097D59911042FE10 0xF7 0xC6 DUP7 PUSH1 0xF5 DUP5 XOR SHL 0xCE 0xCC 0xE5 0xB0 SSTORE 0xE2 0xA8 0xE2 EXP GAS 0x4B 0x22 PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0x12A31BB540C2 0xEB ADDMOD 0xD4 SWAP16 DUP11 DUP5 0xCF DUP14 0xD5 DUP13 SWAP3 CREATE PUSH17 0x3A0E23ACA1AB46CD8A48BAFC64736F6C63 NUMBER STOP ADDMOD MULMOD STOP CALLER ",
		"sourceMap": "199:3666:54:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2606:202:24;;;;;;:::i;:::-;;:::i;:::-;;;470:14:79;;463:22;445:41;;433:2;418:18;2606:202:24;;;;;;;;2607:427:54;;;;;;:::i;:::-;;:::i;:::-;;3490:373;;;;;;:::i;:::-;;:::i;4391:129:24:-;;;;;;:::i;:::-;4465:7;4491:12;;;;;;;;;;:22;;;;4391:129;;;;1382:25:79;;;1370:2;1355:18;4391:129:24;1236:177:79;957:25:54;;;;;-1:-1:-1;;;;;957:25:54;;;;;;-1:-1:-1;;;;;1582:32:79;;;1564:51;;1552:2;1537:18;957:25:54;1418:203:79;1060:37:54;;;;;;4770:145:24;;;;;;:::i;:::-;;:::i;5787:214::-;;;;;;:::i;:::-;;:::i;3290:194:54:-;;;;;;:::i;:::-;;:::i;828:51::-;;;;;;1103:22;;;;;;2895:145:24;;;;;;:::i;:::-;;:::i;988:26:54:-;;;;;-1:-1:-1;;;;;988:26:54;;;2027:49:24;;2072:4;2027:49;;3040:244:54;;;;;;:::i;:::-;;:::i;1735:866::-;;;;;;:::i;:::-;;:::i;5149:147:24:-;;;;;;:::i;:::-;;:::i;885:65:54:-;;;;;;1020:33;;;;;-1:-1:-1;;;;;1020:33:54;;;2606:202:24;2691:4;-1:-1:-1;;;;;;2714:47:24;;-1:-1:-1;;;2714:47:24;;:87;;-1:-1:-1;;;;;;;;;;937:40:38;;;2765:36:24;2707:94;2606:202;-1:-1:-1;;2606:202:24:o;2607:427:54:-;2688:10;;2505:16:24;2516:4;2505:10;:16::i;:::-;2718:11:54::1;::::0;-1:-1:-1;;;;;2718:21:54;;::::1;:11:::0;::::1;:21;2714:53;;;2748:19;;-1:-1:-1::0;;;2748:19:54::1;;;;;;;;;;;2714:53;2782:62;::::0;-1:-1:-1;;;2782:62:54;;-1:-1:-1;;;2782:62:54::1;::::0;::::1;3348:52:79::0;-1:-1:-1;;;;;2782:34:54;::::1;::::0;::::1;::::0;3321:18:79;;2782:62:54::1;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2778:249;;;2878:11;::::0;;-1:-1:-1;;;;;2903:20:54;;::::1;-1:-1:-1::0;;;;;;2903:20:54;::::1;::::0;::::1;::::0;;;2942:37:::1;::::0;;3905:34:79;;;2878:11:54;::::1;3970:2:79::0;3955:18;;3948:43;;;2878:11:54;2942:37:::1;::::0;3840:18:79;2942:37:54::1;;;;;;;;2846:144;2607:427:::0;;:::o;2778:249::-:1;3003:24;;-1:-1:-1::0;;;3003:24:54::1;;;;;;;;;;;2778:249;2607:427:::0;;:::o;3490:373::-;3592:10;;2505:16:24;2516:4;2505:10;:16::i;:::-;3654:22:54::1;::::0;;3686:48;;;;3749:107:::1;::::0;;4176:25:79;;;4232:2;4217:18;;4210:34;;;3749:107:54::1;::::0;4149:18:79;3749:107:54::1;4002:248:79::0;4770:145:24;4465:7;4491:12;;;;;;;;;;:22;;;2505:16;2516:4;2505:10;:16::i;:::-;4883:25:::1;4894:4;4900:7;4883:10;:25::i;:::-;4770:145:::0;;;:::o;5787:214::-;-1:-1:-1;;;;;5882:23:24;;719:10:35;5882:23:24;5874:83;;;;-1:-1:-1;;;5874:83:24;;4457:2:79;5874:83:24;;;4439:21:79;4496:2;4476:18;;;4469:30;4535:34;4515:18;;;4508:62;-1:-1:-1;;;4586:18:79;;;4579:45;4641:19;;5874:83:24;;;;;;;;;5968:26;5980:4;5986:7;5968:11;:26::i;3290:194:54:-;3346:10;;2505:16:24;2516:4;2505:10;:16::i;:::-;3389:7:54::1;::::0;;3406:18;;;;3439:38:::1;::::0;;4176:25:79;;;4232:2;4217:18;;4210:34;;;3439:38:54::1;::::0;4149:18:79;3439:38:54::1;4002:248:79::0;2895:145:24;2981:4;3004:12;;;;;;;;;;;-1:-1:-1;;;;;3004:29:24;;;;;;;;;;;;;;;2895:145::o;3040:244:54:-;3121:10;;2505:16:24;2516:4;2505:10;:16::i;:::-;3171:10:54::1;::::0;;-1:-1:-1;;;;;3191:24:54;;::::1;-1:-1:-1::0;;;;;;3191:24:54;::::1;::::0;::::1;::::0;;;3230:47:::1;::::0;;3905:34:79;;;3171:10:54;::::1;3970:2:79::0;3955:18;;3948:43;;;3171:10:54;3230:47:::1;::::0;3840:18:79;3230:47:54::1;3693:304:79::0;1735:866:54;1881:7;1853:17;;2505:16:24;2516:4;2505:10;:16::i;:::-;1900:25:54::1;1928:18;;;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;2041:11:54::1;::::0;;2018:35:::1;::::0;-1:-1:-1;;;2018:35:54;;-1:-1:-1;;;;;2041:11:54;;::::1;2018:35:::0;;::::1;1564:51:79::0;;;;1900:46:54;;-1:-1:-1;1900:46:54;;2018:22;::::1;::::0;::::1;::::0;1537:18:79;;2018:35:54::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;2064:122:54::1;::::0;;::::1;::::0;;::::1;::::0;;2108:18:::1;::::0;-1:-1:-1;;;;;2108:18:54;;::::1;2064:122:::0;;2140:10:::1;::::0;;::::1;2064:122;::::0;;::::1;::::0;;;;719:10:35;2064:122:54;;;;2197:134;;;;::::1;::::0;;2241:7:::1;::::0;2197:134;;;::::1;::::0;;;2299:22:::1;::::0;2197:134;;;;2342:51;;-1:-1:-1;;;2342:51:54;;2064:122;;-1:-1:-1;2197:134:54;-1:-1:-1;2342:23:54;;::::1;::::0;::::1;::::0;:51:::1;::::0;2366:4;;2197:134;;2064:122;;2342:51:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;2470:4;2409:148;;;;;;:::i;:::-;;::::0;;;;;::::1;::::0;;2488:22:::1;::::0;4176:25:79;;4232:2;4217:18;;4210:34;;;2409:148:54;-1:-1:-1;;;;;2409:148:54;::::1;::::0;::::1;::::0;4149:18:79;2409:148:54::1;;;;;;;-1:-1:-1::0;2575:19:54;;1735:866;-1:-1:-1;;;;;;1735:866:54:o;5149:147:24:-;4465:7;4491:12;;;;;;;;;;:22;;;2505:16;2516:4;2505:10;:16::i;:::-;5263:26:::1;5275:4;5281:7;5263:11;:26::i;3334:103::-:0;3400:30;3411:4;719:10:35;3400::24;:30::i;:::-;3334:103;:::o;7244:233::-;7327:22;7335:4;7341:7;7327;:22::i;:::-;7322:149;;7365:6;:12;;;;;;;;;;;-1:-1:-1;;;;;7365:29:24;;;;;;;;;:36;;-1:-1:-1;;7365:36:24;7397:4;7365:36;;;7447:12;719:10:35;;640:96;7447:12:24;-1:-1:-1;;;;;7420:40:24;7438:7;-1:-1:-1;;;;;7420:40:24;7432:4;7420:40;;;;;;;;;;7244:233;;:::o;7602:234::-;7685:22;7693:4;7699:7;7685;:22::i;:::-;7681:149;;;7755:5;7723:12;;;;;;;;;;;-1:-1:-1;;;;;7723:29:24;;;;;;;;;;:37;;-1:-1:-1;;7723:37:24;;;7779:40;719:10:35;;7723:12:24;;7779:40;;7755:5;7779:40;7602:234;;:::o;3718:492::-;3806:22;3814:4;3820:7;3806;:22::i;:::-;3801:403;;3989:41;4017:7;-1:-1:-1;;;;;3989:41:24;4027:2;3989:19;:41::i;:::-;4101:38;4129:4;4136:2;4101:19;:38::i;:::-;3896:265;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3896:265:24;;;;;;;;;;-1:-1:-1;;;3844:349:24;;;;;;;:::i;1588:441:37:-;1663:13;1688:19;1720:10;1724:6;1720:1;:10;:::i;:::-;:14;;1733:1;1720:14;:::i;:::-;1710:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1710:25:37;;1688:47;;-1:-1:-1;;;1745:6:37;1752:1;1745:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1745:15:37;;;;;;;;;-1:-1:-1;;;1770:6:37;1777:1;1770:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1770:15:37;;;;;;;;-1:-1:-1;1800:9:37;1812:10;1816:6;1812:1;:10;:::i;:::-;:14;;1825:1;1812:14;:::i;:::-;1800:26;;1795:132;1832:1;1828;:5;1795:132;;;-1:-1:-1;;;1879:5:37;1887:3;1879:11;1866:25;;;;;;;:::i;:::-;;;;1854:6;1861:1;1854:9;;;;;;;;:::i;:::-;;;;:37;-1:-1:-1;;;;;1854:37:37;;;;;;;;-1:-1:-1;1915:1:37;1905:11;;;;;1835:3;;;:::i;:::-;;;1795:132;;;-1:-1:-1;1944:10:37;;1936:55;;;;-1:-1:-1;;;1936:55:37;;8420:2:79;1936:55:37;;;8402:21:79;;;8439:18;;;8432:30;8498:34;8478:18;;;8471:62;8550:18;;1936:55:37;8218:356:79;1936:55:37;2015:6;1588:441;-1:-1:-1;;;1588:441:37:o;-1:-1:-1:-;;;;;;;;:::o;14:286:79:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;167:23;;-1:-1:-1;;;;;;219:32:79;;209:43;;199:71;;266:1;263;256:12;497:173;565:20;;-1:-1:-1;;;;;614:31:79;;604:42;;594:70;;660:1;657;650:12;594:70;497:173;;;:::o;675:186::-;734:6;787:2;775:9;766:7;762:23;758:32;755:52;;;803:1;800;793:12;755:52;826:29;845:9;826:29;:::i;866:180::-;925:6;978:2;966:9;957:7;953:23;949:32;946:52;;;994:1;991;984:12;946:52;-1:-1:-1;1017:23:79;;866:180;-1:-1:-1;866:180:79:o;1808:254::-;1876:6;1884;1937:2;1925:9;1916:7;1912:23;1908:32;1905:52;;;1953:1;1950;1943:12;1905:52;1989:9;1976:23;1966:33;;2018:38;2052:2;2041:9;2037:18;2018:38;:::i;:::-;2008:48;;1808:254;;;;;:::o;2067:127::-;2128:10;2123:3;2119:20;2116:1;2109:31;2159:4;2156:1;2149:15;2183:4;2180:1;2173:15;2199:1000;2277:6;2285;2338:2;2326:9;2317:7;2313:23;2309:32;2306:52;;;2354:1;2351;2344:12;2306:52;2394:9;2381:23;2423:18;2464:2;2456:6;2453:14;2450:34;;;2480:1;2477;2470:12;2450:34;2518:6;2507:9;2503:22;2493:32;;2563:7;2556:4;2552:2;2548:13;2544:27;2534:55;;2585:1;2582;2575:12;2534:55;2621:2;2608:16;2643:2;2639;2636:10;2633:36;;;2649:18;;:::i;:::-;2724:2;2718:9;2692:2;2778:13;;-1:-1:-1;;2774:22:79;;;2798:2;2770:31;2766:40;2754:53;;;2822:18;;;2842:22;;;2819:46;2816:72;;;2868:18;;:::i;:::-;2908:10;2904:2;2897:22;2943:2;2935:6;2928:18;2985:7;2978:4;2973:2;2969;2965:11;2961:22;2958:35;2955:55;;;3006:1;3003;2996:12;2955:55;3066:2;3059:4;3055:2;3051:13;3044:4;3036:6;3032:17;3019:50;3113:1;3106:4;3089:15;;;3085:26;;3078:37;3089:15;3172:20;;;;3159:34;;-1:-1:-1;;;;;;2199:1000:79:o;3411:277::-;3478:6;3531:2;3519:9;3510:7;3506:23;3502:32;3499:52;;;3547:1;3544;3537:12;3499:52;3579:9;3573:16;3632:5;3625:13;3618:21;3611:5;3608:32;3598:60;;3654:1;3651;3644:12;4671:258;4743:1;4753:113;4767:6;4764:1;4761:13;4753:113;;;4843:11;;;4837:18;4824:11;;;4817:39;4789:2;4782:10;4753:113;;;4884:6;4881:1;4878:13;4875:48;;;4919:1;4910:6;4905:3;4901:16;4894:27;4875:48;;4671:258;;;:::o;4934:::-;4976:3;5014:5;5008:12;5041:6;5036:3;5029:19;5057:63;5113:6;5106:4;5101:3;5097:14;5090:4;5083:5;5079:16;5057:63;:::i;:::-;5174:2;5153:15;-1:-1:-1;;5149:29:79;5140:39;;;;5181:4;5136:50;;4934:258;-1:-1:-1;;4934:258:79:o;5197:1008::-;5494:3;5483:9;5476:22;5457:4;5515:46;5556:3;5545:9;5541:19;5533:6;5515:46;:::i;:::-;5507:54;;5580:2;5617;5606:9;5602:18;5662:6;5686:1;5696:167;5710:4;5707:1;5704:11;5696:167;;;5769:13;;5757:26;;5803:12;;;;5838:15;;;;5730:1;5723:9;5696:167;;;5700:3;;;5900;5889:9;5885:19;5952:6;5978:1;5988:211;6004:4;5999:3;5996:13;5988:211;;;6073:15;;-1:-1:-1;;;;;6069:41:79;6055:56;;6133:14;;;;6172:17;;;;6107:1;6019:11;5988:211;;;5992:3;;;;5197:1008;;;;;;:::o;6210:276::-;6341:3;6379:6;6373:13;6395:53;6441:6;6436:3;6429:4;6421:6;6417:17;6395:53;:::i;:::-;6464:16;;;;;6210:276;-1:-1:-1;;6210:276:79:o;6491:786::-;6902:25;6897:3;6890:38;6872:3;6957:6;6951:13;6973:62;7028:6;7023:2;7018:3;7014:12;7007:4;6999:6;6995:17;6973:62;:::i;:::-;-1:-1:-1;;;7094:2:79;7054:16;;;7086:11;;;7079:40;7144:13;;7166:63;7144:13;7215:2;7207:11;;7200:4;7188:17;;7166:63;:::i;:::-;7249:17;7268:2;7245:26;;6491:786;-1:-1:-1;;;;6491:786:79:o;7282:220::-;7431:2;7420:9;7413:21;7394:4;7451:45;7492:2;7481:9;7477:18;7469:6;7451:45;:::i;7507:127::-;7568:10;7563:3;7559:20;7556:1;7549:31;7599:4;7596:1;7589:15;7623:4;7620:1;7613:15;7639:168;7679:7;7745:1;7741;7737:6;7733:14;7730:1;7727:21;7722:1;7715:9;7708:17;7704:45;7701:71;;;7752:18;;:::i;:::-;-1:-1:-1;7792:9:79;;7639:168::o;7812:128::-;7852:3;7883:1;7879:6;7876:1;7873:13;7870:39;;;7889:18;;:::i;:::-;-1:-1:-1;7925:9:79;;7812:128::o;7945:127::-;8006:10;8001:3;7997:20;7994:1;7987:31;8037:4;8034:1;8027:15;8061:4;8058:1;8051:15;8077:136;8116:3;8144:5;8134:39;;8153:18;;:::i;:::-;-1:-1:-1;;;8189:18:79;;8077:136::o"
	  },
	  "gasEstimates": {
		"creation": {
		  "codeDepositCost": "2117600",
		  "executionCost": "infinite",
		  "totalCost": "infinite"
		},
		"external": {
		  "ADMIN_ROLE()": "2318",
		  "BANK_CREATOR_ROLE()": "2383",
		  "DEFAULT_ADMIN_ROLE()": "306",
		  "createBankProxy(string,uint256)": "infinite",
		  "getRoleAdmin(bytes32)": "2537",
		  "grantRole(bytes32,address)": "infinite",
		  "hasRole(bytes32,address)": "2718",
		  "launchpadFeePercentage()": "2340",
		  "launchpadFeeWallet()": "2447",
		  "mintCap()": "2340",
		  "nftBankImpl()": "2426",
		  "renounceRole(bytes32,address)": "29084",
		  "revokeRole(bytes32,address)": "infinite",
		  "setLaunchpadFeePercentage(uint256)": "infinite",
		  "setMintCap(uint256)": "infinite",
		  "setNewBankImplAddress(address)": "infinite",
		  "setNewSuperAdmin(address)": "infinite",
		  "superAdmin()": "2360",
		  "supportsInterface(bytes4)": "450"
		}
	  },
	  "methodIdentifiers": {
		"ADMIN_ROLE()": "75b238fc",
		"BANK_CREATOR_ROLE()": "ec5eb5da",
		"DEFAULT_ADMIN_ROLE()": "a217fddf",
		"createBankProxy(string,uint256)": "ce791ce3",
		"getRoleAdmin(bytes32)": "248a9ca3",
		"grantRole(bytes32,address)": "2f2ff15d",
		"hasRole(bytes32,address)": "91d14854",
		"launchpadFeePercentage()": "2e4db810",
		"launchpadFeeWallet()": "f8be73dd",
		"mintCap()": "76c71ca1",
		"nftBankImpl()": "95f148f7",
		"renounceRole(bytes32,address)": "36568abe",
		"revokeRole(bytes32,address)": "d547741f",
		"setLaunchpadFeePercentage(uint256)": "13877cea",
		"setMintCap(uint256)": "4070a0c9",
		"setNewBankImplAddress(address)": "03745a0e",
		"setNewSuperAdmin(address)": "b6c3ef27",
		"superAdmin()": "29575f6a",
		"supportsInterface(bytes4)": "01ffc9a7"
	  }
	},
	"metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_launchpadFeeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftBankImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_superAdmin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_launchpadFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintCap\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DoesNotSupportINFTBank\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotADifferentImpl\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftBankProxyAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"launchpadFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftImportExpirationTime\",\"type\":\"uint256\"}],\"name\":\"NFTBankCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLaunchpadFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldLaunchpadFeePercentage\",\"type\":\"uint256\"}],\"name\":\"NewLaunchpadFeeWasSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMintCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMintCap\",\"type\":\"uint256\"}],\"name\":\"NewMintCapWasSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImpl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImpl\",\"type\":\"address\"}],\"name\":\"NewNFTBankImplWasSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSuperAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldSuperAdmin\",\"type\":\"address\"}],\"name\":\"NewSuperAdminWasSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BANK_CREATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nftImportExpirationTime\",\"type\":\"uint256\"}],\"name\":\"createBankProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchpadFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchpadFeeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftBankImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_launchpadFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setLaunchpadFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintCap\",\"type\":\"uint256\"}],\"name\":\"setMintCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ImpAdr\",\"type\":\"address\"}],\"name\":\"setNewBankImplAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_superAdmin\",\"type\":\"address\"}],\"name\":\"setNewSuperAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFT/NFTBank/NFTBankFactory.sol\":\"NFTBankFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x5addc7dca2366b164c9befa35da22e9081c44bf6c4c8dce4269be43516f8916e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1edf4e6819997d1820aea89eff73d4fdaeff0bb87ff2f2b4cb6ad60bfe5ba63c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\\n    function __ERC1155Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\\n    }\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa8a1f16aa62b4d8c9e380057d9c3ee5c992e4a10dccc5650b26e38d4c61287d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa1b77d6d0f4591359c42b747a31375f20b0571b5e1fb62652d8184fb10f1d63a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5d3b80a09c746aed89446a14d0e8f5ba5212520360d00a495a2156a7a51497e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\\n    function __ERC721Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Holder_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb7f90ab8af7dae0bd4acfa088f9e606ea039110face097ca7c8beef563f71e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/NFT/NFTBank/NFTBankFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"../../interfaces/IRewardManager.sol\\\";\\nimport \\\"./NFTBankProxy.sol\\\";\\n\\ncontract NFTBankFactory is AccessControl {\\n    event NFTBankCreated(\\n        address indexed nftBankProxyAddress,\\n        string indexed name,\\n        uint256 launchpadFee,\\n        uint256 nftImportExpirationTime\\n    );\\n    event NewNFTBankImplWasSet(address newImpl, address oldImpl);\\n    event NewSuperAdminWasSet(address newSuperAdmin, address oldSuperAdmin);\\n    event NewMintCapWasSet(uint256 newMintCap, uint256 oldMintCap);\\n    event NewLaunchpadFeeWasSet(\\n        uint256 newLaunchpadFeePercentage,\\n        uint256 oldLaunchpadFeePercentage\\n    );\\n\\n    error NotADifferentImpl();\\n    error DoesNotSupportINFTBank();\\n\\n    bytes32 public ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public BANK_CREATOR_ROLE = keccak256(\\\"BANK_CREATOR_ROLE\\\");\\n\\n    address public superAdmin;\\n    address public nftBankImpl;\\n    address public launchpadFeeWallet;\\n\\n    uint256 public launchpadFeePercentage;\\n    uint256 public mintCap;\\n\\n    constructor(\\n        address _launchpadFeeWallet,\\n        address _nftBankImpl,\\n        address _superAdmin,\\n        uint256 _launchpadFeePercentage,\\n        uint256 _mintCap\\n    ) {\\n        nftBankImpl = _nftBankImpl;\\n        superAdmin = _superAdmin;\\n\\n        _setupRole(ADMIN_ROLE, _msgSender());\\n        _setupRole(BANK_CREATOR_ROLE, _msgSender());\\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\\n        _setRoleAdmin(BANK_CREATOR_ROLE, ADMIN_ROLE);\\n\\n        launchpadFeeWallet = _launchpadFeeWallet;\\n\\n        launchpadFeePercentage = _launchpadFeePercentage;\\n        mintCap = _mintCap;\\n    }\\n\\n    function createBankProxy(\\n        string memory name,\\n        uint256 nftImportExpirationTime\\n    ) external onlyRole(BANK_CREATOR_ROLE) returns (address) {\\n        NFTBankProxy nftBankProxy = new NFTBankProxy();\\n        address nftBankProxyAddress = address(nftBankProxy);\\n\\n        nftBankProxy.upgradeTo(nftBankImpl);\\n\\n        address[3] memory addresses = [\\n            launchpadFeeWallet,\\n            superAdmin,\\n            _msgSender()\\n        ];\\n\\n        uint256[3] memory variables = [\\n            mintCap,\\n            nftImportExpirationTime,\\n            launchpadFeePercentage\\n        ];\\n\\n        nftBankProxy.initialize(name, variables, addresses);\\n\\n        emit NFTBankCreated(\\n            nftBankProxyAddress,\\n            name,\\n            launchpadFeePercentage,\\n            nftImportExpirationTime\\n        );\\n\\n        return nftBankProxyAddress;\\n    }\\n\\n    function setNewBankImplAddress(address ImpAdr)\\n        external\\n        onlyRole(ADMIN_ROLE)\\n    {\\n        if (nftBankImpl == ImpAdr) revert NotADifferentImpl();\\n\\n        if (INFTBank(ImpAdr).supportsInterface(type(INFTBank).interfaceId)) {\\n            address oldImpl = nftBankImpl;\\n            nftBankImpl = ImpAdr;\\n            emit NewNFTBankImplWasSet(ImpAdr, oldImpl);\\n        } else revert DoesNotSupportINFTBank();\\n    }\\n\\n    function setNewSuperAdmin(address _superAdmin)\\n        external\\n        onlyRole(ADMIN_ROLE)\\n    {\\n        address oldSuperAdmin = superAdmin;\\n        superAdmin = _superAdmin;\\n        emit NewSuperAdminWasSet(_superAdmin, oldSuperAdmin);\\n    }\\n\\n    function setMintCap(uint256 _mintCap) external onlyRole(ADMIN_ROLE) {\\n        uint256 oldMintCap = mintCap;\\n        mintCap = _mintCap;\\n        emit NewMintCapWasSet(_mintCap, oldMintCap);\\n    }\\n\\n    function setLaunchpadFeePercentage(uint256 _launchpadFeePercentage)\\n        external\\n        onlyRole(ADMIN_ROLE)\\n    {\\n        uint256 oldLaunchpadFeePercentage = launchpadFeePercentage;\\n        launchpadFeePercentage = _launchpadFeePercentage;\\n        emit NewLaunchpadFeeWasSet(\\n            _launchpadFeePercentage,\\n            oldLaunchpadFeePercentage\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7e3104770300ed5caf6e28ffeef7d1c4531a97106a44eb74ff8acc97407b1de3\",\"license\":\"UNLICENSED\"},\"contracts/NFT/NFTBank/NFTBankProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./NFTBankStorageStructure.sol\\\";\\n\\ncontract NFTBankProxy is NFTBankStorageStructure {\\n    event NFTBankImplUpgraded(address indexed newImpl, address indexed oldImpl);\\n\\n    error NotADifferentImpl();\\n\\n    constructor() {\\n        _setupRole(SUPER_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    function upgradeTo(address _newNFTBankImplementation)\\n        external\\n        onlyRole(SUPER_ADMIN_ROLE)\\n    {\\n        if (nftBankImpl == _newNFTBankImplementation)\\n            revert NotADifferentImpl();\\n\\n        _setNFTBankImpl(_newNFTBankImplementation);\\n    }\\n\\n    function initialize(\\n        string memory _name,\\n        // _variables[0] mintCap,\\n        // _variables[1] nftImportExpirationTime,\\n        // _variables[2] launchpadFeePercentage\\n        uint256[3] memory _variables,\\n        // address[1] = launchpadFeeWallet\\n        // address[2] = superAdmin\\n        // address[3] = admin\\n        address[3] memory addresses\\n    ) public initializer onlyRole(SUPER_ADMIN_ROLE) {\\n        AccessControlUpgradeable.__AccessControl_init();\\n        ERC721HolderUpgradeable.__ERC721Holder_init();\\n        ERC1155HolderUpgradeable.__ERC1155Holder_init();\\n\\n        name = _name;\\n\\n        launchpadFeeWallet = payable(addresses[0]);\\n\\n        mintCap = _variables[0];\\n        nftImportExpirationTime = _variables[1];\\n        launchpadFeePercentage = _variables[2];\\n\\n        nftBankLaunchDate = block.timestamp;\\n\\n        _setupRole(SUPER_ADMIN_ROLE, addresses[1]);\\n        _setupRole(ADMIN_ROLE, addresses[2]);\\n\\n        _setRoleAdmin(SUPER_ADMIN_ROLE, SUPER_ADMIN_ROLE);\\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\\n    }\\n\\n    fallback() external payable {\\n        address opr = nftBankImpl;\\n        require(opr != address(0));\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(gas(), opr, 0, calldatasize(), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    receive() external payable {}\\n\\n    function _setNFTBankImpl(address _newNFTBankImpl) internal {\\n        address oldImpl = nftBankImpl;\\n        nftBankImpl = _newNFTBankImpl;\\n        emit NFTBankImplUpgraded(_newNFTBankImpl, oldImpl);\\n    }\\n}\\n\",\"keccak256\":\"0x0f37ef8d8578e98b53029a095e0de5e9c8dabc53aa9b4798601e4074108927bb\",\"license\":\"MIT\"},\"contracts/NFT/NFTBank/NFTBankStorageStructure.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\\\";\\n\\nimport \\\"../../libraries/BasisPoints.sol\\\";\\n\\nimport \\\"../../interfaces/INFTBank.sol\\\";\\nimport \\\"../../interfaces/ISparkWorldToken.sol\\\";\\n\\ncontract NFTBankStorageStructure is\\n    ERC721HolderUpgradeable,\\n    ERC1155HolderUpgradeable,\\n    AccessControlUpgradeable\\n{\\n    uint256 public constant ERC721Token = 721;\\n    uint256 public constant ERC1155Token = 1155;\\n    uint256 public constant guaranteedWithNoDiscountSpot = 10001;\\n    uint256 public constant freeSpot = 10000;\\n    uint256 public constant raceSpot = 0; // Not MVP\\n\\n    bytes32 public constant SUPER_ADMIN_ROLE = keccak256(\\\"SUPER_ADMIN_ROLE\\\");\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant COLLECTION_CREATOR_ROLE =\\n        keccak256(\\\"COLLECTION_CREATOR_ROLE\\\");\\n\\n    uint256 public nftBankLaunchDate; // = block.timestamp\\n    uint256 public mintCap;\\n    uint256 public nftImportExpirationTime; // nftImportExpirationDate = nftBankLaunchDate + nftImportExpirationTime\\n    uint256 public launchpadFeePercentage; // in basis points\\n    uint256 public mintPrice;\\n    uint256 public mintExpirationTime; // claimExpirationTime\\n    uint256 public maxMintCount; // maxClaimCount\\n\\n    // in setWhitelist\\n    uint256 public numberOfFreeNFTs; // 10 top stakes + 10 top predictions\\n    uint256 public numberOfGuaranteedNFTs; // king and queen spots\\n    uint256 public numberOfRaceNFTs; // fellow spots, not MVP\\n\\n    uint256 public totalFreeAllocated;\\n    uint256 public totalGuaranteedAllocated;\\n    uint256 public totalRaceMinted;\\n    uint256 public whitelistMintStartDate; // mintExpirationTime is relative to this\\n\\n    // set in the factory constructor\\n    address public nftBankImpl;\\n    address payable public launchpadFeeWallet;\\n\\n    address public nftCollection;\\n    address payable public creatorFeeWallet;\\n\\n    bool public nftDataImported;\\n\\n    bytes32 public baseURIHash;\\n\\n    string public name; // to be filled with the project's name (and fetched later if ERC721)\\n    string public symbol; // fetched later (if ERC721)\\n    string public baseURI;\\n\\n    INFTBank.NFTType public nftType;\\n    INFTBank.Mode public mode;\\n    CountersUpgradeable.Counter internal _tokenIdIndexes;\\n\\n    mapping(address => INFTBank.Mintables) public whitelistedUsers;\\n    address[] public winners;\\n    uint256[] public nftIds;\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControlUpgradeable, ERC1155ReceiverUpgradeable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(INFTBank).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x58e1ee5826130f5fa3fff706af0bc7cdaee70c91e67de48812b64e9c8a044b75\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/INFTBank.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\ninterface INFTBank is IERC165Upgradeable {\\n    /**\\n     * @dev spots are the amount of discount a user can have on their WL NFTs.\\n     * examples:\\n     * spots = 10000 is for free NFTs (in Basis Points)\\n     * spots = 5000 is for 50% discounted NFTs\\n     * spots = 2500 is for 25% discounted NFTs\\n     * spots = 10001 is for guaranteed NFTs (no discount)\\n     * spots = 0 is for general NFTs (for all, no discount)\\n     * @note for the MVP, the only possible spots are 10000 and 10001\\n     * @note for MVP, setting mintedSpots array is not beneficial and efficient\\n     * and should be changed when the front is able to distinguish different spot types and discounts\\n     */\\n    struct Mintables {\\n        uint256[] spots;\\n        bool[] mintedSpots; // not MVP\\n        uint256 freeSpots; // for MVP\\n        uint256 guaranteedSpots;\\n        uint256 raceSpots;\\n        uint256 freeSpotsMinted;\\n        uint256 raceSpotsMinted;\\n        uint256 guaranteedSpotsMinted;\\n        uint32 rank;\\n        bool isWhitelisted;\\n        bool isFreezed;\\n    }\\n\\n    struct UserAllocation {\\n        address user;\\n        uint32 rank;\\n        uint256[] spots;\\n        uint256 freeSpots; // for MVP\\n        uint256 guaranteedSpots;\\n        uint256 raceSpots;\\n    }\\n\\n    enum Mode {\\n        Preparation, // is the default mode and nothing can be done in this mode (until FPL ends or\\n        // admins set the private mode)\\n        Private, // can set whitelist and mint price only in this mode, also admin\\n        // and creator can only mint in this mode\\n        Whitelist, // only whitelisted users can mint in this mode, can not be changed\\n        // before mintExpirationTime\\n        Public // anyone can mint in this mode, not MVP\\n    }\\n\\n    enum NFTType {\\n        ERC721,\\n        ERC1155\\n    }\\n\\n    error ShouldImportNFTDataFirst();\\n    error NotInPreparationMode();\\n    error NotInPrivateMode();\\n    error AlreadyInWhitelistMode();\\n    error CanNotImportDataBeforeNFTImportExpirationTime();\\n    error DoesNotSupportIERC721();\\n    error DoesNotSupportIERC1155();\\n    error NotAValidTokenType();\\n    error NotEnoughNFTsToBeClaimed();\\n    error SpotIsIncorrect(address user, uint256 spot);\\n    error TotalAllocationsExceedsMaxMintCount();\\n    error TotalFreeMintsExceedsFreeNFTs(uint256 requested, uint256 actual);\\n    error TotalGuaranteedMintsExceedsGuaranteedNFTs(\\n        uint256 requested,\\n        uint256 actual\\n    );\\n    error NumberOfFreeSpotsForUserIsWrong(uint256 requested, uint256 actual);\\n    error NumberOfGuaranteedSpotsForUserIsWrong(\\n        uint256 requested,\\n        uint256 actual\\n    );\\n    error NumberOfRaceSpotsForUserIsWrong(uint256 requested, uint256 actual);\\n    error MintingNotEndedYet();\\n    error MintingHasEnded();\\n    error WrongBaseURIProvided();\\n    error BalanceIsLessThanRequestedCount(uint256 requested, uint256 balance);\\n    error ClaimingNotStartedYet();\\n    error ClaimingHasEnded();\\n    error NotWhitelisted();\\n    error InvalidAmount(uint256 sent, uint256 minRequired);\\n    error RequestedPrivateModeClaimCountExceedsTotal();\\n    error RequestedFreeClaimCountExceedsTotal();\\n    error RequestedGuaranteedClaimCountExceedsTotal();\\n    error RequestedRaceClaimCountExceedsTotalForUser();\\n    error RequestedRaceClaimCountExceedsTotal();\\n    error NotEnoughNFTsLeft();\\n    error CanNotAllocateMoreThanClaimCap();\\n    error UserIsFreezed();\\n    error CanNotChangeModeBeforeWhitelistMintExpirationDate();\\n    error RanksMustBeInOrder();\\n\\n    event PreparationModeIsOn();\\n    event PrivateModeIsOn();\\n    event WhitelistModeIsOn();\\n    event PublicModeIsOn();\\n    event ClaimPriceChanged(uint256 newClaimPrice, uint256 oldClaimPrice);\\n    event ClaimCapChanged(uint256 newClaimCap, uint256 oldClaimCap);\\n    event NFTDataImported(\\n        address[2] addresses,\\n        uint256[4] variables,\\n        uint256[] _nftIds,\\n        string symbol,\\n        bytes32 baseURIHash\\n    );\\n    event UsersUnfreezed(address[] users);\\n    event baseURIIsSet(string indexed baseURI);\\n    event WinnersAreSet(\\n        UserAllocation[] allocations,\\n        bool lastSlot,\\n        bool deletePreviousWinners,\\n        address[] deletedWinners\\n    );\\n    event UserClaimed(\\n        address indexed user,\\n        uint256 totalClaimFee,\\n        uint256 extraPaid,\\n        uint256 launchpadFee,\\n        uint256 ClaimedFreeSpotsCount,\\n        uint256 ClaimedGuaranteedSpotsCount,\\n        uint256 ClaimedRaceSpotsCount,\\n        uint256[] claimedIds\\n    );\\n    event BalanceWithdrawn(address caller, address receiver, uint256 amount);\\n\\n    function getMode() external view returns (Mode);\\n\\n    function getNFTType() external view returns (NFTType);\\n\\n    function setPreparationMode() external;\\n\\n    function setPrivateMode() external;\\n\\n    function setPublicMode() external;\\n\\n    function importNFTData(\\n        // addresses[0] = nftCollection\\n        // addresses[1] = creatorFeeWallet\\n        address[2] calldata addresses,\\n        // variables[0] = price\\n        // variables[1] = claimExpirationTime\\n        // variables[2] = nftType\\n        // variables[3] = maxClaimCount\\n        uint256[4] calldata varibles,\\n        uint256[] calldata _nftIds,\\n        string memory _symbol,\\n        bytes32 _baseURIHash\\n    ) external;\\n\\n    function setWhitelistedUsers(\\n        UserAllocation[] calldata allocations,\\n        uint256[3] calldata numberOfNFTs,\\n        address[] calldata deletedWinners,\\n        bool lastSlot,\\n        bool deletePreviousWinners\\n    ) external;\\n\\n    function unfreezeUsers(address[] memory user) external;\\n\\n    function claim(\\n        uint256 freeClaimCount,\\n        uint256 guaranteedClaimCount,\\n        uint256 raceClaimCount,\\n        uint256 privateModeClaimCount\\n    ) external payable;\\n\\n    function getTotalClaimPrice(\\n        uint256 guaranteedClaimCount,\\n        uint256 raceClaimCount\\n    ) external view returns (uint256 claimFee);\\n\\n    function setBaseURI(string memory _BaseURI) external;\\n\\n    function setMintPrice(uint256 _mintPrice) external;\\n\\n    function setMintCap(uint256 _mintCap) external;\\n\\n    function isWhitelisted(address user) external view returns (bool);\\n\\n    function getTotalNumberOfFreeSpots(address user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getNumberOfRemainingFreeSpots(address user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getTotalNumberOfGuaranteedSpots(address user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getNumberOfRemainingGuaranteedSpots(address user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getNumberOfRaceSpots(address user) external view returns (uint256);\\n\\n    function getNumberOfRemainingRaceSpots(address user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getNumberOfTotalRemainingNFTs() external view returns (uint256);\\n\\n    function getNumberOfTotalRemainingRaceNFTs()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getUserSpots(address user)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getUserMintedSpots(address user)\\n        external\\n        view\\n        returns (bool[] memory);\\n\\n    function getBalance() external view returns (uint256);\\n\\n    function getWinners() external view returns (address[] memory);\\n\\n    function withdrawBalance(address payable receiver) external;\\n}\\n\",\"keccak256\":\"0xafa0e67eaa4babd4a2c79dcde440fc5920d1443202b34140cb6535f12c42764b\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ninterface IRewardManager is IAccessControl {\\n    function setOperator(address _newOperator) external;\\n\\n    function addPool(address _poolAddress) external;\\n\\n    function rewardUser(address _user, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x046384b58c5dbcbb997e8a24ed0bb7a8d154df549d13b1ba6fdf17413fda517a\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISparkWorldToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nimport \\\"lossless/contracts/interfaces/ILosslessERC20.sol\\\";\\n\\ninterface ISparkWorldToken is ILERC20 {\\n    function setAllocationAddresses(\\n        address _SeedAddr,\\n        address _StrategicRoundAddr,\\n        address _PrivateSaleAddr,\\n        address _PublicSaleAddr,\\n        address _TeamAllocationAddr,\\n        address _StakingAddr,\\n        address _EchosystemTreasuryAddr,\\n        address _LiquidityAddr,\\n        address _AdvisorsAddr,\\n        address _AirdropAddr\\n    ) external;\\n\\n    function distributeTokens() external;\\n\\n    function getFeeWallet() external returns (address);\\n\\n    function setFeeWallet(address _newFeeWallet) external;\\n}\\n\",\"keccak256\":\"0xaecfbe0feef00deefc62cd31d0a0d405a377571a730e28bdaaf407bb32573859\",\"license\":\"UNLICENSED\"},\"contracts/libraries/BasisPoints.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.9;\\n\\nlibrary BasisPoints {\\n    uint256 private constant BASIS_POINTS = 10000;\\n\\n    function mulBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        return (amt * bp) / (BASIS_POINTS);\\n    }\\n\\n    function divBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        require(bp > 0, \\\"Cannot divide by zero.\\\");\\n        return (amt * BASIS_POINTS) / (bp);\\n    }\\n\\n    function addBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        if (amt == 0) return 0;\\n        if (bp == 0) return amt;\\n        return amt + (mulBP(amt, bp));\\n    }\\n\\n    function subBP(uint256 amt, uint256 bp) internal pure returns (uint256) {\\n        if (amt == 0) return 0;\\n        if (bp == 0) return amt;\\n        return amt - (mulBP(amt, bp));\\n    }\\n}\\n\",\"keccak256\":\"0xc609e99d5b1ffddcf9dd81e15147c56c6ae8c5de41a3526aa555da5a1693a20f\",\"license\":\"UNLICENSED\"},\"lossless/contracts/interfaces/ILosslessERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ILERC20 {\\n    function name() external view returns (string memory);\\n    function admin() external view returns (address);\\n    function getAdmin() external view returns (address);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address _account) external view returns (uint256);\\n    function transfer(address _recipient, uint256 _amount) external returns (bool);\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\n    function transferFrom(address _sender, address _recipient, uint256 _amount) external returns (bool);\\n    function increaseAllowance(address _spender, uint256 _addedValue) external returns (bool);\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) external returns (bool);\\n    \\n    function transferOutBlacklistedFunds(address[] calldata _from) external;\\n    function setLosslessAdmin(address _newAdmin) external;\\n    function transferRecoveryAdminOwnership(address _candidate, bytes32 _keyHash) external;\\n    function acceptRecoveryAdminOwnership(bytes memory _key) external;\\n    function proposeLosslessTurnOff() external;\\n    function executeLosslessTurnOff() external;\\n    function executeLosslessTurnOn() external;\\n\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n    event NewAdmin(address indexed _newAdmin);\\n    event NewRecoveryAdminProposal(address indexed _candidate);\\n    event NewRecoveryAdmin(address indexed _newAdmin);\\n    event LosslessTurnOffProposal(uint256 _turnOffDate);\\n    event LosslessOff();\\n    event LosslessOn();\\n}\",\"keccak256\":\"0x3d128899b6b151f50ea0b84f3440e5eba36e7a1951c99a81529630e83459039a\",\"license\":\"MIT\"}},\"version\":1}",
	"storageLayout": {
	  "storage": [
		{
		  "astId": 4227,
		  "contract": "contracts/NFT/NFTBank/NFTBankFactory.sol:NFTBankFactory",
		  "label": "_roles",
		  "offset": 0,
		  "slot": "0",
		  "type": "t_mapping(t_bytes32,t_struct(RoleData)4222_storage)"
		},
		{
		  "astId": 13823,
		  "contract": "contracts/NFT/NFTBank/NFTBankFactory.sol:NFTBankFactory",
		  "label": "ADMIN_ROLE",
		  "offset": 0,
		  "slot": "1",
		  "type": "t_bytes32"
		},
		{
		  "astId": 13828,
		  "contract": "contracts/NFT/NFTBank/NFTBankFactory.sol:NFTBankFactory",
		  "label": "BANK_CREATOR_ROLE",
		  "offset": 0,
		  "slot": "2",
		  "type": "t_bytes32"
		},
		{
		  "astId": 13830,
		  "contract": "contracts/NFT/NFTBank/NFTBankFactory.sol:NFTBankFactory",
		  "label": "superAdmin",
		  "offset": 0,
		  "slot": "3",
		  "type": "t_address"
		},
		{
		  "astId": 13832,
		  "contract": "contracts/NFT/NFTBank/NFTBankFactory.sol:NFTBankFactory",
		  "label": "nftBankImpl",
		  "offset": 0,
		  "slot": "4",
		  "type": "t_address"
		},
		{
		  "astId": 13834,
		  "contract": "contracts/NFT/NFTBank/NFTBankFactory.sol:NFTBankFactory",
		  "label": "launchpadFeeWallet",
		  "offset": 0,
		  "slot": "5",
		  "type": "t_address"
		},
		{
		  "astId": 13836,
		  "contract": "contracts/NFT/NFTBank/NFTBankFactory.sol:NFTBankFactory",
		  "label": "launchpadFeePercentage",
		  "offset": 0,
		  "slot": "6",
		  "type": "t_uint256"
		},
		{
		  "astId": 13838,
		  "contract": "contracts/NFT/NFTBank/NFTBankFactory.sol:NFTBankFactory",
		  "label": "mintCap",
		  "offset": 0,
		  "slot": "7",
		  "type": "t_uint256"
		}
	  ],
	  "types": {
		"t_address": {
		  "encoding": "inplace",
		  "label": "address",
		  "numberOfBytes": "20"
		},
		"t_bool": {
		  "encoding": "inplace",
		  "label": "bool",
		  "numberOfBytes": "1"
		},
		"t_bytes32": {
		  "encoding": "inplace",
		  "label": "bytes32",
		  "numberOfBytes": "32"
		},
		"t_mapping(t_address,t_bool)": {
		  "encoding": "mapping",
		  "key": "t_address",
		  "label": "mapping(address => bool)",
		  "numberOfBytes": "32",
		  "value": "t_bool"
		},
		"t_mapping(t_bytes32,t_struct(RoleData)4222_storage)": {
		  "encoding": "mapping",
		  "key": "t_bytes32",
		  "label": "mapping(bytes32 => struct AccessControl.RoleData)",
		  "numberOfBytes": "32",
		  "value": "t_struct(RoleData)4222_storage"
		},
		"t_struct(RoleData)4222_storage": {
		  "encoding": "inplace",
		  "label": "struct AccessControl.RoleData",
		  "members": [
			{
			  "astId": 4219,
			  "contract": "contracts/NFT/NFTBank/NFTBankFactory.sol:NFTBankFactory",
			  "label": "members",
			  "offset": 0,
			  "slot": "0",
			  "type": "t_mapping(t_address,t_bool)"
			},
			{
			  "astId": 4221,
			  "contract": "contracts/NFT/NFTBank/NFTBankFactory.sol:NFTBankFactory",
			  "label": "adminRole",
			  "offset": 0,
			  "slot": "1",
			  "type": "t_bytes32"
			}
		  ],
		  "numberOfBytes": "64"
		},
		"t_uint256": {
		  "encoding": "inplace",
		  "label": "uint256",
		  "numberOfBytes": "32"
		}
	  }
	},
	"userdoc": {
	  "kind": "user",
	  "methods": {},
	  "version": 1
	}
  }